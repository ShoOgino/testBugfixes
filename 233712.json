{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b2620aa1330c2e39c589ec12defb94027b2c29","date":1426608796,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    final RTimer timer = new RTimer();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, timer.getTime(), getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, System.currentTimeMillis() - start, getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    MapWriter map = null;\n    List l;\n    final RTimer timer = new RTimer();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = map._getStr(asList(\"response\", \"numFound\"),null);\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n\n      assertEquals(\"\" + bytes.limit(), map._getStr(\"response/docs[0]/size\",null));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, timer.getTime(), map.toString()));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    final RTimer timer = new RTimer();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, timer.getTime(), getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00bfa246dd03239965db3e388077a8929299bb42","date":1568492597,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    MapWriter map = null;\n    final RTimer timer = new RTimer();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = map._getStr(asList(\"response\", \"numFound\"),null);\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n\n      assertEquals(\"\" + bytes.limit(), map._getStr(\"response/docs[0]/size\",null));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, timer.getTime(), map.toString()));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    MapWriter map = null;\n    List l;\n    final RTimer timer = new RTimer();\n    int i = 0;\n    for (; i < 150; i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = map._getStr(asList(\"response\", \"numFound\"),null);\n      if (!(\"\" + count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n\n      assertEquals(\"\" + bytes.limit(), map._getStr(\"response/docs[0]/size\",null));\n      return;\n    }\n    fail(StrUtils.formatString(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i, count, timer.getTime(), map.toString()));\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00bfa246dd03239965db3e388077a8929299bb42":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00bfa246dd03239965db3e388077a8929299bb42"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"00bfa246dd03239965db3e388077a8929299bb42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["00bfa246dd03239965db3e388077a8929299bb42"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}