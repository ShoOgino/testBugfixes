{"path":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMultipleVersions().mjava","commits":[{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMultipleVersions().mjava","pathOld":"/dev/null","sourceNew":"  // Test multiple versions, that it has to be greater than my_version_l and my_version_f\n  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    // All variations of additional versions should fail other than my_version_l greater or my_version_f greater.\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    // Also fails on the exact same version\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    //Verify we are still unchanged\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    // update version 1\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    // update version 2\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testMultipleVersions().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testMultipleVersions().mjava","sourceNew":"  // Test multiple versions, that it has to be greater than my_version_l and my_version_f\n  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    // All variations of additional versions should fail other than my_version_l greater or my_version_f greater.\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    // Also fails on the exact same version\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    //Verify we are still unchanged\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    // update version 1\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    // update version 2\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n\n","sourceOld":"  // Test multiple versions, that it has to be greater than my_version_l and my_version_f\n  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    // All variations of additional versions should fail other than my_version_l greater or my_version_f greater.\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    // Also fails on the exact same version\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    //Verify we are still unchanged\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    // update version 1\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    // update version 2\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"667eea18b7ca87af38d05d81d479f943a717a6b1":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["667eea18b7ca87af38d05d81d479f943a717a6b1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}