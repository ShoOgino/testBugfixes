{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#checkSpanQueries(String).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#checkSpanQueries(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSpanQueries(String field) throws IOException {\n    withReader(\n        List.of(\n            Map.of(field, values(\"foo bar baz\")),\n            Map.of(field, values(\"bar foo baz\")),\n            Map.of(field, values(\"bar baz foo\")),\n            Map.of(field, values(\"bar bar bar irrelevant\"))),\n        reader -> {\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addGap(1)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"2: (%s: '>bar baz foo<')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field), fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .setSlop(1)\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field),\n                  fmt(\"1: (%s: '>bar foo< baz')\", field),\n                  fmt(\"2: (%s: '>bar baz foo<')\", field)));\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#checkSpanQueries(String).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#checkSpanQueries(String).mjava","sourceNew":"  private void checkSpanQueries(String field) throws IOException {\n    new IndexBuilder(this::toField)\n        .doc(field, \"foo bar baz\")\n        .doc(field, \"bar foo baz\")\n        .doc(field, \"bar baz foo\")\n        .doc(field, \"bar bar bar irrelevant\")\n        .build(analyzer, reader -> {\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addGap(1)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"2: (%s: '>bar baz foo<')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field), fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .setSlop(1)\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field),\n                  fmt(\"1: (%s: '>bar foo< baz')\", field),\n                  fmt(\"2: (%s: '>bar baz foo<')\", field)));\n        }\n    );\n  }\n\n","sourceOld":"  private void checkSpanQueries(String field) throws IOException {\n    withReader(\n        List.of(\n            Map.of(field, values(\"foo bar baz\")),\n            Map.of(field, values(\"bar foo baz\")),\n            Map.of(field, values(\"bar baz foo\")),\n            Map.of(field, values(\"bar bar bar irrelevant\"))),\n        reader -> {\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newOrderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .addGap(1)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .build()),\n              containsInAnyOrder(fmt(\"2: (%s: '>bar baz foo<')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field), fmt(\"1: (%s: '>bar foo< baz')\", field)));\n\n          assertThat(\n              highlights(\n                  reader,\n                  SpanNearQuery.newUnorderedNearQuery(field)\n                      .addClause(new SpanTermQuery(new Term(field, \"foo\")))\n                      .addClause(new SpanTermQuery(new Term(field, \"bar\")))\n                      .setSlop(1)\n                      .build()),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar< baz')\", field),\n                  fmt(\"1: (%s: '>bar foo< baz')\", field),\n                  fmt(\"2: (%s: '>bar baz foo<')\", field)));\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}