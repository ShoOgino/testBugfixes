{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfoPerCommit,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentInfoPerCommit newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedDeletesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedDeletesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedDeletesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedDeletesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        ensureOpen(false);\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        ensureOpen(false);\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        ensureOpen(false);\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        ensureOpen(false);\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentCommitInfo,FrozenBufferedUpdates,FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer.\n   */\n  void publishFlushedSegment(SegmentCommitInfo newSegment,\n      FrozenBufferedUpdates packet, FrozenBufferedUpdates globalPacket) throws IOException {\n    try {\n      synchronized (this) {\n        // Lock order IW -> BDS\n        ensureOpen(false);\n        synchronized (bufferedUpdatesStream) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publishFlushedSegment\");\n          }\n          \n          if (globalPacket != null && globalPacket.any()) {\n            bufferedUpdatesStream.push(globalPacket);\n          } \n          // Publishing the segment must be synched on IW -> BDS to make the sure\n          // that no merge prunes away the seg. private delete packet\n          final long nextGen;\n          if (packet != null && packet.any()) {\n            nextGen = bufferedUpdatesStream.push(packet);\n          } else {\n            // Since we don't have a delete packet to apply we can get a new\n            // generation right away\n            nextGen = bufferedUpdatesStream.getNextGen();\n          }\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + segString(newSegment));\n          }\n          newSegment.setBufferedDeletesGen(nextGen);\n          segmentInfos.add(newSegment);\n          checkpoint();\n        }\n      }\n    } finally {\n      flushCount.incrementAndGet();\n      doAfterFlush();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["55980207f1977bd1463465de1659b821347e2fa8","f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","55980207f1977bd1463465de1659b821347e2fa8"],"55980207f1977bd1463465de1659b821347e2fa8":[],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}