{"path":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized Date stringToDate(String dateString) throws ParseException {\n    if (dateString.length() == 4) {\n      return YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized Date stringToDate(String dateString) throws ParseException {\n    if (dateString.length() == 4) {\n      return YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556156c44f3392896fb44dc22a6bafbad421bcff","date":1295994419,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized Date stringToDate(String dateString) throws ParseException {\n    if (dateString.length() == 4) {\n      return YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized Date stringToDate(String dateString) throws ParseException {\n    if (dateString.length() == 4) {\n      return YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static synchronized Date stringToDate(String dateString) throws ParseException {\n    if (dateString.length() == 4) {\n      return YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f4f823cee2ff8354ee757848347b5e83e9335c","date":1307398887,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    try {\n      return TL_FORMATS.get()[dateString.length()].parse(dateString);\n    } catch (Exception e) {\n      throw new ParseException(\"Input is not a valid date string: \" + dateString, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    try {\n      return TL_FORMATS.get()[dateString.length()].parse(dateString);\n    } catch (Exception e) {\n      throw new ParseException(\"Input is not a valid date string: \" + dateString, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    try {\n      return TL_FORMATS.get()[dateString.length()].parse(dateString);\n    } catch (Exception e) {\n      throw new ParseException(\"Input is not a valid date string: \" + dateString, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    final DateFormats formats = FORMATS.get();\n    \n    if (dateString.length() == 4) {\n      return formats.YEAR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 6) {\n      return formats.MONTH_FORMAT.parse(dateString);\n    } else if (dateString.length() == 8) {\n      return formats.DAY_FORMAT.parse(dateString);\n    } else if (dateString.length() == 10) {\n      return formats.HOUR_FORMAT.parse(dateString);\n    } else if (dateString.length() == 12) {\n      return formats.MINUTE_FORMAT.parse(dateString);\n    } else if (dateString.length() == 14) {\n      return formats.SECOND_FORMAT.parse(dateString);\n    } else if (dateString.length() == 17) {\n      return formats.MILLISECOND_FORMAT.parse(dateString);\n    }\n    throw new ParseException(\"Input is not valid date string: \" + dateString, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#stringToDate(String).mjava","sourceNew":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    try {\n      return TL_FORMATS.get()[dateString.length()].parse(dateString);\n    } catch (Exception e) {\n      throw new ParseException(\"Input is not a valid date string: \" + dateString, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Converts a string produced by <code>timeToString</code> or\n   * <code>dateToString</code> back to a time, represented as a\n   * Date object.\n   * \n   * @param dateString the date string to be converted\n   * @return the parsed time as a Date object \n   * @throws ParseException if <code>dateString</code> is not in the \n   *  expected format \n   */\n  public static Date stringToDate(String dateString) throws ParseException {\n    try {\n      return TL_FORMATS.get()[dateString.length()].parse(dateString);\n    } catch (Exception e) {\n      throw new ParseException(\"Input is not a valid date string: \" + dateString, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16f4f823cee2ff8354ee757848347b5e83e9335c":["556156c44f3392896fb44dc22a6bafbad421bcff"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["556156c44f3392896fb44dc22a6bafbad421bcff","16f4f823cee2ff8354ee757848347b5e83e9335c"],"556156c44f3392896fb44dc22a6bafbad421bcff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["16f4f823cee2ff8354ee757848347b5e83e9335c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","16f4f823cee2ff8354ee757848347b5e83e9335c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"16f4f823cee2ff8354ee757848347b5e83e9335c":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"556156c44f3392896fb44dc22a6bafbad421bcff":["16f4f823cee2ff8354ee757848347b5e83e9335c","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["556156c44f3392896fb44dc22a6bafbad421bcff","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}