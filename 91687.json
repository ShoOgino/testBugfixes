{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkForCollection(String,List[Integer],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","sourceNew":"  protected void checkForCollection(String collectionName,\n      List<Integer> numShardsNumReplicaList,\n      List<String> nodesAllowedToRunShards) throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName,\n          numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n    }\n  }\n\n","sourceOld":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cfa38e36fa296bb93d77df7d5556257dffa4535"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1cfa38e36fa296bb93d77df7d5556257dffa4535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}