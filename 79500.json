{"path":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","pathOld":"/dev/null","sourceNew":"    Object objectVal(int topDocId) throws IOException {\n      // lookup segment level stuff:\n      int segIdx = ReaderUtil.subIndex(topDocId, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(segIdx);\n      int segDocId = topDocId - rcontext.docBase;\n      // unfortunately Lucene 7.0 requires forward only traversal (with no reset method).\n      //   So we need to track our last docId (per segment) and re-fetch the FunctionValues. :-(\n      FunctionValues functionValues = functionValuesPerSeg[segIdx];\n      if (functionValues == null || segDocId < functionValuesDocIdPerSeg[segIdx]) {\n        functionValues = functionValuesPerSeg[segIdx] = valueSource.getValues(fContext, rcontext);\n      }\n      functionValuesDocIdPerSeg[segIdx] = segDocId;\n\n      // get value:\n      return functionValues.objectVal(segDocId);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","pathOld":"/dev/null","sourceNew":"    Object objectVal(int topDocId) throws IOException {\n      // lookup segment level stuff:\n      int segIdx = ReaderUtil.subIndex(topDocId, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(segIdx);\n      int segDocId = topDocId - rcontext.docBase;\n      // unfortunately Lucene 7.0 requires forward only traversal (with no reset method).\n      //   So we need to track our last docId (per segment) and re-fetch the FunctionValues. :-(\n      FunctionValues functionValues = functionValuesPerSeg[segIdx];\n      if (functionValues == null || segDocId < functionValuesDocIdPerSeg[segIdx]) {\n        functionValues = functionValuesPerSeg[segIdx] = valueSource.getValues(fContext, rcontext);\n      }\n      functionValuesDocIdPerSeg[segIdx] = segDocId;\n\n      // get value:\n      return functionValues.objectVal(segDocId);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","pathOld":"/dev/null","sourceNew":"    Object objectVal(int topDocId) throws IOException {\n      // lookup segment level stuff:\n      int segIdx = ReaderUtil.subIndex(topDocId, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(segIdx);\n      int segDocId = topDocId - rcontext.docBase;\n      // unfortunately Lucene 7.0 requires forward only traversal (with no reset method).\n      //   So we need to track our last docId (per segment) and re-fetch the FunctionValues. :-(\n      FunctionValues functionValues = functionValuesPerSeg[segIdx];\n      if (functionValues == null || segDocId < functionValuesDocIdPerSeg[segIdx]) {\n        functionValues = functionValuesPerSeg[segIdx] = valueSource.getValues(fContext, rcontext);\n      }\n      functionValuesDocIdPerSeg[segIdx] = segDocId;\n\n      // get value:\n      return functionValues.objectVal(segDocId);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/tagger/TaggerRequestHandler.ValueSourceAccessor#objectVal(int).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    Object objectVal(int topDocId) throws IOException {\n      // lookup segment level stuff:\n      int segIdx = ReaderUtil.subIndex(topDocId, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(segIdx);\n      int segDocId = topDocId - rcontext.docBase;\n      // unfortunately Lucene 7.0 requires forward only traversal (with no reset method).\n      //   So we need to track our last docId (per segment) and re-fetch the FunctionValues. :-(\n      FunctionValues functionValues = functionValuesPerSeg[segIdx];\n      if (functionValues == null || segDocId < functionValuesDocIdPerSeg[segIdx]) {\n        functionValues = functionValuesPerSeg[segIdx] = valueSource.getValues(fContext, rcontext);\n      }\n      functionValuesDocIdPerSeg[segIdx] = segDocId;\n\n      // get value:\n      return functionValues.objectVal(segDocId);\n    }\n\n","sourceOld":"    Object objectVal(int topDocId) throws IOException {\n      // lookup segment level stuff:\n      int segIdx = ReaderUtil.subIndex(topDocId, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(segIdx);\n      int segDocId = topDocId - rcontext.docBase;\n      // unfortunately Lucene 7.0 requires forward only traversal (with no reset method).\n      //   So we need to track our last docId (per segment) and re-fetch the FunctionValues. :-(\n      FunctionValues functionValues = functionValuesPerSeg[segIdx];\n      if (functionValues == null || segDocId < functionValuesDocIdPerSeg[segIdx]) {\n        functionValues = functionValuesPerSeg[segIdx] = valueSource.getValues(fContext, rcontext);\n      }\n      functionValuesDocIdPerSeg[segIdx] = segDocId;\n\n      // get value:\n      return functionValues.objectVal(segDocId);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","bd25fa3647fa73152703b8dccb4fb5f43633de20","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}