{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","pathOld":"/dev/null","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n      tuples.add(t);\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52","date":1427741807,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        if(tupleStream instanceof ParallelStream) {\n          ParallelStream p = (ParallelStream) tupleStream;\n          assert(t.getMetrics() == p.getEofTuples()); // Make sure the EOF tuples are properly set on the final EOF tuple\n        }\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n      tuples.add(t);\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","pathOld":"/dev/null","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        if(tupleStream instanceof ParallelStream) {\n          ParallelStream p = (ParallelStream) tupleStream;\n          assert(t.getMetrics() == p.getEofTuples()); // Make sure the EOF tuples are properly set on the final EOF tuple\n        }\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#getTuples(TupleStream).mjava","sourceNew":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","sourceOld":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        if(tupleStream instanceof ParallelStream) {\n          ParallelStream p = (ParallelStream) tupleStream;\n          assert(t.getMetrics() == p.getEofTuples()); // Make sure the EOF tuples are properly set on the final EOF tuple\n        }\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52":["91814ce09be68efd0626969632e79ae47d8876d4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}