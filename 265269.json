{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","commits":[{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<SelectorParams>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<SelectorParams>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","sourceNew":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<SelectorParams>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","sourceOld":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<SelectorParams>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException\n            (SERVER_ERROR, \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","sourceNew":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","sourceOld":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<SelectorParams>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessorFactory#parseSelectorExclusionParams(NamedList).mjava","sourceNew":"  public static Collection<SelectorParams> parseSelectorExclusionParams(\n          @SuppressWarnings({\"rawtypes\"})NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<>();\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param must be <lst/>\");\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","sourceOld":"  public static Collection<SelectorParams> parseSelectorExclusionParams(NamedList args) {\n    Collection<SelectorParams> exclusions = new ArrayList<>();\n    List<Object> excList = args.getAll(\"exclude\");\n    for (Object excObj : excList) {\n      if (null == excObj) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param can not be null\");\n      }\n      if (! (excObj instanceof NamedList) ) {\n        throw new SolrException (SolrException.ErrorCode.SERVER_ERROR,\n            \"'exclude' init param must be <lst/>\");\n      }\n      NamedList exc = (NamedList) excObj;\n      exclusions.add(parseSelectorParams(exc));\n      if (0 < exc.size()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unexpected 'exclude' init sub-param(s): '\" +\n                args.getName(0) + \"'\");\n      }\n      // call once per instance\n      args.remove(\"exclude\");\n    }\n    return exclusions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}