{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7734ce13985aba556e3623d51c2d870ed8142847","date":1360796678,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n\n    // // //\n\n    // :TODO: SOLR-4394 promote SSL up to SolrJettyTestBase?\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        break;\n      }\n    }\n\n    assertTrue(\"test keystore does not exist, can't be used for randomized \" +\n               \"ssl testing: \" + TEST_KEYSTORE.getAbsolutePath(), \n               TEST_KEYSTORE.exists() );\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n    // // //\n\n\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n\n    // // //\n\n    // :TODO: SOLR-4394 promote SSL up to SolrJettyTestBase?\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        break;\n      }\n    }\n\n    assertTrue(\"test keystore does not exist, can't be used for randomized \" +\n               \"ssl testing: \" + TEST_KEYSTORE.getAbsolutePath(), \n               TEST_KEYSTORE.exists() );\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n    // // //\n\n\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa11c355cd3b3b9207608b85fbd33b34f6f1966e","date":1361303536,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n\n    // // //\n\n    // :TODO: SOLR-4394 promote SSL up to SolrJettyTestBase?\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        break;\n      }\n    }\n\n    assertTrue(\"test keystore does not exist, can't be used for randomized \" +\n               \"ssl testing: \" + TEST_KEYSTORE.getAbsolutePath(), \n               TEST_KEYSTORE.exists() );\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n    // // //\n\n\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome(), null, null);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(ExternalPaths.EXAMPLE_HOME, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome(), null, null);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#beforeTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createAndStartJetty(legacyExampleCollection1SolrHome());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTest() throws Exception {\n    createJetty(legacyExampleCollection1SolrHome());\n  }\n\n","bugFix":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["7734ce13985aba556e3623d51c2d870ed8142847"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e25c332f157326faecb36f76173033c1284776a5","9bc766d645fa848f86c381c7f6acf2c881c99399"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"7734ce13985aba556e3623d51c2d870ed8142847":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3b41f996b22bd5518650f897d050088ff808ec03":["c26f00b574427b55127e869b935845554afde1fa","7734ce13985aba556e3623d51c2d870ed8142847"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["e25c332f157326faecb36f76173033c1284776a5"],"e25c332f157326faecb36f76173033c1284776a5":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["e25c332f157326faecb36f76173033c1284776a5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7734ce13985aba556e3623d51c2d870ed8142847":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e","3b41f996b22bd5518650f897d050088ff808ec03"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7734ce13985aba556e3623d51c2d870ed8142847","3b41f996b22bd5518650f897d050088ff808ec03"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e25c332f157326faecb36f76173033c1284776a5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bc766d645fa848f86c381c7f6acf2c881c99399"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3b41f996b22bd5518650f897d050088ff808ec03","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}