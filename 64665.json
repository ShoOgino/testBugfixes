{"path":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","commits":[{"id":"4d4707b60e1780a8b3e3d4a8fda80126e889deb5","date":1131678790,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"/dev/null","sourceNew":"\t// create an index for testing\r\n\tprivate Directory getIndex()\r\n\tthrows IOException {\r\n\t        RAMDirectory indexStore = new RAMDirectory ();\r\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true);\r\n\t        RandomGen random = new RandomGen();\r\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\r\n\t        Document doc = new Document();\r\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\r\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            }\r\n\t            if((i%7)==0) { // some documents to match the query (see below) \r\n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\r\n\t            }\r\n\t            // every document has a defined 'mandant' field\r\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            writer.addDocument (doc);\r\n\t        }\r\n\t        writer.optimize ();\r\n\t        writer.close ();\r\n\t    return indexStore;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"\t// create an index for testing\r\n\tprivate Directory getIndex()\r\n\tthrows IOException {\r\n\t        RAMDirectory indexStore = new RAMDirectory ();\r\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n\t        RandomGen random = new RandomGen();\r\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\r\n\t        Document doc = new Document();\r\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\r\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            }\r\n\t            if((i%7)==0) { // some documents to match the query (see below) \r\n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\r\n\t            }\r\n\t            // every document has a defined 'mandant' field\r\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            writer.addDocument (doc);\r\n\t        }\r\n\t        writer.optimize ();\r\n\t        writer.close ();\r\n\t    return indexStore;\r\n\t}\r\n\n","sourceOld":"\t// create an index for testing\r\n\tprivate Directory getIndex()\r\n\tthrows IOException {\r\n\t        RAMDirectory indexStore = new RAMDirectory ();\r\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true);\r\n\t        RandomGen random = new RandomGen();\r\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\r\n\t        Document doc = new Document();\r\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\r\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            }\r\n\t            if((i%7)==0) { // some documents to match the query (see below) \r\n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\r\n\t            }\r\n\t            // every document has a defined 'mandant' field\r\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            writer.addDocument (doc);\r\n\t        }\r\n\t        writer.optimize ();\r\n\t        writer.close ();\r\n\t    return indexStore;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen();\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","sourceOld":"\t// create an index for testing\r\n\tprivate Directory getIndex()\r\n\tthrows IOException {\r\n\t        RAMDirectory indexStore = new RAMDirectory ();\r\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n\t        RandomGen random = new RandomGen();\r\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\r\n\t        Document doc = new Document();\r\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\r\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            }\r\n\t            if((i%7)==0) { // some documents to match the query (see below) \r\n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\r\n\t            }\r\n\t            // every document has a defined 'mandant' field\r\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\r\n\t            writer.addDocument (doc);\r\n\t        }\r\n\t        writer.optimize ();\r\n\t        writer.close ();\r\n\t    return indexStore;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen();\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","sourceOld":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen();\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.TOKENIZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.UN_TOKENIZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen(newRandom());\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","sourceOld":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen();\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen(newRandom());\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","sourceOld":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen(newRandom());\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"\t// create an index for testing\n\tprivate Directory getIndex()\n\tthrows IOException {\n\t        RAMDirectory indexStore = new RAMDirectory ();\n\t        IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\t        RandomGen random = new RandomGen(newRandom());\n\t        for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n\t        Document doc = new Document();\n\t            if((i%5)!=0) { // some documents must not have an entry in the first sort field\n\t                doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            }\n\t            if((i%7)==0) { // some documents to match the query (see below) \n\t                doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n\t            }\n\t            // every document has a defined 'mandant' field\n\t            doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n\t            writer.addDocument (doc);\n\t        }\n\t        writer.optimize ();\n\t        writer.close ();\n\t    return indexStore;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#getIndex().mjava","sourceNew":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","sourceOld":"  // create an index for testing\n  private Directory getIndex()\n  throws IOException {\n          RAMDirectory indexStore = new RAMDirectory ();\n          IndexWriter writer = new IndexWriter (indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          RandomGen random = new RandomGen(newRandom());\n          for (int i=0; i<INDEX_SIZE; ++i) { // don't decrease; if to low the problem doesn't show up\n          Document doc = new Document();\n              if((i%5)!=0) { // some documents must not have an entry in the first sort field\n                  doc.add (new Field(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              }\n              if((i%7)==0) { // some documents to match the query (see below) \n                  doc.add (new Field(\"content\", \"test\", Field.Store.YES, Field.Index.ANALYZED));\n              }\n              // every document has a defined 'mandant' field\n              doc.add(new Field(\"mandant\", Integer.toString(i%3), Field.Store.YES, Field.Index.NOT_ANALYZED));\n              writer.addDocument (doc);\n          }\n          writer.optimize ();\n          writer.close ();\n      return indexStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"4d4707b60e1780a8b3e3d4a8fda80126e889deb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"2123bddbd65dea198cac380540636ce43a880403":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4d4707b60e1780a8b3e3d4a8fda80126e889deb5"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4d4707b60e1780a8b3e3d4a8fda80126e889deb5":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d4707b60e1780a8b3e3d4a8fda80126e889deb5"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}