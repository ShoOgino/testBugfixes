{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map,TermFreqVector).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map,TermFreqVector).mjava","pathOld":"/dev/null","sourceNew":"\t/**\r\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\r\n\t * @param termFreqMap a Map of terms and their frequencies\r\n\t * @param vector List of terms and their frequencies for a doc/field\r\n\t */\r\n\tprivate void addTermFrequencies(Map termFreqMap, TermFreqVector vector)\r\n\t{\r\n\t\tString[] terms = vector.getTerms();\r\n\t\tint freqs[]=vector.getTermFrequencies();\r\n\t\tfor (int j = 0; j < terms.length; j++) {\r\n\t\t    String term = terms[j];\r\n\t\t\r\n\t\t\tif(isNoiseWord(term)){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t    // increment frequency\r\n\t\t    Int cnt = (Int) termFreqMap.get(term);\r\n\t\t    if (cnt == null) {\r\n\t\t    \tcnt=new Int();\r\n\t\t\t\ttermFreqMap.put(term, cnt);\r\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\r\n\t\t    }\r\n\t\t    else {\r\n\t\t        cnt.x+=freqs[j];\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map,TermFreqVector).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map,TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = (Int) termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\r\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\r\n\t * @param termFreqMap a Map of terms and their frequencies\r\n\t * @param vector List of terms and their frequencies for a doc/field\r\n\t */\r\n\tprivate void addTermFrequencies(Map termFreqMap, TermFreqVector vector)\r\n\t{\r\n\t\tString[] terms = vector.getTerms();\r\n\t\tint freqs[]=vector.getTermFrequencies();\r\n\t\tfor (int j = 0; j < terms.length; j++) {\r\n\t\t    String term = terms[j];\r\n\t\t\r\n\t\t\tif(isNoiseWord(term)){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t    // increment frequency\r\n\t\t    Int cnt = (Int) termFreqMap.get(term);\r\n\t\t    if (cnt == null) {\r\n\t\t    \tcnt=new Int();\r\n\t\t\t\ttermFreqMap.put(term, cnt);\r\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\r\n\t\t    }\r\n\t\t    else {\r\n\t\t        cnt.x+=freqs[j];\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map[String,Int],TermFreqVector).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#addTermFrequencies(Map,TermFreqVector).mjava","sourceNew":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map<String,Int> termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t * Adds terms and frequencies found in vector into the Map termFreqMap\n\t * @param termFreqMap a Map of terms and their frequencies\n\t * @param vector List of terms and their frequencies for a doc/field\n\t */\n\tprivate void addTermFrequencies(Map termFreqMap, TermFreqVector vector)\n\t{\n\t\tString[] terms = vector.getTerms();\n\t\tint freqs[]=vector.getTermFrequencies();\n\t\tfor (int j = 0; j < terms.length; j++) {\n\t\t    String term = terms[j];\n\t\t\n\t\t\tif(isNoiseWord(term)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t    // increment frequency\n\t\t    Int cnt = (Int) termFreqMap.get(term);\n\t\t    if (cnt == null) {\n\t\t    \tcnt=new Int();\n\t\t\t\ttermFreqMap.put(term, cnt);\n\t\t\t\tcnt.x=freqs[j];\t\t\t\t\n\t\t    }\n\t\t    else {\n\t\t        cnt.x+=freqs[j];\n\t\t    }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["60cdc0e643184821eb066795a8791cd82559f46e"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}