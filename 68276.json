{"path":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeValue(CSVField,String).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeValue(CSVField,String).mjava","pathOld":"/dev/null","sourceNew":"    protected String writeValue(CSVField field, String value) throws Exception {\n        if (config.isFixedWidth()) {\n            if (value.length() < field.getSize()) {\n                int fillPattern = config.getFill();\n                if (field.overrideFill()) {\n                    fillPattern = field.getFill();\n                }\n                StringBuffer sb = new StringBuffer();\n                int fillSize = (field.getSize() - value.length());\n                char[] fill = new char[fillSize];\n                Arrays.fill(fill, config.getFillChar());\n                if (fillPattern == CSVConfig.FILLLEFT) {\n                    sb.append(fill);\n                    sb.append(value);\n                    value = sb.toString();\n                } else {\n                    // defaults to fillpattern FILLRIGHT when fixedwidth is used\n                    sb.append(value);\n                    sb.append(fill);\n                    value = sb.toString();\n                }\n            } else if (value.length() > field.getSize()) {\n                // value to big..\n                value = value.substring(0, field.getSize());\n            }\n            if (!config.isValueDelimiterIgnored()) {\n                // add the value delimiter..\n                value = config.getValueDelimiter()+value+config.getValueDelimiter();\n            }\n        }\n        return value;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeValue(CSVField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeValue(CSVField,String).mjava","sourceNew":"    protected String writeValue(CSVField field, String value) throws Exception {\n        if (config.isFixedWidth()) {\n            if (value.length() < field.getSize()) {\n                int fillPattern = config.getFill();\n                if (field.overrideFill()) {\n                    fillPattern = field.getFill();\n                }\n                StringBuilder sb = new StringBuilder();\n                int fillSize = (field.getSize() - value.length());\n                char[] fill = new char[fillSize];\n                Arrays.fill(fill, config.getFillChar());\n                if (fillPattern == CSVConfig.FILLLEFT) {\n                    sb.append(fill);\n                    sb.append(value);\n                    value = sb.toString();\n                } else {\n                    // defaults to fillpattern FILLRIGHT when fixedwidth is used\n                    sb.append(value);\n                    sb.append(fill);\n                    value = sb.toString();\n                }\n            } else if (value.length() > field.getSize()) {\n                // value to big..\n                value = value.substring(0, field.getSize());\n            }\n            if (!config.isValueDelimiterIgnored()) {\n                // add the value delimiter..\n                value = config.getValueDelimiter()+value+config.getValueDelimiter();\n            }\n        }\n        return value;\n    }\n\n","sourceOld":"    protected String writeValue(CSVField field, String value) throws Exception {\n        if (config.isFixedWidth()) {\n            if (value.length() < field.getSize()) {\n                int fillPattern = config.getFill();\n                if (field.overrideFill()) {\n                    fillPattern = field.getFill();\n                }\n                StringBuffer sb = new StringBuffer();\n                int fillSize = (field.getSize() - value.length());\n                char[] fill = new char[fillSize];\n                Arrays.fill(fill, config.getFillChar());\n                if (fillPattern == CSVConfig.FILLLEFT) {\n                    sb.append(fill);\n                    sb.append(value);\n                    value = sb.toString();\n                } else {\n                    // defaults to fillpattern FILLRIGHT when fixedwidth is used\n                    sb.append(value);\n                    sb.append(fill);\n                    value = sb.toString();\n                }\n            } else if (value.length() > field.getSize()) {\n                // value to big..\n                value = value.substring(0, field.getSize());\n            }\n            if (!config.isValueDelimiterIgnored()) {\n                // add the value delimiter..\n                value = config.getValueDelimiter()+value+config.getValueDelimiter();\n            }\n        }\n        return value;\n    }\n\n","bugFix":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b","date":1553472106,"type":4,"author":"Gus Heck","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/writer/CSVWriter#writeValue(CSVField,String).mjava","sourceNew":null,"sourceOld":"    protected String writeValue(CSVField field, String value) throws Exception {\n        if (config.isFixedWidth()) {\n            if (value.length() < field.getSize()) {\n                int fillPattern = config.getFill();\n                if (field.overrideFill()) {\n                    fillPattern = field.getFill();\n                }\n                StringBuilder sb = new StringBuilder();\n                int fillSize = (field.getSize() - value.length());\n                char[] fill = new char[fillSize];\n                Arrays.fill(fill, config.getFillChar());\n                if (fillPattern == CSVConfig.FILLLEFT) {\n                    sb.append(fill);\n                    sb.append(value);\n                    value = sb.toString();\n                } else {\n                    // defaults to fillpattern FILLRIGHT when fixedwidth is used\n                    sb.append(value);\n                    sb.append(fill);\n                    value = sb.toString();\n                }\n            } else if (value.length() > field.getSize()) {\n                // value to big..\n                value = value.substring(0, field.getSize());\n            }\n            if (!config.isValueDelimiterIgnored()) {\n                // add the value delimiter..\n                value = config.getValueDelimiter()+value+config.getValueDelimiter();\n            }\n        }\n        return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b":["d06343967a29132f5d782f74e8d0988400278a02"],"d06343967a29132f5d782f74e8d0988400278a02":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63fc16c8a7bc8d24e5266ae06d44d83c6d30403b"]},"commit2Childs":{"63fc16c8a7bc8d24e5266ae06d44d83c6d30403b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d06343967a29132f5d782f74e8d0988400278a02":["63fc16c8a7bc8d24e5266ae06d44d83c6d30403b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["d06343967a29132f5d782f74e8d0988400278a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}