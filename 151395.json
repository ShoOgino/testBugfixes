{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","commits":[{"id":"a93d0c51fc69418718fea466699e1790d145ae32","date":1378756747,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = 0;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","sourceNew":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = BASE_RAM_BYTES_USED;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(positions);\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(payloads);\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               sizeInBytes += RamUsageEstimator.shallowSizeOf(payload);\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","sourceOld":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = 0;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","sourceNew":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = BASE_RAM_BYTES_USED;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(positions);\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(payloads);\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               sizeInBytes += RamUsageEstimator.shallowSizeOf(payload);\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","sourceOld":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = 0;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.HighFreqTerm#ramBytesUsed().mjava","sourceNew":"      @Override\n      public long ramBytesUsed() {\n        long sizeInBytes = BASE_RAM_BYTES_USED;\n        sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n        sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n\n        if(positions != null) {\n          sizeInBytes += RamUsageEstimator.shallowSizeOf(positions);\n          for(int[] position : positions) {\n            sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n          }\n        }\n\n        if (payloads != null) {\n          sizeInBytes += RamUsageEstimator.shallowSizeOf(payloads);\n          for(byte[][] payload : payloads) {\n            if(payload != null) {\n              sizeInBytes += RamUsageEstimator.shallowSizeOf(payload);\n              for(byte[] pload : payload) {\n                sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0;\n              }\n            }\n          }\n        }\n\n        return sizeInBytes;\n      }\n\n","sourceOld":"      @Override\n      public long ramBytesUsed() {\n         long sizeInBytes = BASE_RAM_BYTES_USED;\n         sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;\n         sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;\n         \n         if(positions != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(positions);\n           for(int[] position : positions) {\n             sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;\n           }\n         }\n         \n         if (payloads != null) {\n           sizeInBytes += RamUsageEstimator.shallowSizeOf(payloads);\n           for(byte[][] payload : payloads) {\n             if(payload != null) {\n               sizeInBytes += RamUsageEstimator.shallowSizeOf(payload);\n               for(byte[] pload : payload) {\n                 sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0; \n               }\n             }\n           }\n         }\n         \n         return sizeInBytes;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a93d0c51fc69418718fea466699e1790d145ae32","d943163030bbd7a9caf93cb5fea92257390a2a99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["a93d0c51fc69418718fea466699e1790d145ae32"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"a93d0c51fc69418718fea466699e1790d145ae32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a93d0c51fc69418718fea466699e1790d145ae32"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","51f5280f31484820499077f41fcdfe92d527d9dc"],"a93d0c51fc69418718fea466699e1790d145ae32":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}