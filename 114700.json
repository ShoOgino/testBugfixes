{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}