{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    readers[0].close();\n    readers[1].close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.closeSafely(false, dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    readers[0].close();\n    readers[1].close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.closeSafely(false, dirset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.closeSafely(false, dirset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.closeSafely(false, dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(2);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils.createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n\n    // Add a facet to the index\n    addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    addFacets(iParams, writers[1].indexWriter, writers[1].taxWriter, \"d\", \"e\");\n    // Commit Changes\n    writers[0].indexWriter.commit();\n    writers[0].taxWriter.commit();\n    writers[1].indexWriter.commit();\n    writers[1].taxWriter.commit();\n\n    // Open two readers\n    IndexTaxonomyReaderPair[] readers = FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = \n      TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = \n      TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(readers[1].indexReader,\n        readers[1].taxReader, iParams, null);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(readers[1].indexReader, readers[1].taxReader, iParams, null));\n    \n    writers[0].close();\n    writers[1].close();\n    readers[0].close();\n    readers[1].close();\n    for (Directory[] dirset : dirs) {\n      IOUtils.close(dirset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["24230fe54121f9be9d85f2c2067536296785e421","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}