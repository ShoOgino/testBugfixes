{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#FacetRangeProcessor(FacetContext,FacetRange).mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetRequest.FacetContext,FacetRange).mjava","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    if (freq.ranges != null && (freq.start != null || freq.end != null || freq.gap != null)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot set gap/start/end and ranges params together\");\n    }\n    if (freq.ranges != null) {\n      ranges = freq.ranges;\n      start = null;\n      end = null;\n      gap = null;\n    } else {\n      start = calc.getValue(freq.start.toString());\n      end = calc.getValue(freq.end.toString());\n      gap = freq.gap.toString();\n      ranges = null;\n    }\n\n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","sourceOld":"  FacetRangeProcessor(FacetRequest.FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    if (freq.ranges != null && (freq.start != null || freq.end != null || freq.gap != null)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot set gap/start/end and ranges params together\");\n    }\n    if (freq.ranges != null) {\n      ranges = freq.ranges;\n      start = null;\n      end = null;\n      gap = null;\n    } else {\n      start = calc.getValue(freq.start.toString());\n      end = calc.getValue(freq.end.toString());\n      gap = freq.gap.toString();\n      ranges = null;\n    }\n\n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}