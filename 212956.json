{"path":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"/dev/null","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[0].doc);\n    assertTrue(vector != null);\n    assertTrue(vector.length == 1);\n    TermPositionVector tfv = (TermPositionVector) vector[0];\n    assertTrue(tfv.getField().equals(\"field\"));\n    String[] terms = tfv.getTerms();\n    assertEquals(1, terms.length);\n    assertEquals(terms[0], \"one\");\n    assertEquals(5, tfv.getTermFrequencies()[0]);\n\n    int[] positions = tfv.getTermPositions(0);\n    assertEquals(5, positions.length);\n    for(int i=0;i<5;i++)\n      assertEquals(i, positions[i]);\n    TermVectorOffsetInfo[] offsets = tfv.getOffsets(0);\n    assertEquals(5, offsets.length);\n    for(int i=0;i<5;i++) {\n      assertEquals(4*i, offsets[i].getStartOffset());\n      assertEquals(4*i+3, offsets[i].getEndOffset());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermVectors#testMixedVectrosVectors().mjava","sourceNew":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[0].doc);\n    assertTrue(vector != null);\n    assertTrue(vector.length == 1);\n    TermPositionVector tfv = (TermPositionVector) vector[0];\n    assertTrue(tfv.getField().equals(\"field\"));\n    String[] terms = tfv.getTerms();\n    assertEquals(1, terms.length);\n    assertEquals(terms[0], \"one\");\n    assertEquals(5, tfv.getTermFrequencies()[0]);\n\n    int[] positions = tfv.getTermPositions(0);\n    assertEquals(5, positions.length);\n    for(int i=0;i<5;i++)\n      assertEquals(i, positions[i]);\n    TermVectorOffsetInfo[] offsets = tfv.getOffsets(0);\n    assertEquals(5, offsets.length);\n    for(int i=0;i<5;i++) {\n      assertEquals(4*i, offsets[i].getStartOffset());\n      assertEquals(4*i+3, offsets[i].getEndOffset());\n    }\n  }\n\n","sourceOld":"  // In a single doc, for the same field, mix the term\n  // vectors up\n  public void testMixedVectrosVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n    doc.add(new Field(\"field\", \"one\",\n                      Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"one\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[0].doc);\n    assertTrue(vector != null);\n    assertTrue(vector.length == 1);\n    TermPositionVector tfv = (TermPositionVector) vector[0];\n    assertTrue(tfv.getField().equals(\"field\"));\n    String[] terms = tfv.getTerms();\n    assertEquals(1, terms.length);\n    assertEquals(terms[0], \"one\");\n    assertEquals(5, tfv.getTermFrequencies()[0]);\n\n    int[] positions = tfv.getTermPositions(0);\n    assertEquals(5, positions.length);\n    for(int i=0;i<5;i++)\n      assertEquals(i, positions[i]);\n    TermVectorOffsetInfo[] offsets = tfv.getOffsets(0);\n    assertEquals(5, offsets.length);\n    for(int i=0;i<5;i++) {\n      assertEquals(4*i, offsets[i].getStartOffset());\n      assertEquals(4*i+3, offsets[i].getEndOffset());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}