{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","date":1461918927,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1a695f388982478ffef9ad161e6036ef2cd2be9","date":1469712434,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n        lastDocID = docID;\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n      assert --docBudget >= 0 : \"called add() more times than the last call to grow() reserved\";\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"8e8d5955830d712186a4beb716e797d505af7981":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","3d3eccadf4f2a01d2034c96afe1a5c617b2e85af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a1a695f388982478ffef9ad161e6036ef2cd2be9"],"a1a695f388982478ffef9ad161e6036ef2cd2be9":["8e8d5955830d712186a4beb716e797d505af7981"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["8e8d5955830d712186a4beb716e797d505af7981","a1a695f388982478ffef9ad161e6036ef2cd2be9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","8e8d5955830d712186a4beb716e797d505af7981","55b50463286869f584cf849d1587a0fcd54d1dfa"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["a1a695f388982478ffef9ad161e6036ef2cd2be9","3b013574eedcdbac35dc7e35b0ee616ffc38895d","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1a695f388982478ffef9ad161e6036ef2cd2be9":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}