{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDeleteFromIndexWriter().mjava","sourceNew":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Deletes using IW.deleteDocuments\n   * \n   * @throws Exception\n   */\n  public void testDeleteFromIndexWriter() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n\n    // deleted IW docs should not show up in the next getReader\n    writer.deleteDocuments(new Term(\"id\", id10));\n    IndexReader r2 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id10), r1));\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    \n    String id50 = r1.document(50).getField(\"id\").stringValue();\n    assertEquals(1, count(new Term(\"id\", id50), r1));\n    \n    writer.deleteDocuments(new Term(\"id\", id50));\n    \n    IndexReader r3 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(0, count(new Term(\"id\", id50), r3));\n    \n    String id75 = r1.document(75).getField(\"id\").stringValue();\n    writer.deleteDocuments(new TermQuery(new Term(\"id\", id75)));\n    IndexReader r4 = writer.getReader();\n    assertEquals(1, count(new Term(\"id\", id75), r3));\n    assertEquals(0, count(new Term(\"id\", id75), r4));\n    \n    r1.close();\n    r2.close();\n    r3.close();\n    r4.close();\n    writer.close();\n        \n    // reopen the writer to verify the delete made it to the directory\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    IndexReader w2r1 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), w2r1));\n    w2r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}