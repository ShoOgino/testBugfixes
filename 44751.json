{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setEmpty().append(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.toString();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setTermBuffer(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setEmpty().append(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.toString();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws java.io.IOException {\n      if (multiToken > 0) {\n        termAtt.setEmpty().append(\"multi\" + (multiToken + 1));\n        offsetAtt.setOffset(prevStartOffset, prevEndOffset);\n        typeAtt.setType(prevType);\n        posIncrAtt.setPositionIncrement(0);\n        multiToken--;\n        return true;\n      } else {\n        boolean next = input.incrementToken();\n        if (next == false) {\n          return false;\n        }\n        prevType = typeAtt.type();\n        prevStartOffset = offsetAtt.startOffset();\n        prevEndOffset = offsetAtt.endOffset();\n        String text = termAtt.toString();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return true;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return true;\n        } else {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}