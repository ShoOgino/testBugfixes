{"path":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","commits":[{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(OutputStream).mjava","sourceNew":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.buffers.elementAt(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","sourceOld":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(OutputStream out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.buffers.elementAt(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","sourceNew":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.buffers.get(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","sourceOld":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.buffers.elementAt(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","bugFix":null,"bugIntro":["db540c50a68e844566353b8808cc4b7106eb13d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db540c50a68e844566353b8808cc4b7106eb13d6","date":1196182881,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","sourceNew":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.getBuffer(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","sourceOld":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.buffers.get(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","bugFix":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","sourceNew":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes(file.getBuffer(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","sourceOld":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes((byte[])file.getBuffer(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#writeTo(IndexOutput).mjava","sourceNew":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes(file.getBuffer(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","sourceOld":"  /** Copy the current contents of this buffer to the named output. */\n  public void writeTo(IndexOutput out) throws IOException {\n    flush();\n    final long end = file.length;\n    long pos = 0;\n    int buffer = 0;\n    while (pos < end) {\n      int length = BUFFER_SIZE;\n      long nextPos = pos + length;\n      if (nextPos > end) {                        // at the last buffer\n        length = (int)(end - pos);\n      }\n      out.writeBytes(file.getBuffer(buffer++), length);\n      pos = nextPos;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dda77265180d41bf85c84c995e25eda7b8e1b74d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db540c50a68e844566353b8808cc4b7106eb13d6":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["db540c50a68e844566353b8808cc4b7106eb13d6"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"]},"commit2Childs":{"dda77265180d41bf85c84c995e25eda7b8e1b74d":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"db540c50a68e844566353b8808cc4b7106eb13d6":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["db540c50a68e844566353b8808cc4b7106eb13d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}