{"path":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(State,RollingBuffer[Position],int).mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(State,RollingBuffer[Position],int).mjava","pathOld":"/dev/null","sourceNew":"  private static void addHoles(State startState, RollingBuffer<Position> positions, int pos) {\n    Position posData = positions.get(pos);\n    Position prevPosData = positions.get(pos-1);\n\n    while(posData.arriving == null || prevPosData.leaving == null) {\n      if (posData.arriving == null) {\n        posData.arriving = new State();\n        posData.arriving.addTransition(new Transition(POS_SEP, posData.leaving));\n      }\n      if (prevPosData.leaving == null) {\n        if (pos == 1) {\n          prevPosData.leaving = startState;\n        } else {\n          prevPosData.leaving = new State();\n        }\n        if (prevPosData.arriving != null) {\n          prevPosData.arriving.addTransition(new Transition(POS_SEP, prevPosData.leaving));\n        }\n      }\n      prevPosData.leaving.addTransition(new Transition(HOLE, posData.arriving));\n      pos--;\n      if (pos <= 0) {\n        break;\n      }\n      posData = prevPosData;\n      prevPosData = positions.get(pos-1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(LightAutomaton.Builder,RollingBuffer[Position],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(State,RollingBuffer[Position],int).mjava","sourceNew":"  private static void addHoles(LightAutomaton.Builder builder, RollingBuffer<Position> positions, int pos) {\n    Position posData = positions.get(pos);\n    Position prevPosData = positions.get(pos-1);\n\n    while(posData.arriving == -1 || prevPosData.leaving == -1) {\n      if (posData.arriving == -1) {\n        posData.arriving = builder.createState();\n        builder.addTransition(posData.arriving, posData.leaving, POS_SEP);\n      }\n      if (prevPosData.leaving == -1) {\n        if (pos == 1) {\n          prevPosData.leaving = 0;\n        } else {\n          prevPosData.leaving = builder.createState();\n        }\n        if (prevPosData.arriving != -1) {\n          builder.addTransition(prevPosData.arriving, prevPosData.leaving, POS_SEP);\n        }\n      }\n      builder.addTransition(prevPosData.leaving, posData.arriving, HOLE);\n      pos--;\n      if (pos <= 0) {\n        break;\n      }\n      posData = prevPosData;\n      prevPosData = positions.get(pos-1);\n    }\n  }\n\n","sourceOld":"  private static void addHoles(State startState, RollingBuffer<Position> positions, int pos) {\n    Position posData = positions.get(pos);\n    Position prevPosData = positions.get(pos-1);\n\n    while(posData.arriving == null || prevPosData.leaving == null) {\n      if (posData.arriving == null) {\n        posData.arriving = new State();\n        posData.arriving.addTransition(new Transition(POS_SEP, posData.leaving));\n      }\n      if (prevPosData.leaving == null) {\n        if (pos == 1) {\n          prevPosData.leaving = startState;\n        } else {\n          prevPosData.leaving = new State();\n        }\n        if (prevPosData.arriving != null) {\n          prevPosData.arriving.addTransition(new Transition(POS_SEP, prevPosData.leaving));\n        }\n      }\n      prevPosData.leaving.addTransition(new Transition(HOLE, posData.arriving));\n      pos--;\n      if (pos <= 0) {\n        break;\n      }\n      posData = prevPosData;\n      prevPosData = positions.get(pos-1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(Automaton.Builder,RollingBuffer[Position],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/TokenStreamToAutomaton#addHoles(State,RollingBuffer[Position],int).mjava","sourceNew":"  private static void addHoles(Automaton.Builder builder, RollingBuffer<Position> positions, int pos) {\n    Position posData = positions.get(pos);\n    Position prevPosData = positions.get(pos-1);\n\n    while(posData.arriving == -1 || prevPosData.leaving == -1) {\n      if (posData.arriving == -1) {\n        posData.arriving = builder.createState();\n        builder.addTransition(posData.arriving, posData.leaving, POS_SEP);\n      }\n      if (prevPosData.leaving == -1) {\n        if (pos == 1) {\n          prevPosData.leaving = 0;\n        } else {\n          prevPosData.leaving = builder.createState();\n        }\n        if (prevPosData.arriving != -1) {\n          builder.addTransition(prevPosData.arriving, prevPosData.leaving, POS_SEP);\n        }\n      }\n      builder.addTransition(prevPosData.leaving, posData.arriving, HOLE);\n      pos--;\n      if (pos <= 0) {\n        break;\n      }\n      posData = prevPosData;\n      prevPosData = positions.get(pos-1);\n    }\n  }\n\n","sourceOld":"  private static void addHoles(State startState, RollingBuffer<Position> positions, int pos) {\n    Position posData = positions.get(pos);\n    Position prevPosData = positions.get(pos-1);\n\n    while(posData.arriving == null || prevPosData.leaving == null) {\n      if (posData.arriving == null) {\n        posData.arriving = new State();\n        posData.arriving.addTransition(new Transition(POS_SEP, posData.leaving));\n      }\n      if (prevPosData.leaving == null) {\n        if (pos == 1) {\n          prevPosData.leaving = startState;\n        } else {\n          prevPosData.leaving = new State();\n        }\n        if (prevPosData.arriving != null) {\n          prevPosData.arriving.addTransition(new Transition(POS_SEP, prevPosData.leaving));\n        }\n      }\n      prevPosData.leaving.addTransition(new Transition(HOLE, posData.arriving));\n      pos--;\n      if (pos <= 0) {\n        break;\n      }\n      posData = prevPosData;\n      prevPosData = positions.get(pos-1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["6ce825e9276493231308229152c48f755ce1a0a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["6ce825e9276493231308229152c48f755ce1a0a5","75ac8571c2d82c574e446c3729251b994c69a55c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["75ac8571c2d82c574e446c3729251b994c69a55c","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}