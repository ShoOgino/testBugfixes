{"path":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","commits":[{"id":"9792120b189197625a243c2b501e802851a69c79","date":1136239207,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","pathOld":"/dev/null","sourceNew":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      hq.insert(new FieldDoc(doc, score));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5241670df94f0524d3e8e9764331dea13b545564","date":1197914713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","sourceNew":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc, score);\n      else {\n        // Whereas TopDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","sourceOld":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      hq.insert(new FieldDoc(doc, score));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","sourceNew":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc + docBase, score);\n      else {\n        // Whereas TopScoreDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc + docBase;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","sourceOld":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc, score);\n      else {\n        // Whereas TopDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","pathOld":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","sourceNew":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc, score);\n      else {\n        // Whereas TopScoreDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","sourceOld":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc + docBase, score);\n      else {\n        // Whereas TopScoreDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc + docBase;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TopFieldDocCollector#collect(int,float).mjava","sourceNew":null,"sourceOld":"  // javadoc inherited\n  public void collect(int doc, float score) {\n    if (score > 0.0f) {\n      totalHits++;\n      if (reusableFD == null)\n        reusableFD = new FieldDoc(doc, score);\n      else {\n        // Whereas TopScoreDocCollector can skip this if the\n        // score is not competitive, we cannot because the\n        // comparators in the FieldSortedHitQueue.lessThan\n        // aren't in general congruent with \"higher score\n        // wins\"\n        reusableFD.score = score;\n        reusableFD.doc = doc;\n      }\n      reusableFD = (FieldDoc) hq.insertWithOverflow(reusableFD);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"9792120b189197625a243c2b501e802851a69c79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["5241670df94f0524d3e8e9764331dea13b545564"],"5241670df94f0524d3e8e9764331dea13b545564":["9792120b189197625a243c2b501e802851a69c79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"9792120b189197625a243c2b501e802851a69c79":["5241670df94f0524d3e8e9764331dea13b545564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9792120b189197625a243c2b501e802851a69c79"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"5241670df94f0524d3e8e9764331dea13b545564":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}