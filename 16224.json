{"path":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock(boolean).mjava","commits":[{"id":"0c19c518b507af5ddfff924b46930af2d7312040","date":1204288967,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock().mjava","sourceNew":"  /* Allocate another byte[] from the shared pool */\n  synchronized byte[] getByteBlock(boolean trackAllocations) {\n    final int size = freeByteBlocks.size();\n    final byte[] b;\n    if (0 == size) {\n      numBytesAlloc += BYTE_BLOCK_SIZE;\n      balanceRAM();\n      b = new byte[BYTE_BLOCK_SIZE];\n    } else\n      b = (byte[]) freeByteBlocks.remove(size-1);\n    if (trackAllocations)\n      numBytesUsed += BYTE_BLOCK_SIZE;\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another byte[] from the shared pool */\n  synchronized byte[] getByteBlock() {\n    final int size = freeByteBlocks.size();\n    final byte[] b;\n    if (0 == size) {\n      numBytesAlloc += BYTE_BLOCK_SIZE;\n      balanceRAM();\n      b = new byte[BYTE_BLOCK_SIZE];\n    } else\n      b = (byte[]) freeByteBlocks.remove(size-1);\n    numBytesUsed += BYTE_BLOCK_SIZE;\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock(boolean).mjava","sourceNew":"  /* Allocate another byte[] from the shared pool */\n  synchronized byte[] getByteBlock(boolean trackAllocations) {\n    final int size = freeByteBlocks.size();\n    final byte[] b;\n    if (0 == size) {\n      numBytesAlloc += BYTE_BLOCK_SIZE;\n      balanceRAM();\n      b = new byte[BYTE_BLOCK_SIZE];\n    } else\n      b = (byte[]) freeByteBlocks.remove(size-1);\n    if (trackAllocations)\n      numBytesUsed += BYTE_BLOCK_SIZE;\n    assert numBytesUsed <= numBytesAlloc;\n    return b;\n  }\n\n","sourceOld":"  /* Allocate another byte[] from the shared pool */\n  synchronized byte[] getByteBlock(boolean trackAllocations) {\n    final int size = freeByteBlocks.size();\n    final byte[] b;\n    if (0 == size) {\n      numBytesAlloc += BYTE_BLOCK_SIZE;\n      balanceRAM();\n      b = new byte[BYTE_BLOCK_SIZE];\n    } else\n      b = (byte[]) freeByteBlocks.remove(size-1);\n    if (trackAllocations)\n      numBytesUsed += BYTE_BLOCK_SIZE;\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8f450af7a7b034413833ed2a9508f99264ea49a","date":1211042958,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getByteBlock(boolean).mjava","sourceNew":null,"sourceOld":"  /* Allocate another byte[] from the shared pool */\n  synchronized byte[] getByteBlock(boolean trackAllocations) {\n    final int size = freeByteBlocks.size();\n    final byte[] b;\n    if (0 == size) {\n      numBytesAlloc += BYTE_BLOCK_SIZE;\n      balanceRAM();\n      b = new byte[BYTE_BLOCK_SIZE];\n    } else\n      b = (byte[]) freeByteBlocks.remove(size-1);\n    if (trackAllocations)\n      numBytesUsed += BYTE_BLOCK_SIZE;\n    assert numBytesUsed <= numBytesAlloc;\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8f450af7a7b034413833ed2a9508f99264ea49a":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["0c19c518b507af5ddfff924b46930af2d7312040"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"0c19c518b507af5ddfff924b46930af2d7312040":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e8f450af7a7b034413833ed2a9508f99264ea49a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c19c518b507af5ddfff924b46930af2d7312040"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e8f450af7a7b034413833ed2a9508f99264ea49a"],"0c19c518b507af5ddfff924b46930af2d7312040":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}