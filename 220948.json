{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","commits":[{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#attributes2LevelHetero().mjava","sourceNew":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","sourceOld":"  @Test\n  public void attributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    Assert.assertEquals(1, a.size());\n    Assert.assertEquals(1, x.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#attributes2LevelHetero().mjava","sourceNew":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","sourceOld":"  @Test\n  public void attributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    Assert.assertEquals(1, a.size());\n    Assert.assertEquals(1, x.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","sourceNew":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","sourceOld":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#testAttributes2LevelHetero().mjava","sourceNew":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","sourceOld":"  @Test\n  public void testAttributes2LevelHetero() {\n    String xml=\"<root>\\n\"\n             + \"<a>\\n   <b a=\\\"x0\\\" b=\\\"y0\\\" />\\n\"\n             + \"        <b a=\\\"x1\\\" b=\\\"y1\\\" />\\n\"\n             + \"        <b a=\\\"x2\\\" b=\\\"y2\\\" />\\n\"\n             + \"        </a>\"\n             + \"<x>\\n   <b a=\\\"x4\\\" b=\\\"y4\\\" />\\n\"\n             + \"        <b a=\\\"x5\\\" b=\\\"y5\\\" />\\n\"\n             + \"        <b a=\\\"x6\\\" b=\\\"y6\\\" />\\n\"\n             + \"        </x>\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/a | /root/x\");\n    rr.addField(\"a\", \"/root/a/b/@a\", false);\n    rr.addField(\"b\", \"/root/a/b/@b\", false);\n    rr.addField(\"a\", \"/root/x/b/@a\", false);\n    rr.addField(\"b\", \"/root/x/b/@b\", false);\n\n    final List<Map<String, Object>> a = new ArrayList<Map<String, Object>>();\n    final List<Map<String, Object>> x = new ArrayList<Map<String, Object>>();\n    rr.streamRecords(new StringReader(xml), new XPathRecordReader.Handler() {\n      public void handle(Map<String, Object> record, String xpath) {\n        if (record == null) return;\n        if (xpath.equals(\"/root/a\")) a.add(record);\n        if (xpath.equals(\"/root/x\")) x.add(record);\n      }\n    });\n\n    assertEquals(1, a.size());\n    assertEquals(1, x.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"c26f00b574427b55127e869b935845554afde1fa":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}