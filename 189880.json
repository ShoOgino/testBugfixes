{"path":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e454a2545d2cb65a99044886565f39373be24796","date":1291079172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(new SpanQuery[]\n      { qA1, new FieldMaskingSpanQuery(qA2, \"gender\")});\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = q.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e03f44b45336edd453b051c625896b1efd1036","date":1327499968,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarityProvider().get(\"id\") instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans2().mjava","sourceNew":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans2() throws Exception {\n    assumeTrue(\"Broken scoring: LUCENE-3723\", \n        searcher.getSimilarity() instanceof TFIDFSimilarity);\n    SpanQuery qA1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery qA2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery qA  = new SpanOrQuery(qA1, new FieldMaskingSpanQuery(qA2, \"gender\"));\n    SpanQuery qB  = new SpanTermQuery(new Term(\"last\",   \"jones\"));\n    SpanQuery q   = new SpanNearQuery(new SpanQuery[]\n      { new FieldMaskingSpanQuery(qA, \"id\"),\n        new FieldMaskingSpanQuery(qB, \"id\") }, -1, false );\n    check(q, new int[] { 0, 1, 2, 3 });\n  \n    Spans span = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), q);\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"e454a2545d2cb65a99044886565f39373be24796":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c8323d210478d76a02372693d254b69aac614689","97e03f44b45336edd453b051c625896b1efd1036"],"97e03f44b45336edd453b051c625896b1efd1036":["c8323d210478d76a02372693d254b69aac614689"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["97e03f44b45336edd453b051c625896b1efd1036"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c8323d210478d76a02372693d254b69aac614689","97e03f44b45336edd453b051c625896b1efd1036"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["e454a2545d2cb65a99044886565f39373be24796"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","97e03f44b45336edd453b051c625896b1efd1036","bb9b72f7c3d7827c64dd4ec580ded81778da361d","0d22ac6a4146774c1bc8400160fc0b6150294e92","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e454a2545d2cb65a99044886565f39373be24796":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"97e03f44b45336edd453b051c625896b1efd1036":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e454a2545d2cb65a99044886565f39373be24796","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","bb9b72f7c3d7827c64dd4ec580ded81778da361d","0d22ac6a4146774c1bc8400160fc0b6150294e92","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}