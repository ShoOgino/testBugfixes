{"path":"src/java/org/apache/lucene/index/DocumentsWriter.BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","commits":[{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"/dev/null","sourceNew":"    // Remaps all buffered deletes based on a completed\n    // merge\n    synchronized void remap(MergeDocIDRemapper mapper,\n                            SegmentInfos infos,\n                            int[][] docMaps,\n                            int[] delCounts,\n                            MergePolicy.OneMerge merge,\n                            int mergeDocCount) {\n\n      final HashMap newDeleteTerms;\n\n      // Remap delete-by-term\n      if (terms.size() > 0) {\n        newDeleteTerms = new HashMap();\n        Iterator iter = terms.entrySet().iterator();\n        while(iter.hasNext()) {\n          Entry entry = (Entry) iter.next();\n          Num num = (Num) entry.getValue();\n          newDeleteTerms.put(entry.getKey(),\n                             new Num(mapper.remap(num.getNum())));\n        }\n      } else\n        newDeleteTerms = null;\n\n      // Remap delete-by-docID\n      final List newDeleteDocIDs;\n\n      if (docIDs.size() > 0) {\n        newDeleteDocIDs = new ArrayList(docIDs.size());\n        Iterator iter = docIDs.iterator();\n        while(iter.hasNext()) {\n          Integer num = (Integer) iter.next();\n          newDeleteDocIDs.add(new Integer(mapper.remap(num.intValue())));\n        }\n      } else\n        newDeleteDocIDs = null;\n\n      // Remap delete-by-query\n      final HashMap newDeleteQueries;\n    \n      if (queries.size() > 0) {\n        newDeleteQueries = new HashMap(queries.size());\n        Iterator iter = queries.entrySet().iterator();\n        while(iter.hasNext()) {\n          Entry entry = (Entry) iter.next();\n          Integer num = (Integer) entry.getValue();\n          newDeleteQueries.put(entry.getKey(),\n                               new Integer(mapper.remap(num.intValue())));\n        }\n      } else\n        newDeleteQueries = null;\n\n      if (newDeleteTerms != null)\n        terms = newDeleteTerms;\n      if (newDeleteDocIDs != null)\n        docIDs = newDeleteDocIDs;\n      if (newDeleteQueries != null)\n        queries = newDeleteQueries;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":null,"sourceOld":"    // Remaps all buffered deletes based on a completed\n    // merge\n    synchronized void remap(MergeDocIDRemapper mapper,\n                            SegmentInfos infos,\n                            int[][] docMaps,\n                            int[] delCounts,\n                            MergePolicy.OneMerge merge,\n                            int mergeDocCount) {\n\n      final HashMap newDeleteTerms;\n\n      // Remap delete-by-term\n      if (terms.size() > 0) {\n        newDeleteTerms = new HashMap();\n        Iterator iter = terms.entrySet().iterator();\n        while(iter.hasNext()) {\n          Entry entry = (Entry) iter.next();\n          Num num = (Num) entry.getValue();\n          newDeleteTerms.put(entry.getKey(),\n                             new Num(mapper.remap(num.getNum())));\n        }\n      } else\n        newDeleteTerms = null;\n\n      // Remap delete-by-docID\n      final List newDeleteDocIDs;\n\n      if (docIDs.size() > 0) {\n        newDeleteDocIDs = new ArrayList(docIDs.size());\n        Iterator iter = docIDs.iterator();\n        while(iter.hasNext()) {\n          Integer num = (Integer) iter.next();\n          newDeleteDocIDs.add(new Integer(mapper.remap(num.intValue())));\n        }\n      } else\n        newDeleteDocIDs = null;\n\n      // Remap delete-by-query\n      final HashMap newDeleteQueries;\n    \n      if (queries.size() > 0) {\n        newDeleteQueries = new HashMap(queries.size());\n        Iterator iter = queries.entrySet().iterator();\n        while(iter.hasNext()) {\n          Entry entry = (Entry) iter.next();\n          Integer num = (Integer) entry.getValue();\n          newDeleteQueries.put(entry.getKey(),\n                               new Integer(mapper.remap(num.intValue())));\n        }\n      } else\n        newDeleteQueries = null;\n\n      if (newDeleteTerms != null)\n        terms = newDeleteTerms;\n      if (newDeleteDocIDs != null)\n        docIDs = newDeleteDocIDs;\n      if (newDeleteQueries != null)\n        queries = newDeleteQueries;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a0af3a442be522899177e5e11384a45a6784a3f":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}