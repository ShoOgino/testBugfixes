{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void checkClusterConfiguration() {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03ed29fadbe8510105056c5c6b3c70051d6b4998","date":1528278522,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","sourceNew":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getTimeSource().sleep(5000);\n    cluster.simResetOpCounts();\n  }\n\n","sourceOld":"  @Before\n  public void checkClusterConfiguration() {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","sourceNew":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getTimeSource().sleep(5000);\n    cluster.simResetOpCounts();\n  }\n\n","sourceOld":"  @Before\n  public void checkClusterConfiguration() {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","sourceNew":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getTimeSource().sleep(5000);\n    cluster.simResetOpCounts();\n  }\n\n","sourceOld":"  @Before\n  public void checkClusterConfiguration() {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","sourceNew":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getTimeSource().sleep(10000);\n    cluster.simResetOpCounts();\n  }\n\n","sourceOld":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getTimeSource().sleep(5000);\n    cluster.simResetOpCounts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#checkClusterConfiguration().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void checkClusterConfiguration() throws Exception {\n    if (cluster == null)\n      throw new RuntimeException(\"SimCloudManager not configured - have you called configureCluster()?\");\n    // clear any persisted configuration\n    cluster.getDistribStateManager().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), -1);\n    cluster.getDistribStateManager().setData(ZkStateReader.ROLES, Utils.toJSON(new HashMap<>()), -1);\n    cluster.getSimNodeStateProvider().simRemoveDeadNodes();\n    cluster.getSimClusterStateProvider().simRemoveDeadNodes();\n    // restore the expected number of nodes\n    int currentSize = cluster.getLiveNodesSet().size();\n    if (currentSize < clusterNodeCount) {\n      int addCnt = clusterNodeCount - currentSize;\n      while (addCnt-- > 0) {\n        cluster.simAddNode();\n      }\n    } else if (currentSize > clusterNodeCount) {\n      cluster.simRemoveRandomNodes(currentSize - clusterNodeCount, true, random());\n    }\n    // clean any persisted trigger state or events\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    removeChildren(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    cluster.getSimClusterStateProvider().simResetLeaderThrottles();\n    cluster.simRestartOverseer(null);\n    cluster.getSimClusterStateProvider().simDeleteAllCollections();\n    cluster.simClearSystemCollection();\n    cluster.getTimeSource().sleep(10000);\n    cluster.simResetOpCounts();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8254aa20264eb7a88d556bbe0346667937ed9c2a":["03ed29fadbe8510105056c5c6b3c70051d6b4998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","03ed29fadbe8510105056c5c6b3c70051d6b4998"],"03ed29fadbe8510105056c5c6b3c70051d6b4998":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["967a6347853ee35b432c965743a902d42f24e697"],"967a6347853ee35b432c965743a902d42f24e697":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","03ed29fadbe8510105056c5c6b3c70051d6b4998"]},"commit2Childs":{"8254aa20264eb7a88d556bbe0346667937ed9c2a":["967a6347853ee35b432c965743a902d42f24e697"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"03ed29fadbe8510105056c5c6b3c70051d6b4998":["8254aa20264eb7a88d556bbe0346667937ed9c2a","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b70042a8a492f7054d480ccdd2be9796510d4327","03ed29fadbe8510105056c5c6b3c70051d6b4998","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"967a6347853ee35b432c965743a902d42f24e697":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}