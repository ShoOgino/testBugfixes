{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} object.\n   */\n  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)\n    throws SyntaxError\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = newBooleanQuery(disableCoord);\n    for(final BooleanClause clause: clauses) {\n      query.add(clause);\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} object.\n   */\n  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)\n    throws SyntaxError\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = newBooleanQuery(disableCoord);\n    for(final BooleanClause clause: clauses) {\n      query.add(clause);\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","sourceNew":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} object.\n   */\n  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)\n    throws SyntaxError\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery.Builder query = newBooleanQuery(disableCoord);\n    for(final BooleanClause clause: clauses) {\n      query.add(clause);\n    }\n    return query.build();\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} object.\n   */\n  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)\n    throws SyntaxError\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery query = newBooleanQuery(disableCoord);\n    for(final BooleanClause clause: clauses) {\n      query.add(clause);\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getBooleanQuery(List[BooleanClause],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method for generating query, given a set of clauses.\n   * By default creates a boolean query composed of clauses passed in.\n   *\n   * Can be overridden by extending classes, to modify query being\n   * returned.\n   *\n   * @param clauses List that contains {@link org.apache.lucene.search.BooleanClause} instances\n   *    to join.\n   * @param disableCoord true if coord scoring should be disabled.\n   *\n   * @return Resulting {@link org.apache.lucene.search.Query} object.\n   */\n  protected Query getBooleanQuery(List<BooleanClause> clauses, boolean disableCoord)\n    throws SyntaxError\n  {\n    if (clauses.size()==0) {\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery.Builder query = newBooleanQuery(disableCoord);\n    for(final BooleanClause clause: clauses) {\n      query.add(clause);\n    }\n    return query.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81d0720146de53dd3a4a023d2a3d1089d86d748d"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"3cdb67100dc016748799a77218aa409478372d79":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}