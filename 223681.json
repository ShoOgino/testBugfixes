{"path":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection,int,int).mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, similarity.scorePayload(doc, fieldName,\n                spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but can be overridden to do other things.\n     *\n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     *\n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end, payloadsSeen, payloadScore,\n                similarity.scorePayload(doc, fieldName, spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection[byte[]],int,int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection,int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection<byte[]> payLoads, int start, int end) {\n      for (final byte[] thePayload : payLoads) {\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, similarity.scorePayload(doc, fieldName,\n                spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, similarity.scorePayload(doc, fieldName,\n                spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}