{"path":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"standard\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b271c46c3637c193cc37983fc38592b1b99d5f1c","date":1502322303,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (rarely()) {\n      params.set(\"q\", \"*:*\");\n    } else {\n      // the query should match some documents in most cases\n      String[] qRange = getRandomRange(cardinality, \"id\");\n      params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    }\n    params.set(\"facet\", \"true\");\n    String field = pickRandom(fields); //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      String[] interval = getRandomRange(cardinality, field);\n      String open = pickRandom(startOptions);\n      String close = pickRandom(endOptions);\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), getCountDistinctIntervals(facetIntervals));\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + field + \": \" + facetIntervals.getName(i) + \"\\nResponse: \" + rsp.getValues().get(\"facet_counts\"), \n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString(),\n            facetIntervals.getVal(i).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (rarely()) {\n      params.set(\"q\", \"*:*\");\n    } else {\n      // the query should match some documents in most cases\n      String[] qRange = getRandomRange(cardinality, \"id\");\n      params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    }\n    params.set(\"facet\", \"true\");\n    String field = pickRandom(fields); //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      String[] interval = getRandomRange(cardinality, field);\n      String open = pickRandom(startOptions);\n      String close = pickRandom(endOptions);\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), getCountDistinctIntervals(facetIntervals));\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + field + \": \" + facetIntervals.getName(i) + \"\\nResponse: \" + rsp.getValues().get(\"facet_counts\"), \n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString(),\n            facetIntervals.getVal(i).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (rarely()) {\n      params.set(\"q\", \"*:*\");\n    } else {\n      // the query should match some documents in most cases\n      String[] qRange = getRandomRange(cardinality, \"id\");\n      params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    }\n    params.set(\"facet\", \"true\");\n    String field = pickRandom(fields); //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      String[] interval = getRandomRange(cardinality, field);\n      String open = pickRandom(startOptions);\n      String close = pickRandom(endOptions);\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), getCountDistinctIntervals(facetIntervals));\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + field + \": \" + facetIntervals.getName(i) + \"\\nResponse: \" + rsp.getValues().get(\"facet_counts\"), \n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString(),\n            facetIntervals.getVal(i).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), facetIntervals.size());\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + facetIntervals.getName(i), facetIntervals.getVal(i).toString(),\n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (rarely()) {\n      params.set(\"q\", \"*:*\");\n    } else {\n      // the query should match some documents in most cases\n      String[] qRange = getRandomRange(cardinality, \"id\");\n      params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    }\n    params.set(\"facet\", \"true\");\n    String field = pickRandom(fields); //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      String[] interval = getRandomRange(cardinality, field);\n      String open = pickRandom(startOptions);\n      String close = pickRandom(endOptions);\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), getCountDistinctIntervals(facetIntervals));\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + field + \": \" + facetIntervals.getName(i) + \"\\nResponse: \" + rsp.getValues().get(\"facet_counts\"), \n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString(),\n            facetIntervals.getVal(i).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (rarely()) {\n      params.set(\"q\", \"*:*\");\n    } else {\n      // the query should match some documents in most cases\n      String[] qRange = getRandomRange(cardinality, \"id\");\n      params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    }\n    params.set(\"facet\", \"true\");\n    String field = pickRandom(fields); //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      String[] interval = getRandomRange(cardinality, field);\n      String open = pickRandom(startOptions);\n      String close = pickRandom(endOptions);\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n      params.add(\"facet.query\", field + \":\" + open.replace('(', '{') + interval[0] + \" TO \" + interval[1] + close.replace(')', '}'));\n    }\n    SolrQueryRequest req = req(params);\n    try {\n      SolrQueryResponse rsp = h.queryAndResponse(\"\", req);\n      NamedList<Object> facetQueries = (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\")).get(\"facet_queries\");\n      NamedList<Object> facetIntervals = (NamedList<Object>) ((NamedList<Object>) (NamedList<Object>) ((NamedList<Object>) rsp.getValues().get(\"facet_counts\"))\n          .get(\"facet_intervals\")).get(field);\n      assertEquals(\"Responses don't have the same number of facets: \\n\" + facetQueries + \"\\n\" + facetIntervals,\n          facetQueries.size(), getCountDistinctIntervals(facetIntervals));\n      for (int i = 0; i < facetIntervals.size(); i++) {\n        assertEquals(\"Interval did not match: \" + field + \": \" + facetIntervals.getName(i) + \"\\nResponse: \" + rsp.getValues().get(\"facet_counts\"), \n            facetQueries.get(field + \":\" + facetIntervals.getName(i).replace(\",\", \" TO \").replace('(', '{').replace(')', '}')).toString(),\n            facetIntervals.getVal(i).toString());\n      }\n    } finally {\n      req.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["28288370235ed02234a64753cdbf0c6ec096304a","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b271c46c3637c193cc37983fc38592b1b99d5f1c"],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","28288370235ed02234a64753cdbf0c6ec096304a"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["30c8e5574b55d57947e989443dfde611646530ee","b271c46c3637c193cc37983fc38592b1b99d5f1c"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b271c46c3637c193cc37983fc38592b1b99d5f1c":["58884af1f68e9d61c217c753fbd6266d86a63b14","aa2585c33d5d66a1c837c312221eb55ddb3c4300","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"30c8e5574b55d57947e989443dfde611646530ee":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"28288370235ed02234a64753cdbf0c6ec096304a":["58884af1f68e9d61c217c753fbd6266d86a63b14","b271c46c3637c193cc37983fc38592b1b99d5f1c","30c8e5574b55d57947e989443dfde611646530ee"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}