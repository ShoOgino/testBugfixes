{"path":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != positions.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != positions.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != positions.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != positions.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != positions.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.READ);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.READ);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        TermsEnum tis = fis.terms();\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["28427ef110c4c5bf5b4057731b83110bd1e13724","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","868186558eb3a854ce7e720a52bb445795d54910"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"868186558eb3a854ce7e720a52bb445795d54910":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787","5f4e87790277826a2aea119328600dfb07761f32"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3cc749c053615f5871f3b95715fe292f34e70a53","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}