{"path":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"/dev/null","sourceNew":"  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( (Query) luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","sourceNew":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( (Query) luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","sourceOld":"  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( (Query) luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","sourceNew":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List<Query> luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( (Query) luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/NotQuery#makeLuceneQueryFieldNoBoost(String,BasicQueryFactory).mjava","sourceNew":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List<Query> luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {\n    List<Query> luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add( luceneSubQueries.get(0), BooleanClause.Occur.MUST);\n    SrndBooleanQuery.addQueriesToBoolean(bq,\n            // FIXME: do not allow weights on prohibited subqueries.\n            luceneSubQueries.subList(1, luceneSubQueries.size()),\n            // later subqueries: not required, prohibited\n            BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["d04b321158481d3895702b3cbf6821a3083e6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d04b321158481d3895702b3cbf6821a3083e6c15":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}