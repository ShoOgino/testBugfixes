{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleCommands() throws Exception{\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                        'dest':['a2','hello_lol']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                     'name' : 'myNewTxtField',\\n\" +\n        \"                     'class':'solr.TextField','positionIncrementGap':'100',\\n\" +\n        \"                     'analyzer' : {\\n\" +\n        \"                                  'charFilters':[\\n\" +\n        \"                                            {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'}\\n\" +\n        \"                                         ],\\n\" +\n        \"                     'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                     'filters':[\\n\" +\n        \"                             {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\\n\" +\n        \"                             {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\\n\" +\n        \"                             {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                             {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                             {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                  ]\\n\" +\n        \"                }\\n\" +\n        \"              }\"+\n        \"          }\";\n\n    RestTestHarness harness = restTestHarness;\n\n\n    String response = harness.post(\"/schema?wt=json\", SolrTestCaseJ4.json( payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n\n    Map m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\",m );\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    List l = getCopyFields(harness,\"a1\");\n    Set s =new HashSet();\n    assertEquals(2,l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n    assertTrue(s.contains(\"a2\"));\n\n    m = getObj(harness,\"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\",m.get(\"class\"));\n    assertEquals(\"true\",String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness,\"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleCommands() throws Exception{\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                        'dest':['a2','hello_lol']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                     'name' : 'myNewTxtField',\\n\" +\n        \"                     'class':'solr.TextField','positionIncrementGap':'100',\\n\" +\n        \"                     'analyzer' : {\\n\" +\n        \"                                  'charFilters':[\\n\" +\n        \"                                            {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'}\\n\" +\n        \"                                         ],\\n\" +\n        \"                     'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                     'filters':[\\n\" +\n        \"                             {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\\n\" +\n        \"                             {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\\n\" +\n        \"                             {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                             {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                             {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                  ]\\n\" +\n        \"                }\\n\" +\n        \"              }\"+\n        \"          }\";\n\n    RestTestHarness harness = restTestHarness;\n\n\n    String response = harness.post(\"/schema?wt=json\", SolrTestCaseJ4.json( payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n\n    Map m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\",m );\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    List l = getCopyFields(harness,\"a1\");\n    Set s =new HashSet();\n    assertEquals(2,l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n    assertTrue(s.contains(\"a2\"));\n\n    m = getObj(harness,\"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\",m.get(\"class\"));\n    assertEquals(\"true\",String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness,\"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                        'dest':['a2','hello_lol']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                     'name' : 'myNewTxtField',\\n\" +\n        \"                     'class':'solr.TextField','positionIncrementGap':'100',\\n\" +\n        \"                     'analyzer' : {\\n\" +\n        \"                                  'charFilters':[\\n\" +\n        \"                                            {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'}\\n\" +\n        \"                                         ],\\n\" +\n        \"                     'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                     'filters':[\\n\" +\n        \"                             {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\\n\" +\n        \"                             {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\\n\" +\n        \"                             {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                             {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                             {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                  ]\\n\" +\n        \"                }\\n\" +\n        \"              }\"+\n        \"          }\";\n\n    RestTestHarness harness = restTestHarness;\n\n\n    String response = harness.post(\"/schema?wt=json\", SolrTestCaseJ4.json( payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n\n    Map m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\",m );\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    List l = getCopyFields(harness,\"a1\");\n    Set s =new HashSet();\n    assertEquals(2,l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n    assertTrue(s.contains(\"a2\"));\n\n    m = getObj(harness,\"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\",m.get(\"class\"));\n    assertEquals(\"true\",String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness,\"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                        'dest':['a2','hello_lol']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                     'name' : 'myNewTxtField',\\n\" +\n        \"                     'class':'solr.TextField','positionIncrementGap':'100',\\n\" +\n        \"                     'analyzer' : {\\n\" +\n        \"                                  'charFilters':[\\n\" +\n        \"                                            {'class':'solr.PatternReplaceCharFilterFactory','replacement':'$1$1','pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'}\\n\" +\n        \"                                         ],\\n\" +\n        \"                     'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                     'filters':[\\n\" +\n        \"                             {'class':'solr.WordDelimiterFilterFactory','preserveOriginal':'0'},\\n\" +\n        \"                             {'class':'solr.StopFilterFactory','words':'stopwords.txt','ignoreCase':'true'},\\n\" +\n        \"                             {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                             {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                             {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                  ]\\n\" +\n        \"                }\\n\" +\n        \"              }\"+\n        \"          }\";\n\n    RestTestHarness harness = restTestHarness;\n\n\n    String response = harness.post(\"/schema?wt=json\", SolrTestCaseJ4.json( payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n\n    Map m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\",m );\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    List l = getCopyFields(harness,\"a1\");\n    Set s =new HashSet();\n    assertEquals(2,l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n    assertTrue(s.contains(\"a2\"));\n\n    m = getObj(harness,\"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\",m.get(\"class\"));\n    assertEquals(\"true\",String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness,\"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c3d2444349054ee067813f2bec7610c0933009b","date":1434665250,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a4cf8d543027e3357024f7005523976bd6a0dfc","date":1434743090,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(\"org.apache.lucene.misc.SweetSpotSimilarity\", m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n\n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20eb14adcb76cac6b8ae297eb37caec72e3a2140","date":1447952616,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(\"org.apache.lucene.misc.SweetSpotSimilarity\", m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n\n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9354b2a0148657f4393d2a4acb438fde7f1d1dad","date":1490673235,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79073f40991d761d73bb67bb490d1f562da07e53","date":1490873944,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'analyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema?wt=json\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49b9c73648f983a139745761ed2bedf2e3821b34","date":1543567369,"type":3,"author":"javanna","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", LegacyBM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da56d90379fbe988bf847d3482efa685803c5193","date":1544607230,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", LegacyBM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleCommands().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","sourceOld":"  public void testMultipleCommands() throws Exception{\n    RestTestHarness harness = restTestHarness;\n\n    Map m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNotNull(\"'wdf_nocase' field does not exist in the schema\", m);\n    \n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNotNull(\"'wdf_nocase' field type does not exist in the schema\", m);\n    \n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingFirst\"));\n    assertTrue((Boolean)m.get(\"sortMissingLast\"));\n    \n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"nametext\", m.get(\"type\"));\n\n    m = getObj(harness, \"bind\", \"fields\");\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n    assertEquals(\"boolean\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"text\", m.get(\"type\"));\n\n    List l = getSourceCopyFields(harness, \"*_i\");\n    Set s = new HashSet();\n    assertEquals(4, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map)l.get(1)).get(\"dest\"));\n    s.add(((Map) l.get(2)).get(\"dest\"));\n    s.add(((Map) l.get(3)).get(\"dest\"));\n    assertTrue(s.contains(\"title\"));\n    assertTrue(s.contains(\"*_s\"));\n\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a1',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a2',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':true,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'*_lol',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'a1',\\n\" +\n        \"                       'dest':['a2','hello_lol']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'mystr',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myNewTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'positionIncrementGap':'100',\\n\" +\n        \"                       'indexAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.FlattenGraphFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               },\\n\" +\n        \"                       'queryAnalyzer' : {\\n\" +\n        \"                               'charFilters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"                                           'replacement':'$1$1',\\n\" +\n        \"                                           'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"                                          }\\n\" +\n        \"                                         ],\\n\" +\n        \"                               'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'},\\n\" +\n        \"                               'filters':[\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.WordDelimiterGraphFilterFactory',\\n\" +\n        \"                                           'preserveOriginal':'0'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {\\n\" +\n        \"                                           'class':'solr.StopFilterFactory',\\n\" +\n        \"                                           'words':'stopwords.txt',\\n\" +\n        \"                                           'ignoreCase':'true'\\n\" +\n        \"                                          },\\n\" +\n        \"                                          {'class':'solr.LowerCaseFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.ASCIIFoldingFilterFactory'},\\n\" +\n        \"                                          {'class':'solr.KStemFilterFactory'}\\n\" +\n        \"                                         ]\\n\" +\n        \"                               }\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a3',\\n\" +\n        \"                       'type': 'myNewTxtField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'myWhitespaceTxtField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'uninvertible':false,\\n\" +\n        \"                       'analyzer' : {'class' : 'org.apache.lucene.analysis.core.WhitespaceAnalyzer'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a5',\\n\" +\n        \"                       'type': 'myWhitespaceTxtField',\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\" +\n        \"                       'name' : 'mySimField',\\n\" +\n        \"                       'class':'solr.TextField',\\n\" +\n        \"                       'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"                       'similarity' : {'class':'org.apache.lucene.misc.SweetSpotSimilarity'}\\n\" +\n        \"                       },\\n\"+\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'a4',\\n\" +\n        \"                       'type': 'mySimField',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'delete-field' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-field-type' : {'name':'wdf_nocase'},\\n\" +\n        \"          'delete-dynamic-field' : {'name':'*_tt'},\\n\" +\n        \"          'delete-copy-field' : {'source':'a1', 'dest':'a2'},\\n\" +\n        \"          'delete-copy-field' : {'source':'*_i', 'dest':['title', '*_s']},\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name':'boolean',\\n\" +\n        \"                       'class':'solr.BoolField',\\n\" +\n        \"                       'sortMissingFirst':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'name',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name':'attr_*',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'indexed':true,\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'multiValued':true\\n\" +\n        \"                       }\\n\" +\n        \"          }\\n\";\n    \n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    m = getObj(harness, \"a1\", \"fields\");\n    assertNotNull(\"field a1 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.FALSE, m.get(\"indexed\"));\n\n    m = getObj(harness,\"a2\", \"fields\");\n    assertNotNull(\"field a2 not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.TRUE, m.get(\"uninvertible\"));\n\n    m = getObj(harness,\"*_lol\", \"dynamicFields\");\n    assertNotNull(\"field *_lol not created\", m);\n\n    assertEquals(\"string\", m.get(\"type\"));\n    assertEquals(Boolean.TRUE, m.get(\"stored\"));\n    assertEquals(Boolean.TRUE, m.get(\"indexed\"));\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n\n    l = getSourceCopyFields(harness, \"a1\");\n    s = new HashSet();\n    assertEquals(1, l.size());\n    s.add(((Map) l.get(0)).get(\"dest\"));\n    assertTrue(s.contains(\"hello_lol\"));\n\n    l = getSourceCopyFields(harness, \"*_i\");\n    s = new HashSet();\n    assertEquals(2, l.size());\n    s.add(((Map)l.get(0)).get(\"dest\"));\n    s.add(((Map) l.get(1)).get(\"dest\"));\n    assertFalse(s.contains(\"title\"));\n    assertFalse(s.contains(\"*_s\"));\n\n    m = getObj(harness, \"mystr\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(\"solr.StrField\", m.get(\"class\"));\n    assertEquals(\"true\", String.valueOf(m.get(\"sortMissingLast\")));\n\n    m = getObj(harness, \"myNewTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n\n    m = getObj(harness, \"a3\", \"fields\");\n    assertNotNull(\"field a3 not created\", m);\n    assertEquals(\"myNewTxtField\", m.get(\"type\"));\n\n    m = getObj(harness, \"mySimField\", \"fieldTypes\");\n    assertNotNull(m);\n    m = (Map)m.get(\"similarity\");\n    assertNotNull(m);\n    assertEquals(SweetSpotSimilarity.class.getName(), m.get(\"class\"));\n\n    m = getObj(harness, \"a4\", \"fields\");\n    assertNotNull(\"field a4 not created\", m);\n    assertEquals(\"mySimField\", m.get(\"type\"));\n    assertFieldSimilarity(\"a4\", SweetSpotSimilarity.class);\n    \n    m = getObj(harness, \"myWhitespaceTxtField\", \"fieldTypes\");\n    assertNotNull(m);\n    assertEquals(Boolean.FALSE, m.get(\"uninvertible\"));\n    assertNull(m.get(\"similarity\")); // unspecified, expect default\n\n    m = getObj(harness, \"a5\", \"fields\");\n    assertNotNull(\"field a5 not created\", m);\n    assertEquals(\"myWhitespaceTxtField\", m.get(\"type\"));\n    assertNull(m.get(\"uninvertible\")); // inherited, but API shouldn't return w/o explicit showDefaults\n    assertFieldSimilarity(\"a5\", BM25Similarity.class); // unspecified, expect default\n\n    m = getObj(harness, \"wdf_nocase\", \"fields\");\n    assertNull(\"field 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"wdf_nocase\", \"fieldTypes\");\n    assertNull(\"field type 'wdf_nocase' not deleted\", m);\n\n    m = getObj(harness, \"*_tt\", \"dynamicFields\");\n    assertNull(\"dynamic field '*_tt' not deleted\", m);\n\n    m = getObj(harness, \"boolean\", \"fieldTypes\");\n    assertNotNull(\"'boolean' field type does not exist in the schema\", m);\n    assertNull(m.get(\"sortMissingLast\"));\n    assertTrue((Boolean)m.get(\"sortMissingFirst\"));\n\n    m = getObj(harness, \"bind\", \"fields\"); // this field will be rebuilt when \"boolean\" field type is replaced\n    assertNotNull(\"'bind' field does not exist in the schema\", m);\n\n    m = getObj(harness, \"name\", \"fields\");\n    assertNotNull(\"'name' field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n\n    m = getObj(harness, \"attr_*\", \"dynamicFields\");\n    assertNotNull(\"'attr_*' dynamic field does not exist in the schema\", m);\n    assertEquals(\"string\", m.get(\"type\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"9354b2a0148657f4393d2a4acb438fde7f1d1dad":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["79073f40991d761d73bb67bb490d1f562da07e53","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["da56d90379fbe988bf847d3482efa685803c5193"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","eeeea2295d6355a29e259130a5c48ace73022d7c"],"a52341299179de5479672f7cf518bf4b173f34b3":["9354b2a0148657f4393d2a4acb438fde7f1d1dad","ac1e7fa558287a811ea07634d815ee7b1c541284"],"79073f40991d761d73bb67bb490d1f562da07e53":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"49b9c73648f983a139745761ed2bedf2e3821b34":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c3d2444349054ee067813f2bec7610c0933009b":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["3c3d2444349054ee067813f2bec7610c0933009b"],"da56d90379fbe988bf847d3482efa685803c5193":["49b9c73648f983a139745761ed2bedf2e3821b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["9354b2a0148657f4393d2a4acb438fde7f1d1dad"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"9354b2a0148657f4393d2a4acb438fde7f1d1dad":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3c3d2444349054ee067813f2bec7610c0933009b"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["9354b2a0148657f4393d2a4acb438fde7f1d1dad","79073f40991d761d73bb67bb490d1f562da07e53"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["eeeea2295d6355a29e259130a5c48ace73022d7c","d9a47902d6207303f5ed3e7aaca62ca33433af66","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["49b9c73648f983a139745761ed2bedf2e3821b34"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"79073f40991d761d73bb67bb490d1f562da07e53":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"49b9c73648f983a139745761ed2bedf2e3821b34":["da56d90379fbe988bf847d3482efa685803c5193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"3c3d2444349054ee067813f2bec7610c0933009b":["9a4cf8d543027e3357024f7005523976bd6a0dfc"],"9a4cf8d543027e3357024f7005523976bd6a0dfc":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"da56d90379fbe988bf847d3482efa685803c5193":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","d9a47902d6207303f5ed3e7aaca62ca33433af66","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}