{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength, writeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength, storeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength, writeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength, writeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength, writeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // if (DEBUG) System.out.println(\"SPW:   startDoc seg=\" + segment + \" docID=\" + docID + \" tf=\" + termDocFreq + \" freqOut.fp=\" + freqOut.getFilePointer());\n\n    final int delta = docID - lastDocID;\n    \n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (freqOut: \" + freqOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength, writeOffsets, lastOffsetLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n    lastDocID = docID;\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      freqOut.writeVInt(delta);\n    } else if (1 == termDocFreq) {\n      freqOut.writeVInt((delta<<1) | 1);\n    } else {\n      freqOut.writeVInt(delta<<1);\n      freqOut.writeVInt(termDocFreq);\n    }\n\n    lastPosition = 0;\n    lastOffset = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}