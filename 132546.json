{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","commits":[{"id":"114b665752b215f36836a7c5411f7c433b4d1352","date":1497007372,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, 1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    assertNotNull(loaded.get(\"triggers\"));\n    assertEquals(\"auto add replicas trigger did not created\", ((Map)loaded.get(\"triggers\")).size(), 1);\n\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    assertNull(loaded.get(\"triggers\"));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    assertNotNull(loaded.get(\"triggers\"));\n    assertEquals(\"auto add replicas trigger did not created\", ((Map)loaded.get(\"triggers\")).size(), 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e1d58423aaa9e6245149a3798692fa1c9d2d542","date":1497619277,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, 1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, 1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    assertNotNull(loaded.get(\"triggers\"));\n    assertEquals(\"auto add replicas trigger did not created\", ((Map)loaded.get(\"triggers\")).size(), 1);\n\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    assertNull(loaded.get(\"triggers\"));\n\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    assertNotNull(loaded.get(\"triggers\"));\n    assertEquals(\"auto add replicas trigger did not created\", ((Map)loaded.get(\"triggers\")).size(), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84714b527e33402ac1ad6a9155ebf4a10001e1d3","date":1498553748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, CONFIGSET_NAME,1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, 1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, CONFIGSET_NAME,1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, CONFIGSET_NAME,1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e302b4ecab1242453fbd12784e424ad50c66398","date":1501517060,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAutoAddReplicas() throws Exception {\n    String collection = \"test-collection\";\n    CollectionAdminRequest\n        .createCollection(collection, CONFIGSET_NAME,1, 1)\n        .setAutoAddReplicas(true)\n        .process(cluster.getSolrClient());\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger were not created\", triggers.size(), 1);\n    Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    // lets turn of autoAddReplicas, currently it doesn't change anything in autoscaling config\n    // because AutoAddReplicasPlanAction will just ignore any collections with autoAddReplicas turned off\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", false);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    // lets delete all autoscaling config\n    zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n\n    // now enable autoAddReplicas and assert that the trigger was re-created correctly\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", collection);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(\"auto add replicas trigger did not created\", triggers.size(), 1);\n    autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n    assertNotNull(autoAddReplicasTrigger);\n    actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n    assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","sourceOld":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      @SuppressWarnings({\"rawtypes\"})\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        @SuppressWarnings({\"unchecked\"})\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","sourceOld":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testAutoAddReplicas().mjava","sourceNew":null,"sourceOld":"  private static void testAutoAddReplicas() throws Exception {\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n      ZkNodeProps loaded = ZkNodeProps.load(data);\n      @SuppressWarnings({\"rawtypes\"})\n      Map triggers = (Map) loaded.get(\"triggers\");\n      if (triggers != null && triggers.containsKey(\".auto_add_replicas\")) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> autoAddReplicasTrigger = (Map<String, Object>) triggers.get(\".auto_add_replicas\");\n        assertNotNull(autoAddReplicasTrigger);\n        @SuppressWarnings({\"unchecked\"})\n        List<Map<String, Object>> actions = (List<Map<String, Object>>) autoAddReplicasTrigger.get(\"actions\");\n        assertNotNull(actions);\n        assertEquals(2, actions.size());\n        assertEquals(\"auto_add_replicas_plan\", actions.get(0).get(\"name\").toString());\n        assertEquals(\"solr.AutoAddReplicasPlanAction\", actions.get(0).get(\"class\").toString());\n        break;\n      } else {\n        Thread.sleep(300);\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"Timeout waiting for .auto_add_replicas being created\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e302b4ecab1242453fbd12784e424ad50c66398"],"84714b527e33402ac1ad6a9155ebf4a10001e1d3":["1e1d58423aaa9e6245149a3798692fa1c9d2d542"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["84714b527e33402ac1ad6a9155ebf4a10001e1d3"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"114b665752b215f36836a7c5411f7c433b4d1352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e1d58423aaa9e6245149a3798692fa1c9d2d542":["114b665752b215f36836a7c5411f7c433b4d1352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"9e302b4ecab1242453fbd12784e424ad50c66398":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"84714b527e33402ac1ad6a9155ebf4a10001e1d3":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["9e302b4ecab1242453fbd12784e424ad50c66398"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"114b665752b215f36836a7c5411f7c433b4d1352":["1e1d58423aaa9e6245149a3798692fa1c9d2d542"],"1e1d58423aaa9e6245149a3798692fa1c9d2d542":["84714b527e33402ac1ad6a9155ebf4a10001e1d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","114b665752b215f36836a7c5411f7c433b4d1352","560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9e302b4ecab1242453fbd12784e424ad50c66398":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}