{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","commits":[{"id":"0713b289be914e52cc2ec942aeb7306f0593a787","date":1361852996,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    \n    if (slices == null) {\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            return null;\n          }\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac","79411f20952f22cd9b944ff6f25f051554ff8e53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf328548e58ed500c8210afa7e12367f2bc67979","date":1361977356,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    \n    if (slices == null) {\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            return null;\n          }\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    \n    if (slices == null) {\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            return null;\n          }\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db889c531bc88c5c68d4254982851bd2d4e2a6a3","date":1362274188,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    \n    if (slices == null) {\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            return null;\n          }\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"db889c531bc88c5c68d4254982851bd2d4e2a6a3":["bf328548e58ed500c8210afa7e12367f2bc67979"],"bf328548e58ed500c8210afa7e12367f2bc67979":["0713b289be914e52cc2ec942aeb7306f0593a787"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["db889c531bc88c5c68d4254982851bd2d4e2a6a3"],"0713b289be914e52cc2ec942aeb7306f0593a787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cfa38e36fa296bb93d77df7d5556257dffa4535"]},"commit2Childs":{"db889c531bc88c5c68d4254982851bd2d4e2a6a3":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"bf328548e58ed500c8210afa7e12367f2bc67979":["db889c531bc88c5c68d4254982851bd2d4e2a6a3"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0713b289be914e52cc2ec942aeb7306f0593a787":["bf328548e58ed500c8210afa7e12367f2bc67979"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0713b289be914e52cc2ec942aeb7306f0593a787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}