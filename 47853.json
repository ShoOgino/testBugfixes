{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n        BytesRef minTerm = null;\n        BytesRef maxTerm = new BytesRef();\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (minTerm == null) {\n            minTerm = BytesRef.deepCopyOf(term);\n          }\n          maxTerm.copyBytes(term);\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n        BytesRef minTerm = null;\n        BytesRef maxTerm = new BytesRef();\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (minTerm == null) {\n            minTerm = BytesRef.deepCopyOf(term);\n          }\n          maxTerm.copyBytes(term);\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    boolean success = false;\n    try {\n      String lastField = null;\n      for(String field : fields) {\n        assert lastField == null || lastField.compareTo(field) < 0;\n        lastField = field;\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n        BytesRef minTerm = null;\n        BytesRef maxTerm = new BytesRef();\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (minTerm == null) {\n            minTerm = BytesRef.deepCopyOf(term);\n          }\n          maxTerm.copyBytes(term);\n          termsWriter.write(term, termsEnum);\n        }\n\n        termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(this);\n      } else {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":6,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#write(Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#write(Fields).mjava","sourceNew":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Fields fields) throws IOException {\n\n    String lastField = null;\n    for(String field : fields) {\n      assert lastField == null || lastField.compareTo(field) < 0;\n      lastField = field;\n\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        continue;\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n\n      TermsWriter termsWriter = new TermsWriter(fieldInfos.fieldInfo(field));\n      BytesRef minTerm = null;\n      BytesRef maxTerm = new BytesRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        if (minTerm == null) {\n          minTerm = BytesRef.deepCopyOf(term);\n        }\n        maxTerm.copyBytes(term);\n        termsWriter.write(term, termsEnum);\n      }\n\n      termsWriter.finish(minTerm, minTerm == null ? null : maxTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","0974f33be0e2189e71f36b67f1017f4072b1a126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}