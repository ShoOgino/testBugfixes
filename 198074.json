{"path":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","commits":[{"id":"02109c1c424868c8c3d9d6b4926834fa1300f70e","date":1311744669,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"/dev/null","sourceNew":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsings\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: field.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"882672f84c41811925a643eebc5024b884e02cda","date":1311747468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: field.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsings\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: field.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.YES, Field.Index.ANALYZED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: field.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: field.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af72e82a700260f4db12dd109e0ad97fab6152b0","date":1314635179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  /** creates a broken index with ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054!!!! */\n  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    CodecProvider cp = _TestUtil.alwaysCodec(new PulsingCodec(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator();\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = te.docs(null, de);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/pulsing/Test10KPulsings#test10kPulsed().mjava","sourceNew":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test10kPulsed() throws Exception {\n    // we always run this test with pulsing codec.\n    Codec cp = _TestUtil.alwaysPostingsFormat(new Pulsing40PostingsFormat(1));\n    \n    File f = _TestUtil.getTempDir(\"10kpulsed\");\n    MockDirectoryWrapper dir = newFSDirectory(f);\n    dir.setCheckIndexOnClose(false); // we do this ourselves explicitly\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(cp));\n    \n    Document document = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    \n    switch(_TestUtil.nextInt(random, 0, 2)) {\n      case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n      case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n      default: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break; \n    }\n\n    Field field = newField(\"field\", \"\", ft);\n    document.add(field);\n    \n    NumberFormat df = new DecimalFormat(\"00000\", new DecimalFormatSymbols(Locale.ENGLISH));\n\n    for (int i = 0; i < 10050; i++) {\n      field.setValue(df.format(i));\n      iw.addDocument(document);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    TermsEnum te = MultiFields.getTerms(ir, \"field\").iterator(null);\n    DocsEnum de = null;\n    \n    for (int i = 0; i < 10050; i++) {\n      String expected = df.format(i);\n      assertEquals(expected, te.next().utf8ToString());\n      de = _TestUtil.docs(random, te, null, de, false);\n      assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, de.nextDoc());\n    }\n    ir.close();\n\n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["af72e82a700260f4db12dd109e0ad97fab6152b0"],"02109c1c424868c8c3d9d6b4926834fa1300f70e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["882672f84c41811925a643eebc5024b884e02cda"],"882672f84c41811925a643eebc5024b884e02cda":["02109c1c424868c8c3d9d6b4926834fa1300f70e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"af72e82a700260f4db12dd109e0ad97fab6152b0":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"02109c1c424868c8c3d9d6b4926834fa1300f70e":["882672f84c41811925a643eebc5024b884e02cda"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02109c1c424868c8c3d9d6b4926834fa1300f70e"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["af72e82a700260f4db12dd109e0ad97fab6152b0"],"882672f84c41811925a643eebc5024b884e02cda":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af72e82a700260f4db12dd109e0ad97fab6152b0":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}