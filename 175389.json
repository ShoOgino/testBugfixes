{"path":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","commits":[{"id":"0414a20d73ebe5c96a6e7e70e337083ec37f01fd","date":1316542523,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searcher.search(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searcher.search(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searcher.search(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, filter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","sourceNew":null,"sourceOld":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a250ecd3e83b1c6595bcae0474f5b258df42021b","2f8247163846f78e14d325499507cc0a7d5821e2"],"2f8247163846f78e14d325499507cc0a7d5821e2":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f8247163846f78e14d325499507cc0a7d5821e2"]},"commit2Childs":{"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2f8247163846f78e14d325499507cc0a7d5821e2":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}