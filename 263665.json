{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSmallSampleFromCorpus().mjava","commits":[{"id":"312ce82a5cb8caabe17229d90ef49e89efc2a10b","date":1569387506,"type":0,"author":"Andrew Hind","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSmallSampleFromCorpus().mjava","pathOld":"/dev/null","sourceNew":"  public void testSmallSampleFromCorpus() throws Throwable {\n    // add series of docs with terms of decreasing df\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1980; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"text\", \"filler\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 18; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      doc.add(newTextField(\"one_percent\", \"tenth\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    // setup MLT query\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMaxQueryTerms(3);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[]{\"one_percent\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth tenth all\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    Term term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n\n    query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth all all\"));\n    clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6631c1df69d23948c714dc3f475757b7b2e7826c","date":1569408265,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSmallSampleFromCorpus().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testSmallSampleFromCorpus().mjava","sourceNew":"  public void testSmallSampleFromCorpus() throws Throwable {\n    // add series of docs with terms of decreasing df\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1980; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"text\", \"filler\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 18; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      doc.add(newTextField(\"one_percent\", \"tenth\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    // setup MLT query\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMaxQueryTerms(3);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[]{\"one_percent\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth tenth all\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    Term term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n\n    query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth all all\"));\n    clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n    // clean up\n    reader.close();\n    dir.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSmallSampleFromCorpus() throws Throwable {\n    // add series of docs with terms of decreasing df\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1980; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"text\", \"filler\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 18; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    for (int i = 0; i < 2; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"one_percent\", \"all\", Field.Store.YES));\n      doc.add(newTextField(\"one_percent\", \"tenth\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    // setup MLT query\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMaxQueryTerms(3);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[]{\"one_percent\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth tenth all\"));\n    Collection<BooleanClause> clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    Term term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n\n    query = (BooleanQuery) mlt.like(\"one_percent\", new StringReader(\"tenth all all\"));\n    clauses = query.clauses();\n\n    assertTrue(clauses.size() == 2);\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(0).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"all\"));\n    term = ((TermQuery) ((List<BooleanClause>) clauses).get(1).getQuery()).getTerm();\n    assertTrue(term.text().equals(\"tenth\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"312ce82a5cb8caabe17229d90ef49e89efc2a10b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6631c1df69d23948c714dc3f475757b7b2e7826c":["312ce82a5cb8caabe17229d90ef49e89efc2a10b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6631c1df69d23948c714dc3f475757b7b2e7826c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["312ce82a5cb8caabe17229d90ef49e89efc2a10b"],"312ce82a5cb8caabe17229d90ef49e89efc2a10b":["6631c1df69d23948c714dc3f475757b7b2e7826c"],"6631c1df69d23948c714dc3f475757b7b2e7826c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}