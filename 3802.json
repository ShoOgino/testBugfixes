{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param scoreDocsInOrder\n     *          specifies whether in-order scoring of documents is required. Note\n     *          that if set to false (i.e., out-of-order scoring is required),\n     *          this method can return whatever scoring mode it supports, as every\n     *          in-order scorer is also an out-of-order one. However, an\n     *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n     *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n     *          request an in-order scorer if use of these methods is required.\n     * @param topScorer\n     *          if true, {@link Scorer#score(Collector)} will be called; if false,\n     *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n     *          be called.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param scoreDocsInOrder\n     *          specifies whether in-order scoring of documents is required. Note\n     *          that if set to false (i.e., out-of-order scoring is required),\n     *          this method can return whatever scoring mode it supports, as every\n     *          in-order scorer is also an out-of-order one. However, an\n     *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n     *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n     *          request an in-order scorer if use of these methods is required.\n     * @param topScorer\n     *          if true, {@link Scorer#score(Collector)} will be called; if false,\n     *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n     *          be called.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param scoreDocsInOrder\n     *          specifies whether in-order scoring of documents is required. Note\n     *          that if set to false (i.e., out-of-order scoring is required),\n     *          this method can return whatever scoring mode it supports, as every\n     *          in-order scorer is also an out-of-order one. However, an\n     *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n     *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n     *          request an in-order scorer if use of these methods is required.\n     * @param topScorer\n     *          if true, {@link Scorer#score(Collector)} will be called; if false,\n     *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n     *          be called.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param scoreDocsInOrder\n     *          specifies whether in-order scoring of documents is required. Note\n     *          that if set to false (i.e., out-of-order scoring is required),\n     *          this method can return whatever scoring mode it supports, as every\n     *          in-order scorer is also an out-of-order one. However, an\n     *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n     *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n     *          request an in-order scorer if use of these methods is required.\n     * @param topScorer\n     *          if true, {@link Scorer#score(Collector)} will be called; if false,\n     *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n     *          be called.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a filtered {@link Scorer} based on this strategy.\n     * \n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered scorer\n     * \n     * @throws IOException if an {@link IOException} occurs\n     */\n    public abstract Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}