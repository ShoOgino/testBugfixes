{"path":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","sourceNew":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random)).close();\n      assertTrue(dir.fileExists(name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random)).close();\n      assertTrue(dir.fileExists(name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","sourceNew":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random())).close();\n      assertTrue(dir.fileExists(name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random)).close();\n      assertTrue(dir.fileExists(name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","sourceNew":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random())).close();\n      assertTrue(slowFileExists(dir, name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random())).close();\n      assertTrue(dir.fileExists(name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#checkDirectoryFilter(Directory).mjava","sourceNew":null,"sourceOld":"  // LUCENE-1468\n  private void checkDirectoryFilter(Directory dir) throws IOException {\n    String name = \"file\";\n    try {\n      dir.createOutput(name, newIOContext(random())).close();\n      assertTrue(slowFileExists(dir, name));\n      assertTrue(Arrays.asList(dir.listAll()).contains(name));\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c15a75016387504d70a40cba6e9314b8885307f0"]},"commit2Childs":{"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["c15a75016387504d70a40cba6e9314b8885307f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c15a75016387504d70a40cba6e9314b8885307f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}