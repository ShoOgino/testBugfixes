{"path":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList<AttributeSource.State>();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList<AttributeSource.State>();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList<>();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList<AttributeSource.State>();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460ad29a56a343e168018965b35d6dac8d64f4b","date":1415800689,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new ArrayList<>(64);\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList<>();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55244759f906151d96839f8451dee793acb06e75","date":1418999882,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/CachingTokenFilter#incrementToken().mjava","sourceNew":"  /** The first time called, it'll read and cache all tokens from the input. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {//first-time\n      // fill cache lazily\n      cache = new ArrayList<>(64);\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new ArrayList<>(64);\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return false\n      return false;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    restoreState(iterator.next());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7460ad29a56a343e168018965b35d6dac8d64f4b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55244759f906151d96839f8451dee793acb06e75":["7460ad29a56a343e168018965b35d6dac8d64f4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55244759f906151d96839f8451dee793acb06e75"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7460ad29a56a343e168018965b35d6dac8d64f4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460ad29a56a343e168018965b35d6dac8d64f4b":["55244759f906151d96839f8451dee793acb06e75"],"55244759f906151d96839f8451dee793acb06e75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}