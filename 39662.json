{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","commits":[{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress(String).mjava","sourceNew":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if(URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host to url_prefix://host\n  // input can be null, host, or url_prefix://host\n  private String getHostAddress(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = \"http://\" + hostaddress;\n    } else {\n      Matcher m = URL_PREFIX.matcher(host);\n      if (!m.matches()) {\n        host = \"http://\" + host;\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","sourceNew":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if (URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if(URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","sourceNew":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if (URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if(URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#normalizeHostName(String).mjava","sourceNew":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if (URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","sourceOld":"  // normalize host removing any url scheme.\n  // input can be null, host, or url_prefix://host\n  private String normalizeHostName(String host) throws IOException {\n\n    if (host == null || host.length() == 0) {\n      String hostaddress;\n      try {\n        hostaddress = InetAddress.getLocalHost().getHostAddress();\n      } catch (UnknownHostException e) {\n        hostaddress = \"127.0.0.1\"; // cannot resolve system hostname, fall through\n      }\n      // Re-get the IP again for \"127.0.0.1\", the other case we trust the hosts\n      // file is right.\n      if (\"127.0.0.1\".equals(hostaddress)) {\n        Enumeration<NetworkInterface> netInterfaces = null;\n        try {\n          netInterfaces = NetworkInterface.getNetworkInterfaces();\n          while (netInterfaces.hasMoreElements()) {\n            NetworkInterface ni = netInterfaces.nextElement();\n            Enumeration<InetAddress> ips = ni.getInetAddresses();\n            while (ips.hasMoreElements()) {\n              InetAddress ip = ips.nextElement();\n              if (ip.isSiteLocalAddress()) {\n                hostaddress = ip.getHostAddress();\n              }\n            }\n          }\n        } catch (Exception e) {\n          SolrException.log(log,\n              \"Error while looking for a better host name than 127.0.0.1\", e);\n        }\n      }\n      host = hostaddress;\n    } else {\n      if (URLUtil.hasScheme(host)) {\n        host = URLUtil.removeScheme(host);\n      }\n    }\n\n    return host;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","fbcfc050b9f253136eaa5950b57248b2109eac11"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c560208bc8842ee884b76b08784ccb132f05b48":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1c560208bc8842ee884b76b08784ccb132f05b48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}