{"path":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testComplexNested().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testComplexNested().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testComplexNested().mjava","sourceNew":"  public void testComplexNested() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    // combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n    SpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n    SpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n    SpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n    SpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n    SpanQuery[]clauses = new SpanQuery[] {new PayloadNearQuery(new SpanQuery[] {q1,q2}, 0, true), new PayloadNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n    query = new PayloadNearQuery(clauses, 0, false);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    // should be only 1 hit - doc 999\n    assertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n    // the score should be 3 - the average of all the underlying payloads\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n  }\n\n","sourceOld":"  public void testComplexNested() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    // combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n    SpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n    SpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n    SpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n    SpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n    SpanQuery[]clauses = new SpanQuery[] {new PayloadNearQuery(new SpanQuery[] {q1,q2}, 0, true), new PayloadNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n    query = new PayloadNearQuery(clauses, 0, false);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    // should be only 1 hit - doc 999\n    assertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n    // the score should be 3 - the average of all the underlying payloads\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testComplexNested().mjava","sourceNew":null,"sourceOld":"  public void testComplexNested() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    // combine ordered and unordered spans with some nesting to make sure all payloads are counted\n\n    SpanQuery q1 = newPhraseQuery(\"field\", \"nine hundred\", true);\n    SpanQuery q2 = newPhraseQuery(\"field\", \"ninety nine\", true);\n    SpanQuery q3 = newPhraseQuery(\"field\", \"nine ninety\", false);\n    SpanQuery q4 = newPhraseQuery(\"field\", \"hundred nine\", false);\n    SpanQuery[]clauses = new SpanQuery[] {new PayloadNearQuery(new SpanQuery[] {q1,q2}, 0, true), new PayloadNearQuery(new SpanQuery[] {q3,q4}, 0, false)};\n    query = new PayloadNearQuery(clauses, 0, false);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    // should be only 1 hit - doc 999\n    assertTrue(\"should only be one hit\", hits.scoreDocs.length == 1);\n    // the score should be 3 - the average of all the underlying payloads\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}