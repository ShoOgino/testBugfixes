{"path":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}