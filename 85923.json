{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader, field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["382fe3a6ca9745891afebda9b9a57cc158305545","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"382fe3a6ca9745891afebda9b9a57cc158305545":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}