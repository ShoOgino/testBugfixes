{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNullLockFactory().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void xxxtestNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void xxxtestNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}