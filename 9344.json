{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#addBeans(String,Iterator[#]).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#addBeans(String,Iterator[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#addBeans(Iterator[#]).mjava","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   *\n   * @param collection the Solr collection to add the documents to\n   * @param beanIterator\n   *          the iterator which returns Beans\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} from the server\n   *\n   * @throws IOException         if there is a communication error with the server\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse addBeans(String collection, final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n\n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n\n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n\n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this, collection);\n  }\n\n","sourceOld":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#addBeans(String,Iterator[#]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   *\n   * @param collection the Solr collection to add the documents to\n   * @param beanIterator\n   *          the iterator which returns Beans\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} from the server\n   *\n   * @throws IOException         if there is a communication error with the server\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse addBeans(String collection, final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n\n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n\n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n\n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this, collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}