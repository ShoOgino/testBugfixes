{"path":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","commits":[{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"/dev/null","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/CheckBackupStatus#fetchStatus().mjava","sourceNew":null,"sourceOld":"  public void fetchStatus() throws IOException {\n    String masterUrl = client.getBaseURL() + \"/\"  + coreName + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n    response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n    if(pException.matcher(response).find()) {\n      fail(\"Failed to create backup\");\n    }\n    if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n      Matcher m = p.matcher(response);\n      if(!m.find()) {\n        fail(\"could not find the completed timestamp in response.\");\n      }\n      if (lastBackupTimestamp != null) {\n        backupTimestamp = m.group(1);\n        if (backupTimestamp.equals(lastBackupTimestamp)) {\n          success = true;\n        }\n      } else {\n        success = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a52341299179de5479672f7cf518bf4b173f34b3"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["71475d88ea48a7d9a847f209667255318b3ea4c7","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}