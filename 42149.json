{"path":"solr/core/src/java/org/apache/solr/util/hll/BitVector#setRegister(long,long).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BitVector#setRegister(long,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param registerIndex the index of the register whose value is to be set.\n     *        This cannot be negative\n     * @param value the value to set in the register\n     * @see #getRegister(long)\n     * @see #setMaxRegister(long, long)\n     */\n    // NOTE:  if this changes then setMaxRegister() must change\n    public void setRegister(final long registerIndex, final long value) {\n        final long bitIndex = registerIndex * registerWidth;\n        final int firstWordIndex = (int)(bitIndex >>> LOG2_BITS_PER_WORD)/*aka (bitIndex / BITS_PER_WORD)*/;\n        final int secondWordIndex = (int)((bitIndex + registerWidth - 1) >>> LOG2_BITS_PER_WORD)/*see above*/;\n        final int bitRemainder = (int)(bitIndex & BITS_PER_WORD_MASK)/*aka (bitIndex % BITS_PER_WORD)*/;\n\n        final long words[] = this.words/*for convenience/performance*/;\n        if(firstWordIndex == secondWordIndex) {\n            // clear then set\n            words[firstWordIndex] &= ~(registerMask << bitRemainder);\n            words[firstWordIndex] |= (value << bitRemainder);\n        } else {/*register spans words*/\n            // clear then set each partial word\n            words[firstWordIndex] &= (1L << bitRemainder) - 1;\n            words[firstWordIndex] |= (value << bitRemainder);\n\n            words[secondWordIndex] &= ~(registerMask >>> (BITS_PER_WORD - bitRemainder));\n            words[secondWordIndex] |= (value >>> (BITS_PER_WORD - bitRemainder));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BitVector#setRegister(long,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param registerIndex the index of the register whose value is to be set.\n     *        This cannot be negative\n     * @param value the value to set in the register\n     * @see #getRegister(long)\n     * @see #setMaxRegister(long, long)\n     */\n    // NOTE:  if this changes then setMaxRegister() must change\n    public void setRegister(final long registerIndex, final long value) {\n        final long bitIndex = registerIndex * registerWidth;\n        final int firstWordIndex = (int)(bitIndex >>> LOG2_BITS_PER_WORD)/*aka (bitIndex / BITS_PER_WORD)*/;\n        final int secondWordIndex = (int)((bitIndex + registerWidth - 1) >>> LOG2_BITS_PER_WORD)/*see above*/;\n        final int bitRemainder = (int)(bitIndex & BITS_PER_WORD_MASK)/*aka (bitIndex % BITS_PER_WORD)*/;\n\n        final long words[] = this.words/*for convenience/performance*/;\n        if(firstWordIndex == secondWordIndex) {\n            // clear then set\n            words[firstWordIndex] &= ~(registerMask << bitRemainder);\n            words[firstWordIndex] |= (value << bitRemainder);\n        } else {/*register spans words*/\n            // clear then set each partial word\n            words[firstWordIndex] &= (1L << bitRemainder) - 1;\n            words[firstWordIndex] |= (value << bitRemainder);\n\n            words[secondWordIndex] &= ~(registerMask >>> (BITS_PER_WORD - bitRemainder));\n            words[secondWordIndex] |= (value >>> (BITS_PER_WORD - bitRemainder));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}