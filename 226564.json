{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","commits":[{"id":"0a20a867de92263c94258f9778db64a5efc7956d","date":1424955868,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#checkValid(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Boolean checkValid(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return null;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return Boolean.TRUE;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return Boolean.FALSE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"/dev/null","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(coll, nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(coll, nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(coll, nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"wrong version from client {}!={} \", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singletonMap(coll, nu));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(coll, nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singletonMap(coll, nu));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        updateWatchedCollection(coll, nu);\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      LOG.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    LOG.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n\n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n\n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n\n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n    \n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n    \n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    \n    return collection.getZNodeVersion();\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n\n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n\n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n\n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1 ;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n\n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n\n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n\n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#compareStateVersions(String,int).mjava","sourceNew":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      }\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n\n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n    }\n\n    return collection.getZNodeVersion();\n  }\n\n","sourceOld":"  public Integer compareStateVersions(String coll, int version) {\n    DocCollection collection = clusterState.getCollectionOrNull(coll);\n    if (collection == null) return null;\n    if (collection.getZNodeVersion() < version) {\n      log.debug(\"Server older than client {}<{}\", collection.getZNodeVersion(), version);\n      DocCollection nu = getCollectionLive(this, coll);\n      if (nu == null) return -1;\n      if (nu.getZNodeVersion() > collection.getZNodeVersion()) {\n        if (updateWatchedCollection(coll, nu)) {\n          synchronized (getUpdateLock()) {\n            constructState(Collections.singleton(coll));\n          }\n        }\n        collection = nu;\n      }\n    }\n\n    if (collection.getZNodeVersion() == version) {\n      return null;\n    }\n\n    log.debug(\"Wrong version from client [{}]!=[{}]\", version, collection.getZNodeVersion());\n\n    return collection.getZNodeVersion();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"0a20a867de92263c94258f9778db64a5efc7956d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["0a20a867de92263c94258f9778db64a5efc7956d"],"e92ecc804db94989e3c224b898b8dc978ebb584f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a20a867de92263c94258f9778db64a5efc7956d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a20a867de92263c94258f9778db64a5efc7956d":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"e92ecc804db94989e3c224b898b8dc978ebb584f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2668c99990e4c94a78bac005aa682b7c5986d23a":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a20a867de92263c94258f9778db64a5efc7956d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}