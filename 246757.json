{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session, double[] deviation) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session, deviation);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n//      if (!executeInStrictMode && !clause.strict) {\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n//      }\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"708ea19ea208d4e9fdbf203794aabf4fd2f8afed","date":1541319836,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n//      if (!executeInStrictMode && !clause.strict) {\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n//      }\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","bugFix":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    session.violations = errors;\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5028c6838e2e49cb9da1cf70269851c049f107a","date":1584984100,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().getClusterPreferences(), session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    session.violations = errors;\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    session.violations = errors;\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","sourceNew":null,"sourceOld":"  List<Violation> testChangedMatrix(boolean executeInStrictMode, Policy.Session session) {\n    if (this.deviations != null) this.lastBestDeviation = this.deviations;\n    this.deviations = null;\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().getClusterPreferences(), session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      Clause originalClause = clause.derivedFrom == null ? clause : clause.derivedFrom;\n      if (this.deviations == null) this.deviations = new LinkedHashMap<>();\n      this.deviations.put(originalClause, new double[1]);\n      List<Violation> errs = clause.test(session, this.deviations == null ? null : this.deviations.get(originalClause));\n      if (!errs.isEmpty() &&\n          (executeInStrictMode || clause.strict)) errors.addAll(errs);\n    }\n    session.violations = errors;\n    if (!errors.isEmpty()) deviations = null;\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"],"3f504512a03d978990cbff30db0522b354e846db":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["16a22f8085bb46850c91784e94f7714345011404"],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","16a22f8085bb46850c91784e94f7714345011404","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}