{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params,\n                                       ShardHandler shardHandler, String asyncId,\n                                       Map<String, String> requestMap,\n                                       String adminPath, ZkStateReader zkStateReader\n  ) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params,\n                                       ShardHandler shardHandler, String asyncId,\n                                       Map<String, String> requestMap,\n                                       String adminPath, ZkStateReader zkStateReader\n  ) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"000dcc6e56226b0a3c43074087b6f84860ff780e","date":1457655644,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"000dcc6e56226b0a3c43074087b6f84860ff780e":["3bbb741690cdafda7f1f7549c26351c912917a69"],"b94236357aaa22b76c10629851fe4e376e0cea82":["000dcc6e56226b0a3c43074087b6f84860ff780e","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3bbb741690cdafda7f1f7549c26351c912917a69":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["000dcc6e56226b0a3c43074087b6f84860ff780e"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"000dcc6e56226b0a3c43074087b6f84860ff780e":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bbb741690cdafda7f1f7549c26351c912917a69":["000dcc6e56226b0a3c43074087b6f84860ff780e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["3bbb741690cdafda7f1f7549c26351c912917a69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}