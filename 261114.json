{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Assert#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Assert#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String key = params.get(\"key\");\n      Condition condition = Condition.get(params.required().get(\"condition\"));\n      if (condition == null) {\n        throw new IOException(\"Invalid 'condition' in params: \" + params);\n      }\n      String expected = params.get(\"expected\");\n      if (condition != Condition.NOT_NULL && condition != Condition.NULL && expected == null) {\n        throw new IOException(\"'expected' param is required when condition is \" + condition);\n      }\n      Object value;\n      if (key != null) {\n        if (key.contains(\"/\")) {\n          value = Utils.getObjectByPath(scenario.context, true, key);\n        } else {\n          value = scenario.context.get(key);\n        }\n      } else {\n        value = params.required().get(\"value\");\n      }\n      switch (condition) {\n        case NULL:\n          if (value != null) {\n            throw new IOException(\"expected value should be null but was '\" + value + \"'\");\n          }\n          break;\n        case NOT_NULL:\n          if (value == null) {\n            throw new IOException(\"expected value should not be null\");\n          }\n          break;\n        case EQUALS:\n          if (!expected.equals(String.valueOf(value))) {\n            throw new IOException(\"expected value is '\" + expected + \"' but actual value is '\" + value + \"'\");\n          }\n          break;\n        case NOT_EQUALS:\n          if (expected.equals(String.valueOf(value))) {\n            throw new IOException(\"expected value is '\" + expected + \"' and actual value is the same while it should be different\");\n          }\n          break;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Assert#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      String key = params.get(\"key\");\n      Condition condition = Condition.get(params.required().get(\"condition\"));\n      if (condition == null) {\n        throw new IOException(\"Invalid 'condition' in params: \" + params);\n      }\n      String expected = params.get(\"expected\");\n      if (condition != Condition.NOT_NULL && condition != Condition.NULL && expected == null) {\n        throw new IOException(\"'expected' param is required when condition is \" + condition);\n      }\n      Object value;\n      if (key != null) {\n        if (key.contains(\"/\")) {\n          value = Utils.getObjectByPath(scenario.context, true, key);\n        } else {\n          value = scenario.context.get(key);\n        }\n      } else {\n        value = params.required().get(\"value\");\n      }\n      switch (condition) {\n        case NULL:\n          if (value != null) {\n            throw new IOException(\"expected value should be null but was '\" + value + \"'\");\n          }\n          break;\n        case NOT_NULL:\n          if (value == null) {\n            throw new IOException(\"expected value should not be null\");\n          }\n          break;\n        case EQUALS:\n          if (!expected.equals(String.valueOf(value))) {\n            throw new IOException(\"expected value is '\" + expected + \"' but actual value is '\" + value + \"'\");\n          }\n          break;\n        case NOT_EQUALS:\n          if (expected.equals(String.valueOf(value))) {\n            throw new IOException(\"expected value is '\" + expected + \"' and actual value is the same while it should be different\");\n          }\n          break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}