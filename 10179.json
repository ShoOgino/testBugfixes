{"path":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    Collection<String> fieldNames = pr.getFieldNames(IndexReader.FieldOption.ALL);\n    assertEquals(4, fieldNames.size());\n    assertTrue(fieldNames.contains(\"f1\"));\n    assertTrue(fieldNames.contains(\"f2\"));\n    assertTrue(fieldNames.contains(\"f3\"));\n    assertTrue(fieldNames.contains(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92","date":1327858596,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader.Builder()\n      .add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)))\n      .add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)))\n      .build();\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelAtomicReader pr = new ParallelAtomicReader.Builder()\n      .add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)))\n      .add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)))\n      .build();\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testFieldNames().mjava","sourceNew":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testFieldNames() throws Exception {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n    FieldInfos fieldInfos = pr.getFieldInfos();\n    assertEquals(4, fieldInfos.size());\n    assertNotNull(fieldInfos.fieldInfo(\"f1\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f2\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f3\"));\n    assertNotNull(fieldInfos.fieldInfo(\"f4\"));\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92","5cab9a86bd67202d20b6adc463008c8e982b070a"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}