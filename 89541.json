{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        scorer.score(hcw);\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, false);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9900b2c2df4909dc735d4042e21e453057db47","date":1246040088,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        scorer.score(hcw);\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a9900b2c2df4909dc735d4042e21e453057db47":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["0a9900b2c2df4909dc735d4042e21e453057db47"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"0a9900b2c2df4909dc735d4042e21e453057db47":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a9900b2c2df4909dc735d4042e21e453057db47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}