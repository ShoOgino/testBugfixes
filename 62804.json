{"path":"lucene/src/test/org/apache/lucene/search/TestNGramPhraseQuery#testRewrite().mjava","commits":[{"id":"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c","date":1316005300,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNGramPhraseQuery#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite() throws Exception {\n    // bi-gram test ABC => AB/BC => AB/BC\n    PhraseQuery pq1 = new NGramPhraseQuery(2);\n    pq1.add(new Term(\"f\", \"AB\"));\n    pq1.add(new Term(\"f\", \"BC\"));\n    \n    Query q = pq1.rewrite(reader);\n    assertTrue(q instanceof NGramPhraseQuery);\n    assertSame(pq1, q);\n    pq1 = (NGramPhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"BC\")}, pq1.getTerms());\n    assertArrayEquals(new int[]{0, 1}, pq1.getPositions());\n\n    // bi-gram test ABCD => AB/BC/CD => AB//CD\n    PhraseQuery pq2 = new NGramPhraseQuery(2);\n    pq2.add(new Term(\"f\", \"AB\"));\n    pq2.add(new Term(\"f\", \"BC\"));\n    pq2.add(new Term(\"f\", \"CD\"));\n    \n    q = pq2.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq2, q);\n    pq2 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"CD\")}, pq2.getTerms());\n    assertArrayEquals(new int[]{0, 2}, pq2.getPositions());\n\n    // tri-gram test ABCDEFGH => ABC/BCD/CDE/DEF/EFG/FGH => ABC///DEF//FGH\n    PhraseQuery pq3 = new NGramPhraseQuery(3);\n    pq3.add(new Term(\"f\", \"ABC\"));\n    pq3.add(new Term(\"f\", \"BCD\"));\n    pq3.add(new Term(\"f\", \"CDE\"));\n    pq3.add(new Term(\"f\", \"DEF\"));\n    pq3.add(new Term(\"f\", \"EFG\"));\n    pq3.add(new Term(\"f\", \"FGH\"));\n    \n    q = pq3.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq3, q);\n    pq3 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"ABC\"), new Term(\"f\", \"DEF\"), new Term(\"f\", \"FGH\")}, pq3.getTerms());\n    assertArrayEquals(new int[]{0, 3, 5}, pq3.getPositions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNGramPhraseQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNGramPhraseQuery#testRewrite().mjava","sourceNew":"  public void testRewrite() throws Exception {\n    // bi-gram test ABC => AB/BC => AB/BC\n    PhraseQuery pq1 = new NGramPhraseQuery(2);\n    pq1.add(new Term(\"f\", \"AB\"));\n    pq1.add(new Term(\"f\", \"BC\"));\n    \n    Query q = pq1.rewrite(reader);\n    assertTrue(q instanceof NGramPhraseQuery);\n    assertSame(pq1, q);\n    pq1 = (NGramPhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"BC\")}, pq1.getTerms());\n    assertArrayEquals(new int[]{0, 1}, pq1.getPositions());\n\n    // bi-gram test ABCD => AB/BC/CD => AB//CD\n    PhraseQuery pq2 = new NGramPhraseQuery(2);\n    pq2.add(new Term(\"f\", \"AB\"));\n    pq2.add(new Term(\"f\", \"BC\"));\n    pq2.add(new Term(\"f\", \"CD\"));\n    \n    q = pq2.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq2, q);\n    pq2 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"CD\")}, pq2.getTerms());\n    assertArrayEquals(new int[]{0, 2}, pq2.getPositions());\n\n    // tri-gram test ABCDEFGH => ABC/BCD/CDE/DEF/EFG/FGH => ABC///DEF//FGH\n    PhraseQuery pq3 = new NGramPhraseQuery(3);\n    pq3.add(new Term(\"f\", \"ABC\"));\n    pq3.add(new Term(\"f\", \"BCD\"));\n    pq3.add(new Term(\"f\", \"CDE\"));\n    pq3.add(new Term(\"f\", \"DEF\"));\n    pq3.add(new Term(\"f\", \"EFG\"));\n    pq3.add(new Term(\"f\", \"FGH\"));\n    \n    q = pq3.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq3, q);\n    pq3 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"ABC\"), new Term(\"f\", \"DEF\"), new Term(\"f\", \"FGH\")}, pq3.getTerms());\n    assertArrayEquals(new int[]{0, 3, 5}, pq3.getPositions());\n  }\n\n","sourceOld":"  public void testRewrite() throws Exception {\n    // bi-gram test ABC => AB/BC => AB/BC\n    PhraseQuery pq1 = new NGramPhraseQuery(2);\n    pq1.add(new Term(\"f\", \"AB\"));\n    pq1.add(new Term(\"f\", \"BC\"));\n    \n    Query q = pq1.rewrite(reader);\n    assertTrue(q instanceof NGramPhraseQuery);\n    assertSame(pq1, q);\n    pq1 = (NGramPhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"BC\")}, pq1.getTerms());\n    assertArrayEquals(new int[]{0, 1}, pq1.getPositions());\n\n    // bi-gram test ABCD => AB/BC/CD => AB//CD\n    PhraseQuery pq2 = new NGramPhraseQuery(2);\n    pq2.add(new Term(\"f\", \"AB\"));\n    pq2.add(new Term(\"f\", \"BC\"));\n    pq2.add(new Term(\"f\", \"CD\"));\n    \n    q = pq2.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq2, q);\n    pq2 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"AB\"), new Term(\"f\", \"CD\")}, pq2.getTerms());\n    assertArrayEquals(new int[]{0, 2}, pq2.getPositions());\n\n    // tri-gram test ABCDEFGH => ABC/BCD/CDE/DEF/EFG/FGH => ABC///DEF//FGH\n    PhraseQuery pq3 = new NGramPhraseQuery(3);\n    pq3.add(new Term(\"f\", \"ABC\"));\n    pq3.add(new Term(\"f\", \"BCD\"));\n    pq3.add(new Term(\"f\", \"CDE\"));\n    pq3.add(new Term(\"f\", \"DEF\"));\n    pq3.add(new Term(\"f\", \"EFG\"));\n    pq3.add(new Term(\"f\", \"FGH\"));\n    \n    q = pq3.rewrite(reader);\n    assertTrue(q instanceof PhraseQuery);\n    assertNotSame(pq3, q);\n    pq3 = (PhraseQuery)q;\n    assertArrayEquals(new Term[]{new Term(\"f\", \"ABC\"), new Term(\"f\", \"DEF\"), new Term(\"f\", \"FGH\")}, pq3.getTerms());\n    assertArrayEquals(new int[]{0, 3, 5}, pq3.getPositions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c"],"51f379cdd57cfa9bb352cbd1a0baedf4fec32a8c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}