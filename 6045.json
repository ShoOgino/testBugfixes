{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c95d2d1a0288835788dbffb1b73ab5852c7154","date":1544457778,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30004ef8212d169b5fc7d098ec7aa299c8b5f060","date":1551998457,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n        triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n\n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long) finishedEvent.getFieldValue(\"event.time_l\") - (Long) startedEvent.getFieldValue(\"event.time_l\");\n    if (log.isInfoEnabled()) {\n      log.info(\"#### System stabilized after {} ms\", TimeUnit.NANOSECONDS.toMillis(delta));\n    }\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n        cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n               triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    log.info(\"Ready after \" + CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      \n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n               cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n        triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n\n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long) finishedEvent.getFieldValue(\"event.time_l\") - (Long) startedEvent.getFieldValue(\"event.time_l\");\n    if (log.isInfoEnabled()) {\n      log.info(\"#### System stabilized after {} ms\", TimeUnit.NANOSECONDS.toMillis(delta));\n    }\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n        cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n        triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n\n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long) finishedEvent.getFieldValue(\"event.time_l\") - (Long) startedEvent.getFieldValue(\"event.time_l\");\n    if (log.isInfoEnabled()) {\n      log.info(\"#### System stabilized after {} ms\", TimeUnit.NANOSECONDS.toMillis(delta));\n    }\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n        cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  // impossible to complete due to the slowness of policy calculations\n  @AwaitsFix( bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14275\")\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      ( \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n    }\n    // wait until at least one event is generated\n    assertTrue(\"Trigger did not start even after await()ing an excessive amount of time\",\n        triggerStartedLatch.await(60, TimeUnit.SECONDS));\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      final int started = triggerStartedCount.get();\n      final int finished = triggerFinishedCount.get();\n      log.info(\"started={} =?= finished={}\", started, finished);\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        log.info(\"started == finished: {} == {}\", started, finished);\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"1st check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    assertTrue(\"no MOVEREPLICA ops?\", lastNumOps > 0);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Ready after {} ms\", CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));\n    }\n\n    int count = 1000;\n    SolrInputDocument finishedEvent = null;\n    lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    log.info(\"2nd check: lastNumOps (MOVEREPLICA) = {}\", lastNumOps);\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n\n      if (cluster.simGetOpCount(\"MOVEREPLICA\") < 2) {\n        log.info(\"MOVEREPLICA < 2\");\n        continue;\n      }\n      \n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            log.info(\"finishedEvent = {}\", finishedEvent);\n            break;\n          }\n        }\n        log.info(\"breaking because currentNumOps == lastNumOps == {}\", currentNumOps);\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertNotNull(\"did not finish processing changes\", finishedEvent);\n    long delta = (Long) finishedEvent.getFieldValue(\"event.time_l\") - (Long) startedEvent.getFieldValue(\"event.time_l\");\n    if (log.isInfoEnabled()) {\n      log.info(\"#### System stabilized after {} ms\", TimeUnit.NANOSECONDS.toMillis(delta));\n    }\n    assertTrue(\"unexpected number of MOVEREPLICA ops: \" + cluster.simGetOpCount(\"MOVEREPLICA\"),\n        cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"967a6347853ee35b432c965743a902d42f24e697":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"89948af0461fead48f44ba8fb7866f107ce83f22":["967a6347853ee35b432c965743a902d42f24e697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["967a6347853ee35b432c965743a902d42f24e697"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}