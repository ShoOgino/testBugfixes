{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   *\n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser(callback);\n    QueryRequest req = new QueryRequest(params);\n    req.setStreamingResponseCallback(callback);\n    req.setResponseParser(parser);\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will\n   * send events for each Document rather then add them to the QueryResponse.\n   *\n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return\n   * the results in the QueryResponse.\n   *\n   * @param params  an object holding all key/value parameters to send along the request\n   * @param callback the callback to stream results to\n   *\n   * @return a {@link org.apache.solr.client.solrj.response.QueryResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback)\n      throws SolrServerException, IOException {\n    return queryAndStreamResponse(null, params, callback);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   *\n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser(callback);\n    QueryRequest req = new QueryRequest(params);\n    req.setStreamingResponseCallback(callback);\n    req.setResponseParser(parser);\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will\n   * send events for each Document rather then add them to the QueryResponse.\n   *\n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return\n   * the results in the QueryResponse.\n   *\n   * @param params  an object holding all key/value parameters to send along the request\n   * @param callback the callback to stream results to\n   *\n   * @return a {@link org.apache.solr.client.solrj.response.QueryResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback)\n      throws SolrServerException, IOException {\n    return queryAndStreamResponse(null, params, callback);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   *\n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser(callback);\n    QueryRequest req = new QueryRequest(params);\n    req.setStreamingResponseCallback(callback);\n    req.setResponseParser(parser);\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}