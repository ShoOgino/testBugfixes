{"path":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRangeQueryRequiresTO().mjava","commits":[{"id":"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3","date":1494775882,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRangeQueryRequiresTO().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryRequiresTO() throws Exception {\n    assertEquals(\"{a TO b}\", QParser.getParser(\"{A TO B}\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"[a TO b}\", QParser.getParser(\"[A TO B}\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"{a TO b]\", QParser.getParser(\"{A TO B]\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"[a TO b]\", QParser.getParser(\"[A TO B]\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n\n    // \" TO \" is required between range endpoints\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A B]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A B]\", req(\"df\", \"text\")).getQuery());\n\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{TO B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[TO B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{TO B]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[TO B]\", req(\"df\", \"text\")).getQuery());\n\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A TO}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A TO}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A TO]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A TO]\", req(\"df\", \"text\")).getQuery());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#testRangeQueryRequiresTO().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryRequiresTO() throws Exception {\n    assertEquals(\"{a TO b}\", QParser.getParser(\"{A TO B}\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"[a TO b}\", QParser.getParser(\"[A TO B}\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"{a TO b]\", QParser.getParser(\"{A TO B]\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n    assertEquals(\"[a TO b]\", QParser.getParser(\"[A TO B]\", req(\"df\", \"text\")).getQuery().toString(\"text\"));\n\n    // \" TO \" is required between range endpoints\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A B]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A B]\", req(\"df\", \"text\")).getQuery());\n\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{TO B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[TO B}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{TO B]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[TO B]\", req(\"df\", \"text\")).getQuery());\n\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A TO}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A TO}\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"{A TO]\", req(\"df\", \"text\")).getQuery());\n    expectThrows(SyntaxError.class, () -> QParser.getParser(\"[A TO]\", req(\"df\", \"text\")).getQuery());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}