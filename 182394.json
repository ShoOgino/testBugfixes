{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","commits":[{"id":"d8da4c29a4aed72a95d20b328cb2140a85621cdd","date":1459513936,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n      assertTrue(latEnc <= lat);\n      assertTrue(lonEnc <= lon);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","sourceNew":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n    }\n  }\n\n","sourceOld":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n      assertTrue(latEnc <= lat);\n      assertTrue(lonEnc <= lon);\n    }\n  }\n\n","bugFix":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6e28813bd3665a7c29cc07d0f32db701300168","date":1459966694,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","sourceNew":null,"sourceOld":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeRoundsDown().mjava","sourceNew":null,"sourceOld":"  /** make sure values always go down: this is important for edge case consistency */\n  public void testEncodeDecodeRoundsDown() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      final double latBase = GeoTestUtil.nextLatitude();\n      final double lonBase = GeoTestUtil.nextLongitude();\n\n      // test above the value\n      double lat = latBase;\n      double lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.min(90, Math.nextUp(lat));\n        lon = Math.min(180, Math.nextUp(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n\n      // test below the value\n      lat = latBase;\n      lon = lonBase;\n      for (int i = 0; i < 1000; i++) {\n        lat = Math.max(-90, Math.nextDown(lat));\n        lon = Math.max(-180, Math.nextDown(lon));\n        double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n        double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n        assertTrue(latEnc <= lat);\n        assertTrue(lonEnc <= lon);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6284684320a9808c41a5e43de958b2da22f89bd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","bd6e28813bd3665a7c29cc07d0f32db701300168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd6e28813bd3665a7c29cc07d0f32db701300168":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6284684320a9808c41a5e43de958b2da22f89bd"]},"commit2Childs":{"b6284684320a9808c41a5e43de958b2da22f89bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"bd6e28813bd3665a7c29cc07d0f32db701300168":["b6284684320a9808c41a5e43de958b2da22f89bd"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["b6284684320a9808c41a5e43de958b2da22f89bd","bd6e28813bd3665a7c29cc07d0f32db701300168"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}