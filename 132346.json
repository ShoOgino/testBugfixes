{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      boolean success = false;\n      try {\n        for(String field : fields) {\n\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                    doPackFST, acceptableOverheadRatio);\n\n          FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n          long sumTotalTermFreq = 0;\n          long sumDocFreq = 0;\n          DocsEnum docsEnum = null;\n          DocsAndPositionsEnum posEnum = null;\n          int enumFlags;\n\n          IndexOptions indexOptions = fieldInfo.getIndexOptions();\n          boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n          boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n          boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n          boolean writePayloads = fieldInfo.hasPayloads();\n\n          if (writeFreqs == false) {\n            enumFlags = 0;\n          } else if (writePositions == false) {\n            enumFlags = DocsEnum.FLAG_FREQS;\n          } else if (writeOffsets == false) {\n            if (writePayloads) {\n              enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n            } else {\n              enumFlags = 0;\n            }\n          } else {\n            if (writePayloads) {\n              enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n            } else {\n              enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n          }\n\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            termsWriter.postingsWriter.reset();\n\n            if (writePositions) {\n              posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n              docsEnum = posEnum;\n            } else {\n              docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n              posEnum = null;\n            }\n\n            int docFreq = 0;\n            long totalTermFreq = 0;\n            while (true) {\n              int docID = docsEnum.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              docsSeen.set(docID);\n              docFreq++;\n\n              int freq;\n              if (writeFreqs) {\n                freq = docsEnum.freq();\n                totalTermFreq += freq;\n              } else {\n                freq = -1;\n              }\n\n              termsWriter.postingsWriter.startDoc(docID, freq);\n              if (writePositions) {\n                for (int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                  int startOffset;\n                  int endOffset;\n                  if (writeOffsets) {\n                    startOffset = posEnum.startOffset();\n                    endOffset = posEnum.endOffset();\n                  } else {\n                    startOffset = -1;\n                    endOffset = -1;\n                  }\n                  termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n                }\n              }\n            }\n            termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n            sumDocFreq += docFreq;\n            sumTotalTermFreq += totalTermFreq;\n          }\n\n          termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(this);\n        } else {\n          IOUtils.closeWhileHandlingException(this);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = DocsEnum.FLAG_FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n          } else {\n            enumFlags = 0;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n          } else {\n            enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n            docsEnum = posEnum;\n          } else {\n            docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = docsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      boolean success = false;\n      try {\n        for(String field : fields) {\n\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                    doPackFST, acceptableOverheadRatio);\n\n          FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n          long sumTotalTermFreq = 0;\n          long sumDocFreq = 0;\n          DocsEnum docsEnum = null;\n          DocsAndPositionsEnum posEnum = null;\n          int enumFlags;\n\n          IndexOptions indexOptions = fieldInfo.getIndexOptions();\n          boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n          boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n          boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n          boolean writePayloads = fieldInfo.hasPayloads();\n\n          if (writeFreqs == false) {\n            enumFlags = 0;\n          } else if (writePositions == false) {\n            enumFlags = DocsEnum.FLAG_FREQS;\n          } else if (writeOffsets == false) {\n            if (writePayloads) {\n              enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n            } else {\n              enumFlags = 0;\n            }\n          } else {\n            if (writePayloads) {\n              enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n            } else {\n              enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n            }\n          }\n\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            termsWriter.postingsWriter.reset();\n\n            if (writePositions) {\n              posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n              docsEnum = posEnum;\n            } else {\n              docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n              posEnum = null;\n            }\n\n            int docFreq = 0;\n            long totalTermFreq = 0;\n            while (true) {\n              int docID = docsEnum.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              docsSeen.set(docID);\n              docFreq++;\n\n              int freq;\n              if (writeFreqs) {\n                freq = docsEnum.freq();\n                totalTermFreq += freq;\n              } else {\n                freq = -1;\n              }\n\n              termsWriter.postingsWriter.startDoc(docID, freq);\n              if (writePositions) {\n                for (int i=0;i<freq;i++) {\n                  int pos = posEnum.nextPosition();\n                  BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                  int startOffset;\n                  int endOffset;\n                  if (writeOffsets) {\n                    startOffset = posEnum.startOffset();\n                    endOffset = posEnum.endOffset();\n                  } else {\n                    startOffset = -1;\n                    endOffset = -1;\n                  }\n                  termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n                }\n              }\n            }\n            termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n            sumDocFreq += docFreq;\n            sumTotalTermFreq += totalTermFreq;\n          }\n\n          termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(this);\n        } else {\n          IOUtils.closeWhileHandlingException(this);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FLAG_FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.FLAG_PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.FLAG_POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.FLAG_PAYLOADS | PostingsEnum.FLAG_OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.FLAG_OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        DocsEnum docsEnum = null;\n        DocsAndPositionsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = DocsEnum.FLAG_FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS;\n          } else {\n            enumFlags = 0;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = DocsAndPositionsEnum.FLAG_PAYLOADS | DocsAndPositionsEnum.FLAG_OFFSETS;\n          } else {\n            enumFlags = DocsAndPositionsEnum.FLAG_OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.docsAndPositions(null, posEnum, enumFlags);\n            docsEnum = posEnum;\n          } else {\n            docsEnum = termsEnum.docs(null, docsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = docsEnum.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = docsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FLAG_FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.FLAG_PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.FLAG_POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.FLAG_PAYLOADS | PostingsEnum.FLAG_OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.FLAG_OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.getDocCount());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(null, posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(null, postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo,\n                                                  doPackFST, acceptableOverheadRatio);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"6244579a467d5f2673ac98265d74bddbea1a8114":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["0f4464508ee83288c8c4585b533f9faaa93aa314","6244579a467d5f2673ac98265d74bddbea1a8114"],"51f5280f31484820499077f41fcdfe92d527d9dc":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","b0267c69e2456a3477a1ad785723f2135da3117e"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b06445ae1731e049327712db0454e5643ca9b7fe":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["6244579a467d5f2673ac98265d74bddbea1a8114"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"b0267c69e2456a3477a1ad785723f2135da3117e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","622a708571e534680618b3c5e0c28ac539a47776"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}