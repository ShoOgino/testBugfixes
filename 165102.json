{"path":"backwards/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMatchAllDocsQuery#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n\n    // change norm & retest\n    ir.setNorm(0, \"key\", 400f);\n    normsQuery = new MatchAllDocsQuery(\"key\");\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[1].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[2].doc).get(\"key\"));\n    \n    // some artificial queries to trigger the use of skipTo():\n    \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n\n    bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), BooleanClause.Occur.MUST);\n    bq.add(new TermQuery(new Term(\"key\", \"three\")), BooleanClause.Occur.MUST);\n    hits = is.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // delete a document:\n    is.getIndexReader().deleteDocument(0);\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    // test parsable toString()\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"key\", analyzer);\n    hits = is.search(qp.parse(new MatchAllDocsQuery().toString()), null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test parsable toString() with non default boost\n    Query maq = new MatchAllDocsQuery();\n    maq.setBoost(2.3f);\n    Query pq = qp.parse(maq.toString());\n    hits = is.search(pq, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    \n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}