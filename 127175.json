{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","sourceNew":"  private Norms loadNorms(NormsEntry entry) throws IOException {\n    switch(entry.format) {\n      case CONST_COMPRESSED: {\n        final long v = entry.offset;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 8;\n          }\n\n          @Override\n          public String toString() {\n            return \"constant\";\n          }\n        };\n      }\n      case UNCOMPRESSED: {\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[entry.count];\n        data.readBytes(bytes, 0, bytes.length);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(bytes);\n          }\n\n          @Override\n          public String toString() {\n            return \"byte array\";\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return reader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(reader);\n          }\n\n          @Override\n          public String toString() {\n            return \"delta compressed\";\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        \n        if (bitsPerValue != 1 && bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED only supports bpv=1, bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        int size = 1 << bitsPerValue;\n        final byte decode[] = new byte[size];\n        final int ordsSize = data.readVInt();\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        for (int i = ordsSize; i < size; ++i) {\n          decode[i] = 0;\n        }\n\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(ordsReader);\n          }\n\n          @Override\n          public String toString() {\n            return \"table compressed\";\n          }\n        };\n      }\n      case INDIRECT: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        final int upperBound = entry.count-1;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int low = 0;\n            int high = upperBound;\n            while (low <= high) {\n              int mid = (low + high) >>> 1;\n              long doc = live.get(mid);\n              \n              if (doc < docID) {\n                low = mid + 1;\n              } else if (doc > docID) {\n                high = mid - 1;\n              } else {\n                return nestedInstance.get(mid);\n              }\n            }\n            return common;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", live));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"indirect\";\n          }\n        };\n      }\n      case PATCHED_BITSET: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, true);\n        final SparseFixedBitSet set = new SparseFixedBitSet(maxDoc);\n        for (int i = 0; i < live.size(); i++) {\n          int doc = (int) live.get(i);\n          set.set(doc);\n        }\n        Norms nestedInstance = loadNorms(entry.nested);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            if (set.get(docID)) {\n              return nestedInstance.get(docID);\n            } else {\n              return common;\n            }\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", set));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched bitset\";\n          }\n        };\n      }\n      case PATCHED_TABLE: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n\n        if (bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"PATCHED_TABLE only supports bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        final int size = 1 << bitsPerValue;\n        final int ordsSize = data.readVInt();\n        final byte decode[] = new byte[ordsSize];\n        assert ordsSize + 1 == size;\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        \n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        \n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int ord = (int)ordsReader.get(docID);\n            try {\n              // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...\n              return decode[ord];\n            } catch (IndexOutOfBoundsException e) {\n              return nestedInstance.get(docID);\n            }\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"common\", ordsReader));\n            children.add(Accountables.namedAccountable(\"uncommon\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched table\";\n          }\n        };\n      }\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Norms loadNorms(NormsEntry entry) throws IOException {\n    switch(entry.format) {\n      case CONST_COMPRESSED: {\n        final long v = entry.offset;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 8;\n          }\n\n          @Override\n          public String toString() {\n            return \"constant\";\n          }\n        };\n      }\n      case UNCOMPRESSED: {\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[entry.count];\n        data.readBytes(bytes, 0, bytes.length);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(bytes);\n          }\n\n          @Override\n          public String toString() {\n            return \"byte array\";\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return reader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(reader);\n          }\n\n          @Override\n          public String toString() {\n            return \"delta compressed\";\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        \n        if (bitsPerValue != 1 && bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED only supports bpv=1, bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        int size = 1 << bitsPerValue;\n        final byte decode[] = new byte[size];\n        final int ordsSize = data.readVInt();\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        for (int i = ordsSize; i < size; ++i) {\n          decode[i] = 0;\n        }\n\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(ordsReader);\n          }\n\n          @Override\n          public String toString() {\n            return \"table compressed\";\n          }\n        };\n      }\n      case INDIRECT: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        final int upperBound = entry.count-1;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int low = 0;\n            int high = upperBound;\n            while (low <= high) {\n              int mid = (low + high) >>> 1;\n              long doc = live.get(mid);\n              \n              if (doc < docID) {\n                low = mid + 1;\n              } else if (doc > docID) {\n                high = mid - 1;\n              } else {\n                return nestedInstance.get(mid);\n              }\n            }\n            return common;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", live));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"indirect\";\n          }\n        };\n      }\n      case PATCHED_BITSET: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, true);\n        final SparseFixedBitSet set = new SparseFixedBitSet(maxDoc);\n        for (int i = 0; i < live.size(); i++) {\n          int doc = (int) live.get(i);\n          set.set(doc);\n        }\n        Norms nestedInstance = loadNorms(entry.nested);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            if (set.get(docID)) {\n              return nestedInstance.get(docID);\n            } else {\n              return common;\n            }\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", set));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched bitset\";\n          }\n        };\n      }\n      case PATCHED_TABLE: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n\n        if (bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"PATCHED_TABLE only supports bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        final int size = 1 << bitsPerValue;\n        final int ordsSize = data.readVInt();\n        final byte decode[] = new byte[ordsSize];\n        assert ordsSize + 1 == size;\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        \n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        \n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int ord = (int)ordsReader.get(docID);\n            try {\n              // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...\n              return decode[ord];\n            } catch (IndexOutOfBoundsException e) {\n              return nestedInstance.get(docID);\n            }\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"common\", ordsReader));\n            children.add(Accountables.namedAccountable(\"uncommon\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched table\";\n          }\n        };\n      }\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","sourceNew":null,"sourceOld":"  private Norms loadNorms(NormsEntry entry) throws IOException {\n    switch(entry.format) {\n      case CONST_COMPRESSED: {\n        final long v = entry.offset;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 8;\n          }\n\n          @Override\n          public String toString() {\n            return \"constant\";\n          }\n        };\n      }\n      case UNCOMPRESSED: {\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[entry.count];\n        data.readBytes(bytes, 0, bytes.length);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(bytes);\n          }\n\n          @Override\n          public String toString() {\n            return \"byte array\";\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return reader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(reader);\n          }\n\n          @Override\n          public String toString() {\n            return \"delta compressed\";\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        \n        if (bitsPerValue != 1 && bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED only supports bpv=1, bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        int size = 1 << bitsPerValue;\n        final byte decode[] = new byte[size];\n        final int ordsSize = data.readVInt();\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        for (int i = ordsSize; i < size; ++i) {\n          decode[i] = 0;\n        }\n\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(ordsReader);\n          }\n\n          @Override\n          public String toString() {\n            return \"table compressed\";\n          }\n        };\n      }\n      case INDIRECT: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        final int upperBound = entry.count-1;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int low = 0;\n            int high = upperBound;\n            while (low <= high) {\n              int mid = (low + high) >>> 1;\n              long doc = live.get(mid);\n              \n              if (doc < docID) {\n                low = mid + 1;\n              } else if (doc > docID) {\n                high = mid - 1;\n              } else {\n                return nestedInstance.get(mid);\n              }\n            }\n            return common;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", live));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"indirect\";\n          }\n        };\n      }\n      case PATCHED_BITSET: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, true);\n        final SparseFixedBitSet set = new SparseFixedBitSet(maxDoc);\n        for (int i = 0; i < live.size(); i++) {\n          int doc = (int) live.get(i);\n          set.set(doc);\n        }\n        Norms nestedInstance = loadNorms(entry.nested);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            if (set.get(docID)) {\n              return nestedInstance.get(docID);\n            } else {\n              return common;\n            }\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", set));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched bitset\";\n          }\n        };\n      }\n      case PATCHED_TABLE: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n\n        if (bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"PATCHED_TABLE only supports bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        final int size = 1 << bitsPerValue;\n        final int ordsSize = data.readVInt();\n        final byte decode[] = new byte[ordsSize];\n        assert ordsSize + 1 == size;\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        \n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        \n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int ord = (int)ordsReader.get(docID);\n            try {\n              // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...\n              return decode[ord];\n            } catch (IndexOutOfBoundsException e) {\n              return nestedInstance.get(docID);\n            }\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"common\", ordsReader));\n            children.add(Accountables.namedAccountable(\"uncommon\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched table\";\n          }\n        };\n      }\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","sourceNew":null,"sourceOld":"  private Norms loadNorms(NormsEntry entry) throws IOException {\n    switch(entry.format) {\n      case CONST_COMPRESSED: {\n        final long v = entry.offset;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 8;\n          }\n\n          @Override\n          public String toString() {\n            return \"constant\";\n          }\n        };\n      }\n      case UNCOMPRESSED: {\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[entry.count];\n        data.readBytes(bytes, 0, bytes.length);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(bytes);\n          }\n\n          @Override\n          public String toString() {\n            return \"byte array\";\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return reader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(reader);\n          }\n\n          @Override\n          public String toString() {\n            return \"delta compressed\";\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        \n        if (bitsPerValue != 1 && bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED only supports bpv=1, bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        int size = 1 << bitsPerValue;\n        final byte decode[] = new byte[size];\n        final int ordsSize = data.readVInt();\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        for (int i = ordsSize; i < size; ++i) {\n          decode[i] = 0;\n        }\n\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(ordsReader);\n          }\n\n          @Override\n          public String toString() {\n            return \"table compressed\";\n          }\n        };\n      }\n      case INDIRECT: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        final int upperBound = entry.count-1;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int low = 0;\n            int high = upperBound;\n            while (low <= high) {\n              int mid = (low + high) >>> 1;\n              long doc = live.get(mid);\n              \n              if (doc < docID) {\n                low = mid + 1;\n              } else if (doc > docID) {\n                high = mid - 1;\n              } else {\n                return nestedInstance.get(mid);\n              }\n            }\n            return common;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", live));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"indirect\";\n          }\n        };\n      }\n      case PATCHED_BITSET: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, true);\n        final SparseFixedBitSet set = new SparseFixedBitSet(maxDoc);\n        for (int i = 0; i < live.size(); i++) {\n          int doc = (int) live.get(i);\n          set.set(doc);\n        }\n        Norms nestedInstance = loadNorms(entry.nested);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            if (set.get(docID)) {\n              return nestedInstance.get(docID);\n            } else {\n              return common;\n            }\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", set));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched bitset\";\n          }\n        };\n      }\n      case PATCHED_TABLE: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n\n        if (bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"PATCHED_TABLE only supports bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        final int size = 1 << bitsPerValue;\n        final int ordsSize = data.readVInt();\n        final byte decode[] = new byte[ordsSize];\n        assert ordsSize + 1 == size;\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        \n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        \n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int ord = (int)ordsReader.get(docID);\n            try {\n              // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...\n              return decode[ord];\n            } catch (IndexOutOfBoundsException e) {\n              return nestedInstance.get(docID);\n            }\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"common\", ordsReader));\n            children.add(Accountables.namedAccountable(\"uncommon\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched table\";\n          }\n        };\n      }\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#loadNorms(NormsEntry).mjava","sourceNew":null,"sourceOld":"  private Norms loadNorms(NormsEntry entry) throws IOException {\n    switch(entry.format) {\n      case CONST_COMPRESSED: {\n        final long v = entry.offset;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return 8;\n          }\n\n          @Override\n          public String toString() {\n            return \"constant\";\n          }\n        };\n      }\n      case UNCOMPRESSED: {\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[entry.count];\n        data.readBytes(bytes, 0, bytes.length);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(bytes);\n          }\n\n          @Override\n          public String toString() {\n            return \"byte array\";\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, entry.count, false);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return reader.get(docID);\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return reader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(reader);\n          }\n\n          @Override\n          public String toString() {\n            return \"delta compressed\";\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        \n        if (bitsPerValue != 1 && bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED only supports bpv=1, bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        int size = 1 << bitsPerValue;\n        final byte decode[] = new byte[size];\n        final int ordsSize = data.readVInt();\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        for (int i = ordsSize; i < size; ++i) {\n          decode[i] = 0;\n        }\n\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            return Collections.singleton(ordsReader);\n          }\n\n          @Override\n          public String toString() {\n            return \"table compressed\";\n          }\n        };\n      }\n      case INDIRECT: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, false);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        final int upperBound = entry.count-1;\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int low = 0;\n            int high = upperBound;\n            while (low <= high) {\n              int mid = (low + high) >>> 1;\n              long doc = live.get(mid);\n              \n              if (doc < docID) {\n                low = mid + 1;\n              } else if (doc > docID) {\n                high = mid - 1;\n              } else {\n                return nestedInstance.get(mid);\n              }\n            }\n            return common;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return live.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", live));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"indirect\";\n          }\n        };\n      }\n      case PATCHED_BITSET: {\n        data.seek(entry.offset);\n        final long common = data.readLong();\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        MonotonicBlockPackedReader live = MonotonicBlockPackedReader.of(data, packedIntsVersion, blockSize, entry.count, true);\n        final SparseFixedBitSet set = new SparseFixedBitSet(maxDoc);\n        for (int i = 0; i < live.size(); i++) {\n          int doc = (int) live.get(i);\n          set.set(doc);\n        }\n        Norms nestedInstance = loadNorms(entry.nested);\n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            if (set.get(docID)) {\n              return nestedInstance.get(docID);\n            } else {\n              return common;\n            }\n          }\n          \n          @Override\n          public long ramBytesUsed() {\n            return set.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"keys\", set));\n            children.add(Accountables.namedAccountable(\"values\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched bitset\";\n          }\n        };\n      }\n      case PATCHED_TABLE: {\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n\n        if (bitsPerValue != 2 && bitsPerValue != 4) {\n          throw new CorruptIndexException(\"PATCHED_TABLE only supports bpv=2 and bpv=4, got=\" + bitsPerValue, data);\n        }\n        final int size = 1 << bitsPerValue;\n        final int ordsSize = data.readVInt();\n        final byte decode[] = new byte[ordsSize];\n        assert ordsSize + 1 == size;\n        for (int i = 0; i < ordsSize; ++i) {\n          decode[i] = data.readByte();\n        }\n        \n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedIntsVersion, entry.count, bitsPerValue);\n        final Norms nestedInstance = loadNorms(entry.nested);\n        \n        return new Norms() {\n          @Override\n          public long get(int docID) {\n            int ord = (int)ordsReader.get(docID);\n            try {\n              // doing a try/catch here eliminates a seemingly unavoidable branch in hotspot...\n              return decode[ord];\n            } catch (IndexOutOfBoundsException e) {\n              return nestedInstance.get(docID);\n            }\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed() + nestedInstance.ramBytesUsed();\n          }\n\n          @Override\n          public Collection<Accountable> getChildResources() {\n            List<Accountable> children = new ArrayList<>();\n            children.add(Accountables.namedAccountable(\"common\", ordsReader));\n            children.add(Accountables.namedAccountable(\"uncommon\", nestedInstance));\n            return Collections.unmodifiableList(children);\n          }\n\n          @Override\n          public String toString() {\n            return \"patched table\";\n          }\n        };\n      }\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}