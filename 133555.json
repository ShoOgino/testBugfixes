{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","pathOld":"/dev/null","sourceNew":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, requestParams, nodeName, localHostAddress, sysPropsCacher, defaultRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","sourceNew":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    defaultShardPreferences = Optional.ofNullable(defaultShardPreferences).orElse(this.defaultShardPreferences);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp =\n          new NodePreferenceRulesComparator(\n              preferenceRules,\n              requestParams,\n              Optional.ofNullable(nodeName).orElse(this.nodeName),\n              Optional.ofNullable(localHostAddress).orElse(this.localHostAddress),\n              Optional.ofNullable(sysPropsCacher).orElse(this.sysPropsCacher),\n              defaultRltFactory,\n              stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","sourceOld":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, requestParams, nodeName, localHostAddress, sysPropsCacher, defaultRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","sourceNew":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    defaultShardPreferences = Optional.ofNullable(defaultShardPreferences).orElse(this.defaultShardPreferences);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp =\n          new NodePreferenceRulesComparator(\n              preferenceRules,\n              requestParams,\n              Optional.ofNullable(nodeName).orElse(this.nodeName),\n              Optional.ofNullable(localHostAddress).orElse(this.localHostAddress),\n              Optional.ofNullable(sysPropsCacher).orElse(this.sysPropsCacher),\n              defaultRltFactory,\n              stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","sourceOld":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, requestParams, nodeName, localHostAddress, sysPropsCacher, defaultRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58dba38d0c9777f300cca9dd3c150fe2d244742","date":1599661188,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator#getReplicaListTransformer(SolrParams,String,String,String,NodesSysPropsCacher).mjava","sourceNew":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    defaultShardPreferences = Objects.requireNonNullElse(defaultShardPreferences, this.defaultShardPreferences);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp =\n          new NodePreferenceRulesComparator(\n              preferenceRules,\n              requestParams,\n              nodeName != null ? nodeName : this.nodeName, // could be still null\n              localHostAddress != null ? localHostAddress : this.localHostAddress, // could still be null\n              sysPropsCacher != null ? sysPropsCacher : this.sysPropsCacher, // could still be null\n              defaultRltFactory,\n              stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","sourceOld":"  public ReplicaListTransformer getReplicaListTransformer(final SolrParams requestParams, String defaultShardPreferences, String nodeName, String localHostAddress, NodesSysPropsCacher sysPropsCacher) {\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = requestParams.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    defaultShardPreferences = Optional.ofNullable(defaultShardPreferences).orElse(this.defaultShardPreferences);\n    final String shardsPreferenceSpec = requestParams.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreferences);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n            ErrorCode.BAD_REQUEST,\n            \"preferLocalShards is deprecated and must not be used with shards.preference\"\n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp =\n          new NodePreferenceRulesComparator(\n              preferenceRules,\n              requestParams,\n              Optional.ofNullable(nodeName).orElse(this.nodeName),\n              Optional.ofNullable(localHostAddress).orElse(this.localHostAddress),\n              Optional.ofNullable(sysPropsCacher).orElse(this.sysPropsCacher),\n              defaultRltFactory,\n              stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.getSortRules() == null) {\n        // only applying base transformation\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, requestParams, RANDOM_RLTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["833432c363468a5df50f87446a68015404b1fbcf","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58dba38d0c9777f300cca9dd3c150fe2d244742"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","d58dba38d0c9777f300cca9dd3c150fe2d244742"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}