{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(List[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(List<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","sourceNew":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = o.toString();\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","sourceNew":"  /**\n   * Creates a backslash escaped string, joining all the items.\n   *\n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first = true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#join(Collection[#],char).mjava","sourceNew":"  /**\n   * Creates a backslash escaped string, joining all the items.\n   *\n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first = true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** \n   * Creates a backslash escaped string, joining all the items. \n   * @see #escapeTextWithSeparator\n   */\n  public static String join(Collection<?> items, char separator) {\n    if (items == null) return \"\";\n    StringBuilder sb = new StringBuilder(items.size() << 3);\n    boolean first=true;\n    for (Object o : items) {\n      String item = String.valueOf(o);\n      if (first) {\n        first = false;\n      } else {\n        sb.append(separator);\n      }\n      appendEscapedTextToBuilder(sb, item, separator);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"b0b597c65628ca9e73913a07e81691f8229bae35":["781578ca5d3d2194bc55fc3457c62aef623db6f2","8476949555f799dff381770c01cfad051a264487"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["781578ca5d3d2194bc55fc3457c62aef623db6f2","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["8476949555f799dff381770c01cfad051a264487","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b0b597c65628ca9e73913a07e81691f8229bae35"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}