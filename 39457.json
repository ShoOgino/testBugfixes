{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","commits":[{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testLUCENE2142().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f183729ece15402db94402d482f29ebac4f7f54"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["5f183729ece15402db94402d482f29ebac4f7f54"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}