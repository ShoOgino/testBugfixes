{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / maxDoc</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq (Lucene 3.x indexes\n   * or any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      return (float) (sumTotalTermFreq / (double) collectionStats.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / maxDoc</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq (Lucene 3.x indexes\n   * or any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      return (float) (sumTotalTermFreq / (double) collectionStats.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661eda9480ac1897795003539b76970830bb172","date":1339428754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / maxDoc</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq:\n   * any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      return (float) (sumTotalTermFreq / (double) collectionStats.maxDoc());\n    }\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / maxDoc</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq (Lucene 3.x indexes\n   * or any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      return (float) (sumTotalTermFreq / (double) collectionStats.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a259cdf9917ec38c8a812cc053f533b6e697a4a","date":1439487435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq:\n   * any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n      return (float) (sumTotalTermFreq / (double) docCount);\n    }\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / maxDoc</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq:\n   * any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      return (float) (sumTotalTermFreq / (double) collectionStats.maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ade74b5b1298025b81d3c45ae6713b47b9609152","date":1509579112,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code> */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq;\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted (tf=1), its # of postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        return 1f;\n      }\n      sumTotalTermFreq = collectionStats.sumDocFreq();\n    } else {\n      sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    }\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    return (float) (sumTotalTermFreq / (double) docCount);\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code>,\n   * or returns <code>1</code> if the index does not store sumTotalTermFreq:\n   * any field that omits frequency information). */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    if (sumTotalTermFreq <= 0) {\n      return 1f;       // field does not exist, or stat is unsupported\n    } else {\n      final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n      return (float) (sumTotalTermFreq / (double) docCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code> */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    return (float) (collectionStats.sumTotalTermFreq() / (double) collectionStats.docCount());\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code> */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq;\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted (tf=1), its # of postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        return 1f;\n      }\n      sumTotalTermFreq = collectionStats.sumDocFreq();\n    } else {\n      sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    }\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    return (float) (sumTotalTermFreq / (double) docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#avgFieldLength(CollectionStatistics).mjava","sourceNew":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code> */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    return (float) (collectionStats.sumTotalTermFreq() / (double) collectionStats.docCount());\n  }\n\n","sourceOld":"  /** The default implementation computes the average as <code>sumTotalTermFreq / docCount</code> */\n  protected float avgFieldLength(CollectionStatistics collectionStats) {\n    final long sumTotalTermFreq;\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted (tf=1), its # of postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        return 1f;\n      }\n      sumTotalTermFreq = collectionStats.sumDocFreq();\n    } else {\n      sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n    }\n    final long docCount = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    return (float) (sumTotalTermFreq / (double) docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["ade74b5b1298025b81d3c45ae6713b47b9609152"],"ade74b5b1298025b81d3c45ae6713b47b9609152":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["c661eda9480ac1897795003539b76970830bb172"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["ade74b5b1298025b81d3c45ae6713b47b9609152","086ffe31d8fba0110227db122974163709ecc1b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661eda9480ac1897795003539b76970830bb172":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"ade74b5b1298025b81d3c45ae6713b47b9609152":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["ade74b5b1298025b81d3c45ae6713b47b9609152"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c661eda9480ac1897795003539b76970830bb172"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c661eda9480ac1897795003539b76970830bb172":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}