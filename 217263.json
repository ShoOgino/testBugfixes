{"path":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","commits":[{"id":"426a4760316fc52cf79e191cadfcb328dfc2d1ca","date":1394042725,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n      }\n    } finally {\n      w.shutdown();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5aec33329f2e1af95159eee0f97947f322fb3e22","date":1401366505,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.shutdown();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n      }\n    } finally {\n      w.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), \n                                 TEST_VERSION_CURRENT,\n                                 new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexed(true);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExceedMaxTermLength#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        w.addDocument(doc);\n      });\n      String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n      String msg = expected.getMessage();\n      assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                 msg.contains(\"immense term\"));\n      assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                 msg.contains(maxLengthMsg));\n      assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                 msg.contains(name));\n      assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n                 msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n    } finally {\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexWriter w = new IndexWriter\n      (dir, newIndexWriterConfig(random(), new MockAnalyzer(random())));\n    try {\n      final FieldType ft = new FieldType();\n      ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n      ft.setStored(random().nextBoolean());\n      ft.freeze();\n      \n      final Document doc = new Document();\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      // problematic field\n      final String name = TestUtil.randomSimpleString(random(), 1, 50);\n      final String value = TestUtil.randomSimpleString(random(),\n                                                       minTestTermLength,\n                                                       maxTestTermLegnth);\n      final Field f = new Field(name, value, ft);\n      if (random().nextBoolean()) {\n        // totally ok short field value\n        doc.add(new Field(TestUtil.randomSimpleString(random(), 1, 10),\n                          TestUtil.randomSimpleString(random(), 1, 10),\n                          ft));\n      }\n      doc.add(f);\n      \n      try {\n        w.addDocument(doc);\n        fail(\"Did not get an exception from adding a monster term\");\n      } catch (IllegalArgumentException e) {\n        final String maxLengthMsg = String.valueOf(IndexWriter.MAX_TERM_LENGTH);\n        final String msg = e.getMessage();\n        assertTrue(\"IllegalArgumentException didn't mention 'immense term': \" + msg,\n                   msg.contains(\"immense term\"));\n        assertTrue(\"IllegalArgumentException didn't mention max length (\"+maxLengthMsg+\"): \" + msg,\n                   msg.contains(maxLengthMsg));\n        assertTrue(\"IllegalArgumentException didn't mention field name (\"+name+\"): \" + msg,\n                   msg.contains(name));\n        assertTrue(\"IllegalArgumentException didn't mention original message: \" + msg,\n            msg.contains(\"bytes can be at most\") && msg.contains(\"in length; got\"));\n      }\n    } finally {\n      w.close();\n    }\n  }\n\n","bugFix":["426a4760316fc52cf79e191cadfcb328dfc2d1ca","5aec33329f2e1af95159eee0f97947f322fb3e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5aec33329f2e1af95159eee0f97947f322fb3e22":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","3184874f7f3aca850248483485b4995343066875"],"426a4760316fc52cf79e191cadfcb328dfc2d1ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["3184874f7f3aca850248483485b4995343066875"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5aec33329f2e1af95159eee0f97947f322fb3e22"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"3184874f7f3aca850248483485b4995343066875":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"5aec33329f2e1af95159eee0f97947f322fb3e22":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"426a4760316fc52cf79e191cadfcb328dfc2d1ca":["96ea64d994d340044e0d57aeb6a5871539d10ca5","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","426a4760316fc52cf79e191cadfcb328dfc2d1ca"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["5aec33329f2e1af95159eee0f97947f322fb3e22"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}