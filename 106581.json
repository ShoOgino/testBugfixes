{"path":"sandbox/projects/appex/src/java/search/util/IOUtils#copyFile(File,File).mjava","commits":[{"id":"e3074d05d861bc1436ee03619fdee547f9c51d22","date":1020526983,"type":0,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"sandbox/projects/appex/src/java/search/util/IOUtils#copyFile(File,File).mjava","pathOld":"/dev/null","sourceNew":"    /** To copy the file. (from Java Examples in a Nutshell)\n     * @param from_file source file with full path.\n     * @param to_file target file with full path.\n     */\n    public static void copyFile(File from_file, File to_file)\n            throws IOException\n    {\n        if (!from_file.exists())\n            throw new IOException(\"FileCopy: no such source file: \" + from_file.getName());\n        if (!from_file.isFile())\n            throw new IOException(\"FileCopy: can't copy directory: \" + from_file.getName());\n        if (!from_file.canRead())\n            throw new IOException(\"FileCopy: source file is unreadable: \" + from_file.getName());\n\n        // If we've gotten this far, then everything is okay.\n        // So we copy the file, a buffer of bytes at a time.\n        FileInputStream from = null;  // Stream to read from source\n        FileOutputStream to = null;   // Stream to write to destination\n        try\n        {\n            from = new FileInputStream(from_file);  // Create input stream\n            to = new FileOutputStream(to_file);     // Create output stream\n            byte[] buffer = new byte[8192];         // A buffer to hold file contents\n            int bytes_read;                         // How many bytes in buffer\n            // Read a chunk of bytes into the buffer, then write them out,\n            // looping until we reach the end of the file (when read() returns -1).\n            // Note the combination of assignment and comparison in this while\n            // loop.  This is a common I/O programming idiom.\n            while ((bytes_read = from.read(buffer)) != -1) // Read bytes until EOF\n                to.write(buffer, 0, bytes_read);            //   write bytes\n        }\n\n                // Always close the streams, even if exceptions were thrown\n        finally\n        {\n            if (from != null)\n                try\n                {\n                    from.close();\n                }\n                catch (IOException e)\n                {\n                    ;\n                }\n            if (to != null)\n                try\n                {\n                    to.close();\n                }\n                catch (IOException e)\n                {\n                    ;\n                }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021","date":1020873003,"type":4,"author":"Kelvin Tan","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/projects/appex/src/java/search/util/IOUtils#copyFile(File,File).mjava","sourceNew":null,"sourceOld":"    /** To copy the file. (from Java Examples in a Nutshell)\n     * @param from_file source file with full path.\n     * @param to_file target file with full path.\n     */\n    public static void copyFile(File from_file, File to_file)\n            throws IOException\n    {\n        if (!from_file.exists())\n            throw new IOException(\"FileCopy: no such source file: \" + from_file.getName());\n        if (!from_file.isFile())\n            throw new IOException(\"FileCopy: can't copy directory: \" + from_file.getName());\n        if (!from_file.canRead())\n            throw new IOException(\"FileCopy: source file is unreadable: \" + from_file.getName());\n\n        // If we've gotten this far, then everything is okay.\n        // So we copy the file, a buffer of bytes at a time.\n        FileInputStream from = null;  // Stream to read from source\n        FileOutputStream to = null;   // Stream to write to destination\n        try\n        {\n            from = new FileInputStream(from_file);  // Create input stream\n            to = new FileOutputStream(to_file);     // Create output stream\n            byte[] buffer = new byte[8192];         // A buffer to hold file contents\n            int bytes_read;                         // How many bytes in buffer\n            // Read a chunk of bytes into the buffer, then write them out,\n            // looping until we reach the end of the file (when read() returns -1).\n            // Note the combination of assignment and comparison in this while\n            // loop.  This is a common I/O programming idiom.\n            while ((bytes_read = from.read(buffer)) != -1) // Read bytes until EOF\n                to.write(buffer, 0, bytes_read);            //   write bytes\n        }\n\n                // Always close the streams, even if exceptions were thrown\n        finally\n        {\n            if (from != null)\n                try\n                {\n                    from.close();\n                }\n                catch (IOException e)\n                {\n                    ;\n                }\n            if (to != null)\n                try\n                {\n                    to.close();\n                }\n                catch (IOException e)\n                {\n                    ;\n                }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}