{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push((Item) i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push((Item) i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push((Item) i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4881303d8a0667d9865d91f1d7b7a91e001cd5f5","date":1286123254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push((Item) i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push((Item) i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push((Item) i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push((Item) i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push((Item) i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push((Item) i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push((Item) i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push((Item) i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push((Item) i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = (Item) ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push((Item) i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push((Item) i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push((Item) i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#up().mjava","sourceNew":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","sourceOld":"    /**\n     * traverse upwards\n     */\n    private int up() {\n      Item i = new Item();\n      int res = 0;\n\n      if (ns.empty()) {\n        return -1;\n      }\n\n      if (cur != 0 && sc[cur] == 0) {\n        return lo[cur];\n      }\n\n      boolean climb = true;\n\n      while (climb) {\n        i = ns.pop();\n        i.child++;\n        switch (i.child) {\n          case 1:\n            if (sc[i.parent] != 0) {\n              res = eq[i.parent];\n              ns.push(i.clone());\n              ks.append(sc[i.parent]);\n            } else {\n              i.child++;\n              ns.push(i.clone());\n              res = hi[i.parent];\n            }\n            climb = false;\n            break;\n\n          case 2:\n            res = hi[i.parent];\n            ns.push(i.clone());\n            if (ks.length() > 0) {\n              ks.setLength(ks.length() - 1); // pop\n            }\n            climb = false;\n            break;\n\n          default:\n            if (ns.empty()) {\n              return -1;\n            }\n            climb = true;\n            break;\n        }\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["4d7a70709df2f3ba961939504c75098e92da8b99"],"4d7a70709df2f3ba961939504c75098e92da8b99":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4881303d8a0667d9865d91f1d7b7a91e001cd5f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["399d5903979ca52514d2bc7e3a362e1c45885c94","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4d7a70709df2f3ba961939504c75098e92da8b99":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}