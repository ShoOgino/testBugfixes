{"path":"backwards/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}