{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","sourceNew":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","sourceNew":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","sourceNew":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      if (f.getName().equals(\"inUseByIndexWriter\")) {\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testToString().mjava","sourceNew":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(new MockAnalyzer(random())).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      if (f.getName().equals(\"inUseByIndexWriter\")) {\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testToString() throws Exception {\n    String str = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).toString();\n    for (Field f : IndexWriterConfig.class.getDeclaredFields()) {\n      int modifiers = f.getModifiers();\n      if (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {\n        // Skip static final fields, they are only constants\n        continue;\n      } else if (\"indexingChain\".equals(f.getName())) {\n        // indexingChain is a package-private setting and thus is not output by\n        // toString.\n        continue;\n      }\n      if (f.getName().equals(\"inUseByIndexWriter\")) {\n        continue;\n      }\n      assertTrue(f.getName() + \" not found in toString\", str.indexOf(f.getName()) != -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}