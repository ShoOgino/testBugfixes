{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","commits":[{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"/dev/null","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = _TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b31300b5ffd92c482faabff5910228b4cdaa7dde","4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = _TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":["b31300b5ffd92c482faabff5910228b4cdaa7dde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbe87c1ed50e47c3704b5fb2b690461bfc158aba","date":1394111115,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sorter different = new SortSorter(new Sort(new SortField(\"ndv2\", SortField.Type.LONG)));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sorter different = new SortSorter(new Sort(new SortField(\"ndv2\", SortField.Type.LONG)));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, new NumericDocValuesSorter(\"ndv2\"), numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          super.setNextReader(context);\n          assertFalse(\"segment should not be recognized as sorted as different sorter was used\", segmentSorted);\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31300b5ffd92c482faabff5910228b4cdaa7dde","date":1398105394,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    createRandomIndex();\n    final int iters = atLeast(3);\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      // test that the collector works correctly when the index was sorted by a\n      // different sorter than the one specified in the ctor.\n      final int numHits = TestUtil.nextInt(random(), 1, numDocs);\n      final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n      final boolean fillFields = random().nextBoolean();\n      final boolean trackDocScores = random().nextBoolean();\n      final boolean trackMaxScore = random().nextBoolean();\n      final boolean inOrder = random().nextBoolean();\n      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      \n      final Query query;\n      if (random().nextBoolean()) {\n        query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      } else {\n        query = new MatchAllDocsQuery();\n      }\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    closeIndex();\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    // test that the collector works correctly when the index was sorted by a\n    // different sorter than the one specified in the ctor.\n    createRandomIndexes(5);\n    final int numHits = TestUtil.nextInt(random(), 1, numDocs / 10);\n    final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n    final boolean fillFields = random().nextBoolean();\n    final boolean trackDocScores = random().nextBoolean();\n    final boolean trackMaxScore = random().nextBoolean();\n    final boolean inOrder = random().nextBoolean();\n    final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n    \n    final IndexSearcher searcher = newSearcher(reader);\n    final int iters = atLeast(5);\n    for (int i = 0; i < iters; ++i) {\n      final TermQuery query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n    }\n    assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n    assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n  }\n\n","bugFix":["4d1c249f01722fe2de6d60de2f0aade417fbb638","6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    createRandomIndex();\n    final int iters = atLeast(3);\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      // test that the collector works correctly when the index was sorted by a\n      // different sorter than the one specified in the ctor.\n      final int numHits = TestUtil.nextInt(random(), 1, numDocs);\n      final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n      final boolean fillFields = random().nextBoolean();\n      final boolean trackDocScores = random().nextBoolean();\n      final boolean trackMaxScore = random().nextBoolean();\n      final boolean inOrder = random().nextBoolean();\n      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      \n      final Query query;\n      if (random().nextBoolean()) {\n        query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      } else {\n        query = new MatchAllDocsQuery();\n      }\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    closeIndex();\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    createRandomIndex();\n    final int iters = atLeast(3);\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      // test that the collector works correctly when the index was sorted by a\n      // different sorter than the one specified in the ctor.\n      final int numHits = TestUtil.nextInt(random(), 1, numDocs);\n      final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n      final boolean fillFields = random().nextBoolean();\n      final boolean trackDocScores = random().nextBoolean();\n      final boolean trackMaxScore = random().nextBoolean();\n      final boolean inOrder = random().nextBoolean();\n      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      \n      final Query query;\n      if (random().nextBoolean()) {\n        query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      } else {\n        query = new MatchAllDocsQuery();\n      }\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    closeIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#testEarlyTerminationDifferentSorter().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#testEarlyTerminationDifferentSorter().mjava","sourceNew":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    createRandomIndex();\n    final int iters = atLeast(3);\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      // test that the collector works correctly when the index was sorted by a\n      // different sorter than the one specified in the ctor.\n      final int numHits = TestUtil.nextInt(random(), 1, numDocs);\n      final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n      final boolean fillFields = random().nextBoolean();\n      final boolean trackDocScores = random().nextBoolean();\n      final boolean trackMaxScore = random().nextBoolean();\n      final boolean inOrder = random().nextBoolean();\n      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      \n      final Query query;\n      if (random().nextBoolean()) {\n        query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      } else {\n        query = new MatchAllDocsQuery();\n      }\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    closeIndex();\n  }\n\n","sourceOld":"  public void testEarlyTerminationDifferentSorter() throws IOException {\n    createRandomIndex();\n    final int iters = atLeast(3);\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      // test that the collector works correctly when the index was sorted by a\n      // different sorter than the one specified in the ctor.\n      final int numHits = TestUtil.nextInt(random(), 1, numDocs);\n      final Sort sort = new Sort(new SortField(\"ndv2\", SortField.Type.LONG, false));\n      final boolean fillFields = random().nextBoolean();\n      final boolean trackDocScores = random().nextBoolean();\n      final boolean trackMaxScore = random().nextBoolean();\n      final boolean inOrder = random().nextBoolean();\n      final TopFieldCollector collector1 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      final TopFieldCollector collector2 = TopFieldCollector.create(sort, numHits, fillFields, trackDocScores, trackMaxScore, inOrder);\n      \n      final Query query;\n      if (random().nextBoolean()) {\n        query = new TermQuery(new Term(\"s\", RandomPicks.randomFrom(random(), terms)));\n      } else {\n        query = new MatchAllDocsQuery();\n      }\n      searcher.search(query, collector1);\n      Sort different = new Sort(new SortField(\"ndv2\", SortField.Type.LONG));\n      searcher.search(query, new EarlyTerminatingSortingCollector(collector2, different, numHits) {\n        @Override\n        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n          final LeafCollector ret = super.getLeafCollector(context);\n          assertTrue(\"segment should not be recognized as sorted as different sorter was used\", ret.getClass() == in.getLeafCollector(context).getClass());\n          return ret;\n        }\n      });\n      assertTrue(collector1.getTotalHits() >= collector2.getTotalHits());\n      assertTopDocsEquals(collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n    }\n    closeIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["b31300b5ffd92c482faabff5910228b4cdaa7dde"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["cbe87c1ed50e47c3704b5fb2b690461bfc158aba"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4637747f71df783fc2014ef1f1e0418466e3bed6","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["ae73da626f97850c922c42736f808d0378e165f0"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cbe87c1ed50e47c3704b5fb2b690461bfc158aba","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["6613659748fe4411a7dcf85266e55db1f95f7315"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","b31300b5ffd92c482faabff5910228b4cdaa7dde"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["b060a9c887ff2c6f4280953afc6fb6000934dae5"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}