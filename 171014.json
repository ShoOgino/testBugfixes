{"path":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"668d0b5bd8134f2bc0936907e7d185382cde460a","date":1283361657,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        out[outUpto++] = (char) ((ch >> HALF_SHIFT) + 0xD7C0 /* UNI_SUR_HIGH_START - 64 */);\n        out[outUpto++] = (char) ((ch & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        out[outUpto++] = (char) ((ch >> HALF_SHIFT) + 0xD7C0 /* UNI_SUR_HIGH_START - 64 */);\n        out[outUpto++] = (char) ((ch & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":null,"sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        out[outUpto++] = (char) ((ch >> HALF_SHIFT) + 0xD7C0 /* UNI_SUR_HIGH_START - 64 */);\n        out[outUpto++] = (char) ((ch & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":null,"sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        out[outUpto++] = (char) ((ch >> HALF_SHIFT) + 0xD7C0 /* UNI_SUR_HIGH_START - 64 */);\n        out[outUpto++] = (char) ((ch & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":null,"sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      result.offsets = ArrayUtil.grow(result.offsets, end+1);\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      out = result.result = ArrayUtil.grow(out, outUpto+length+1);\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        out[outUpto++] = (char) ((ch >> HALF_SHIFT) + 0xD7C0 /* UNI_SUR_HIGH_START - 64 */);\n        out[outUpto++] = (char) ((ch & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"668d0b5bd8134f2bc0936907e7d185382cde460a":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["668d0b5bd8134f2bc0936907e7d185382cde460a","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","08932c793647a36953d1816b1060121f48820d3f"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["668d0b5bd8134f2bc0936907e7d185382cde460a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","668d0b5bd8134f2bc0936907e7d185382cde460a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["668d0b5bd8134f2bc0936907e7d185382cde460a","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"668d0b5bd8134f2bc0936907e7d185382cde460a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"08932c793647a36953d1816b1060121f48820d3f":["668d0b5bd8134f2bc0936907e7d185382cde460a","5f4e87790277826a2aea119328600dfb07761f32"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}