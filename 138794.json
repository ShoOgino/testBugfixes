{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","sourceNew":"    void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n      final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n      final int subBlockCount = frame.entCount - termCount;\n      totalTermCount += termCount;\n      if (termCount != 0 && subBlockCount != 0) {\n        mixedBlockCount++;\n      } else if (termCount != 0) {\n        termsOnlyBlockCount++;\n      } else if (subBlockCount != 0) {\n        subBlocksOnlyBlockCount++;\n      } else {\n        throw new IllegalStateException();\n      }\n      endBlockCount++;\n      final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n      assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n      totalBlockOtherBytes += otherBytes;\n    }\n\n","sourceOld":"    void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n      final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n      final int subBlockCount = frame.entCount - termCount;\n      totalTermCount += termCount;\n      if (termCount != 0 && subBlockCount != 0) {\n        mixedBlockCount++;\n      } else if (termCount != 0) {\n        termsOnlyBlockCount++;\n      } else if (subBlockCount != 0) {\n        subBlocksOnlyBlockCount++;\n      } else {\n        throw new IllegalStateException();\n      }\n      endBlockCount++;\n      final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n      assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n      totalBlockOtherBytes += otherBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","sourceNew":null,"sourceOld":"    void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n      final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n      final int subBlockCount = frame.entCount - termCount;\n      totalTermCount += termCount;\n      if (termCount != 0 && subBlockCount != 0) {\n        mixedBlockCount++;\n      } else if (termCount != 0) {\n        termsOnlyBlockCount++;\n      } else if (subBlockCount != 0) {\n        subBlocksOnlyBlockCount++;\n      } else {\n        throw new IllegalStateException();\n      }\n      endBlockCount++;\n      final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n      assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n      totalBlockOtherBytes += otherBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#endBlock(FieldReader.SegmentTermsEnum.Frame).mjava","sourceNew":null,"sourceOld":"    void endBlock(FieldReader.SegmentTermsEnum.Frame frame) {\n      final int termCount = frame.isLeafBlock ? frame.entCount : frame.state.termBlockOrd;\n      final int subBlockCount = frame.entCount - termCount;\n      totalTermCount += termCount;\n      if (termCount != 0 && subBlockCount != 0) {\n        mixedBlockCount++;\n      } else if (termCount != 0) {\n        termsOnlyBlockCount++;\n      } else if (subBlockCount != 0) {\n        subBlocksOnlyBlockCount++;\n      } else {\n        throw new IllegalStateException();\n      }\n      endBlockCount++;\n      final long otherBytes = frame.fpEnd - frame.fp - frame.suffixesReader.length() - frame.statsReader.length();\n      assert otherBytes > 0 : \"otherBytes=\" + otherBytes + \" frame.fp=\" + frame.fp + \" frame.fpEnd=\" + frame.fpEnd;\n      totalBlockOtherBytes += otherBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}