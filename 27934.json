{"path":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","commits":[{"id":"f06f30d971c742c504a1722d02ec7f44d0c2da37","date":1317241996,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"/dev/null","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["f06f30d971c742c504a1722d02ec7f44d0c2da37"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["f06f30d971c742c504a1722d02ec7f44d0c2da37","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f06f30d971c742c504a1722d02ec7f44d0c2da37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f06f30d971c742c504a1722d02ec7f44d0c2da37"],"f06f30d971c742c504a1722d02ec7f44d0c2da37":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}