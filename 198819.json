{"path":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(CodecReader).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(CodecReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean keepFullyDeletedSegment(CodecReader reader) throws IOException {\n    Scorer scorer = getScorer(field, retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n    if (scorer != null) {\n      DocIdSetIterator iterator = scorer.iterator();\n      boolean atLeastOneHit = iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n      return atLeastOneHit;\n    }\n    return super.keepFullyDeletedSegment(reader) ;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(CodecReader).mjava","sourceNew":"  @Override\n  public boolean keepFullyDeletedSegment(CodecReader reader) throws IOException {\n    /* we only need a single hit to keep it no need for soft deletes to be checked*/\n    Scorer scorer = getScorer(retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n    if (scorer != null) {\n      DocIdSetIterator iterator = scorer.iterator();\n      boolean atLeastOneHit = iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n      return atLeastOneHit;\n    }\n    return super.keepFullyDeletedSegment(reader) ;\n  }\n\n","sourceOld":"  @Override\n  public boolean keepFullyDeletedSegment(CodecReader reader) throws IOException {\n    Scorer scorer = getScorer(field, retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n    if (scorer != null) {\n      DocIdSetIterator iterator = scorer.iterator();\n      boolean atLeastOneHit = iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n      return atLeastOneHit;\n    }\n    return super.keepFullyDeletedSegment(reader) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#keepFullyDeletedSegment(CodecReader).mjava","sourceNew":"  @Override\n  public boolean keepFullyDeletedSegment(IOSupplier<CodecReader> readerIOSupplier) throws IOException {\n    CodecReader reader = readerIOSupplier.get();\n    /* we only need a single hit to keep it no need for soft deletes to be checked*/\n    Scorer scorer = getScorer(retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n    if (scorer != null) {\n      DocIdSetIterator iterator = scorer.iterator();\n      boolean atLeastOneHit = iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n      return atLeastOneHit;\n    }\n    return super.keepFullyDeletedSegment(readerIOSupplier) ;\n  }\n\n","sourceOld":"  @Override\n  public boolean keepFullyDeletedSegment(CodecReader reader) throws IOException {\n    /* we only need a single hit to keep it no need for soft deletes to be checked*/\n    Scorer scorer = getScorer(retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n    if (scorer != null) {\n      DocIdSetIterator iterator = scorer.iterator();\n      boolean atLeastOneHit = iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS;\n      return atLeastOneHit;\n    }\n    return super.keepFullyDeletedSegment(reader) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15e716649e2bd79a98b5e68c464154ea4c44677a"]},"commit2Childs":{"5ee0394b8176abd7c90a4be8c05465be1879db79":["36d13f271b6649357e07f71f7e46559479f69b5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"36d13f271b6649357e07f71f7e46559479f69b5b":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}