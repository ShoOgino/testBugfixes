{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    //nocommit its seems due to the nature of this codec that we should use IOContext.READONCE here where applicable. \n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, state.context);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    //nocommit its seems due to the nature of this codec that we should use IOContext.READONCE here where applicable. \n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, state.context);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void loadTermsIndex(int indexDivisor) {\n        // no op\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.codecId, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          public TermsEnum terms() {\n            return current.iterator();\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}