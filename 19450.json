{"path":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","commits":[{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5d21cb8e4aa4634e67bbdf56393d526d86f446","date":1255731698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numWhitespace--;\n      return ' ';\n    }\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9a5d21cb8e4aa4634e67bbdf56393d526d86f446"],"bd69280df0902763e47cb14745388ee17a2fb602":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a5d21cb8e4aa4634e67bbdf56393d526d86f446":["bd69280df0902763e47cb14745388ee17a2fb602"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd69280df0902763e47cb14745388ee17a2fb602"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bd69280df0902763e47cb14745388ee17a2fb602":["9a5d21cb8e4aa4634e67bbdf56393d526d86f446"],"9a5d21cb8e4aa4634e67bbdf56393d526d86f446":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}