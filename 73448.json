{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter#add(long).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter#add(long).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter#add(long).mjava","sourceNew":"  public void add(long v) {\n    //System.out.println(\"add v=\" + v);\n\n    // NOTE: this works too, but it's ~6% slower on a simple\n    // test with a high-freq TermQuery w/ range faceting on\n    // wikimediumall:\n    /*\n    int index = Arrays.binarySearch(boundaries, v);\n    if (index < 0) {\n      index = -index-1;\n    }\n    leafCounts[index]++;\n    */\n\n    // Binary search to find matched elementary range; we\n    // are guaranteed to find a match because the last\n    // boundary is Long.MAX_VALUE:\n\n    int lo = 0;\n    int hi = boundaries.length - 1;\n    while (true) {\n      int mid = (lo + hi) >>> 1;\n      //System.out.println(\"  cycle lo=\" + lo + \" hi=\" + hi + \" mid=\" + mid + \" boundary=\" + boundaries[mid] + \" to \" + boundaries[mid+1]);\n      if (v <= boundaries[mid]) {\n        if (mid == 0) {\n          leafCounts[0]++;\n          return;\n        } else {\n          hi = mid - 1;\n        }\n      } else if (v > boundaries[mid+1]) {\n        lo = mid + 1;\n      } else {\n        leafCounts[mid+1]++;\n        //System.out.println(\"  incr @ \" + (mid+1) + \"; now \" + leafCounts[mid+1]);\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  public void add(long v) {\n    //System.out.println(\"add v=\" + v);\n\n    // NOTE: this works too, but it's ~6% slower on a simple\n    // test with a high-freq TermQuery w/ range faceting on\n    // wikimediumall:\n    /*\n    int index = Arrays.binarySearch(boundaries, v);\n    if (index < 0) {\n      index = -index-1;\n    }\n    leafCounts[index]++;\n    */\n\n    // Binary search to find matched elementary range; we\n    // are guaranteed to find a match because the last\n    // boundary is Long.MAX_VALUE:\n\n    int lo = 0;\n    int hi = boundaries.length - 1;\n    while (true) {\n      int mid = (lo + hi) >>> 1;\n      //System.out.println(\"  cycle lo=\" + lo + \" hi=\" + hi + \" mid=\" + mid + \" boundary=\" + boundaries[mid] + \" to \" + boundaries[mid+1]);\n      if (v <= boundaries[mid]) {\n        if (mid == 0) {\n          leafCounts[0]++;\n          return;\n        } else {\n          hi = mid - 1;\n        }\n      } else if (v > boundaries[mid+1]) {\n        lo = mid + 1;\n      } else {\n        leafCounts[mid+1]++;\n        //System.out.println(\"  incr @ \" + (mid+1) + \"; now \" + leafCounts[mid+1]);\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter#add(long).mjava","pathOld":"/dev/null","sourceNew":"  public void add(long v) {\n    //System.out.println(\"add v=\" + v);\n\n    // NOTE: this works too, but it's ~6% slower on a simple\n    // test with a high-freq TermQuery w/ range faceting on\n    // wikimediumall:\n    /*\n    int index = Arrays.binarySearch(boundaries, v);\n    if (index < 0) {\n      index = -index-1;\n    }\n    leafCounts[index]++;\n    */\n\n    // Binary search to find matched elementary range; we\n    // are guaranteed to find a match because the last\n    // boundary is Long.MAX_VALUE:\n\n    int lo = 0;\n    int hi = boundaries.length - 1;\n    while (true) {\n      int mid = (lo + hi) >>> 1;\n      //System.out.println(\"  cycle lo=\" + lo + \" hi=\" + hi + \" mid=\" + mid + \" boundary=\" + boundaries[mid] + \" to \" + boundaries[mid+1]);\n      if (v <= boundaries[mid]) {\n        if (mid == 0) {\n          leafCounts[0]++;\n          return;\n        } else {\n          hi = mid - 1;\n        }\n      } else if (v > boundaries[mid+1]) {\n        lo = mid + 1;\n      } else {\n        leafCounts[mid+1]++;\n        //System.out.println(\"  incr @ \" + (mid+1) + \"; now \" + leafCounts[mid+1]);\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}