{"path":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","commits":[{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        } catch (NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        } catch (NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        } catch (NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException | NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","sourceOld":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        } catch (NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2","date":1576668624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n      return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n        @Override\n        public Boolean run() {\n          return invokeFunctionUnsafe(name, cmd);\n        }\n      }, SCRIPT_SANDBOX);\n    }\n\n","sourceOld":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException | NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21970a18a53245a65302f031a590db9d78d08b4c","date":1576678204,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory.ScriptUpdateProcessor#invokeFunction(String,Object...).mjava","sourceNew":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n      return AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n        @Override\n        public Boolean run() {\n          return invokeFunctionUnsafe(name, cmd);\n        }\n      }, SCRIPT_SANDBOX);\n    }\n\n","sourceOld":"    /**\n     * returns true if processing should continue, or false if the \n     * request should be ended now.  Result value is computed from the return \n     * value of the script function if: it exists, is non-null, and can be \n     * cast to a java Boolean.\n     */\n    private boolean invokeFunction(String name, Object... cmd) {\n\n      for (EngineInfo engine : engines) {\n        try {\n          Object result = engine.getEngine().invokeFunction(name, cmd);\n          if (null != result && result instanceof Boolean) {\n            if (! ((Boolean)result).booleanValue() ) {\n              return false;\n            }\n          }\n\n        } catch (ScriptException | NoSuchMethodException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                  \"Unable to invoke function \" + name + \n                                  \" in script: \" + \n                                  engine.getScriptFile().getFileName() + \n                                  \": \" + e.getMessage(), e);\n        }\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["9e2656623e57ced6c16aae473bab02019c951802"],"9e2656623e57ced6c16aae473bab02019c951802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21970a18a53245a65302f031a590db9d78d08b4c":["c6e1dc1bb4254226c8d7151b596cc1be40671751","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["21970a18a53245a65302f031a590db9d78d08b4c","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"9e2656623e57ced6c16aae473bab02019c951802":["c6e1dc1bb4254226c8d7151b596cc1be40671751","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"21970a18a53245a65302f031a590db9d78d08b4c":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e2656623e57ced6c16aae473bab02019c951802","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["21970a18a53245a65302f031a590db9d78d08b4c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21970a18a53245a65302f031a590db9d78d08b4c","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}