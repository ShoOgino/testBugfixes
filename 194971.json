{"path":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n      if (bufferPosition >= bufferLength) {\n        currentBufferIndex++;\n        switchCurrentBuffer(true);\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n      if (bufferPosition >= bufferLength) {\n        currentBufferIndex++;\n        switchCurrentBuffer(true);\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4eda6e6a7dc9d9178b430d989fa9e3033edc780","date":1453398628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n\n      if (bufferPosition == bufferLength) {\n        nextBuffer();\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n      if (bufferPosition >= bufferLength) {\n        currentBufferIndex++;\n        switchCurrentBuffer(true);\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","bugFix":null,"bugIntro":["95b3581a5fedff9c9f85f5993aabb9c8fadc8a38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38","date":1542717449,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n      if (bufferPosition == bufferLength) {\n        nextBuffer();\n      }\n\n      if (currentBuffer == null) {\n        throw new EOFException();\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n\n      if (bufferPosition == bufferLength) {\n        nextBuffer();\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","bugFix":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMInputStream#readBytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    while (len > 0) {\n      if (bufferPosition == bufferLength) {\n        nextBuffer();\n      }\n\n      if (currentBuffer == null) {\n        throw new EOFException();\n      }\n\n      int remainInBuffer = bufferLength - bufferPosition;\n      int bytesToCopy = len < remainInBuffer ? len : remainInBuffer;\n      System.arraycopy(currentBuffer, bufferPosition, b, offset, bytesToCopy);\n      offset += bytesToCopy;\n      len -= bytesToCopy;\n      bufferPosition += bytesToCopy;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["95b3581a5fedff9c9f85f5993aabb9c8fadc8a38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"95b3581a5fedff9c9f85f5993aabb9c8fadc8a38":["d77dafd89756a5161d244985903e3487ca109182"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4eda6e6a7dc9d9178b430d989fa9e3033edc780"],"d4eda6e6a7dc9d9178b430d989fa9e3033edc780":["95b3581a5fedff9c9f85f5993aabb9c8fadc8a38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}