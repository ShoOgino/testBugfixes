{"path":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","commits":[{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","sourceOld":"  public final void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    startTag(\"doc\", name, false);\n    incLevel();\n\n    if (includeScore) {\n      writeFloat(\"score\", score);\n    }\n\n\n    // Lucene Documents have multivalued types as multiple fields\n    // with the same name.\n    // The XML needs to represent these as\n    // an array.  The fastest way to detect multiple fields\n    // with the same name is to sort them first.\n\n\n    // using global tlst here, so we shouldn't call any other\n    // function that uses it until we are done.\n    tlst.clear();\n    for (Object obj : doc.getFields()) {\n      Fieldable ff = (Fieldable)obj;\n      // skip this field if it is not a field to be returned.\n      if (returnFields!=null && !returnFields.contains(ff.name())) {\n        continue;\n      }\n      tlst.add(ff);\n    }\n    Collections.sort(tlst, fieldnameComparator);\n\n    int sz = tlst.size();\n    int fidx1 = 0, fidx2 = 0;\n    while (fidx1 < sz) {\n      Fieldable f1 = (Fieldable)tlst.get(fidx1);\n      String fname = f1.name();\n\n      // find the end of fields with this name\n      fidx2 = fidx1+1;\n      while (fidx2 < sz && fname.equals(((Fieldable)tlst.get(fidx2)).name()) ) {\n        fidx2++;\n      }\n\n      /***\n      // more efficient to use getFieldType instead of\n      // getField since that way dynamic fields won't have\n      // to create a SchemaField on the fly.\n      FieldType ft = schema.getFieldType(fname);\n      ***/\n\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if( sf == null ) {\n        sf = new SchemaField( fname, new TextField() );\n      }\n      if (fidx1+1 == fidx2) {\n        // single field value\n        if (version>=2100 && sf.multiValued()) {\n          startTag(\"arr\",fname,false);\n          doIndent=false;\n          sf.write(this, null, f1);\n          writer.write(\"</arr>\");\n          doIndent=defaultIndent;\n        } else {\n          sf.write(this, f1.name(), f1);\n        }\n      } else {\n        // multiple fields with same name detected\n\n        startTag(\"arr\",fname,false);\n        incLevel();\n        doIndent=false;\n        int cnt=0;\n        for (int i=fidx1; i<fidx2; i++) {\n          if (defaultIndent && ++cnt==4) { // only indent every 4th item\n            indent();\n            cnt=0;\n          }\n          sf.write(this, null, (Fieldable)tlst.get(i));\n        }\n        decLevel();\n        // if (doIndent) indent();\n        writer.write(\"</arr>\");\n        // doIndent=true;\n        doIndent=defaultIndent;\n      }\n      fidx1 = fidx2;\n    }\n\n    decLevel();\n    if (doIndent) indent();\n    writer.write(\"</doc>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}