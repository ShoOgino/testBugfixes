{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(BBoxFieldInfo,Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.US );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(BBoxFieldInfo fieldInfo,\n      Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = finfo.createDouble(fieldInfo.minX, bbox.getMinX());\n    fields[1] = finfo.createDouble(fieldInfo.maxX, bbox.getMaxX());\n    fields[2] = finfo.createDouble(fieldInfo.minY, bbox.getMinY());\n    fields[3] = finfo.createDouble(fieldInfo.maxY, bbox.getMaxY());\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( fieldInfo.xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.US );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( fieldInfo.bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.ROOT );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.US );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.ROOT );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.US );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.ROOT );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.US );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42","date":1341987627,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.ROOT );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#createFields(Shape,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexableField[] createFields(Shape shape, boolean index, boolean store) {\n\n    Rectangle bbox = shape.getBoundingBox();\n    IndexableField[] fields = new IndexableField[store?6:5];\n    fields[0] = createDouble(field_minX, bbox.getMinX(), index, store);\n    fields[1] = createDouble(field_maxX, bbox.getMaxX(), index, store);\n    fields[2] = createDouble(field_minY, bbox.getMinY(), index, store);\n    fields[3] = createDouble(field_maxY, bbox.getMaxY(), index, store);\n\n    FieldType ft = new FieldType();\n    ft.setIndexed(index);\n    ft.setStored(store);\n    ft.setTokenized(false);\n    ft.setOmitNorms(true);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n\n    Field xdl = new Field( field_xdl, bbox.getCrossesDateLine()?\"T\":\"F\", ft );\n    fields[4] = xdl;\n    if( store ) {\n      FieldType ff = new FieldType();\n      ff.setIndexed(false);\n      ff.setStored(true);\n      ff.setOmitNorms(true);\n      ff.setIndexOptions(IndexOptions.DOCS_ONLY);\n      ff.freeze();\n\n      NumberFormat nf = NumberFormat.getInstance( Locale.ROOT );\n      nf.setMaximumFractionDigits( 5 );\n      nf.setMinimumFractionDigits( 5 );\n      nf.setGroupingUsed(false);\n      String ext =\n        nf.format( bbox.getMinX() ) + ' ' +\n        nf.format( bbox.getMinY() ) + ' ' +\n        nf.format( bbox.getMaxX() ) + ' ' +\n        nf.format( bbox.getMaxY() ) + ' ';\n      fields[5] = new Field( field_bbox, ext, ff );\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","399d569d88e65d963440cdd3a3e2d5f7cdd1bd42"],"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42":["2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["0415a016b37e58a017fed0a91234f733ab359971"],"2acf500f78aa12b92e371fd89c719291986b6b90":["0415a016b37e58a017fed0a91234f733ab359971","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d569d88e65d963440cdd3a3e2d5f7cdd1bd42"],"46d8ada1fff8d18cb197c38c7983225162599948":["0415a016b37e58a017fed0a91234f733ab359971","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"399d569d88e65d963440cdd3a3e2d5f7cdd1bd42":["aba371508186796cc6151d8223a5b4e16d02e26e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["399d569d88e65d963440cdd3a3e2d5f7cdd1bd42","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}