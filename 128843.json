{"path":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","commits":[{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"/dev/null","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4","date":1452195469,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    \n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b800611029360525d55dc4797bcdfc2a689b7fe","date":1455310686,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    \n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    \n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1197d6f54676973038ad402280d80a139dfd27b","date":1455734228,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    \n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":["f9362075f92dff89425ca488b480f70d565d66e7"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1d231959c9d0545adc421b7a2fefa7db47300d8","date":1472269133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"970a667af41fa94f5b9e55f7d08c90b51daf989d","date":1478330202,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e87998750c1408b8af3248e55cff794d51d37166","date":1501426220,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"436eff77c0517cdabffce79a0738ab69d524d9fb","date":1522590443,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b850f06b1db39c994c6386cbbaa486651f490b","date":1523385145,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685af99397b6da31116a2cac747ed255d217d080","date":1530038134,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae70f2df00762dfce0455c0e39381848762662e5","date":1539113410,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":["b1197d6f54676973038ad402280d80a139dfd27b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7","date":1551957932,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    waitForReplicasInSync = \"true:60\";\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    additionalSystemProps = null;\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    skipIndexWriterCommitOnClose = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#reset().mjava","sourceNew":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeFollowerCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    skipIndexWriterCommitOnClose = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","sourceOld":"  public static void reset() {\n    nonGracefullClose = null;\n    failReplicaRequests = null;\n    failUpdateRequests = null;\n    nonExistentCoreExceptionAfterUnload = null;\n    updateLogReplayRandomPause = null;\n    updateRandomPause = null;\n    randomDelayInCoreCreation = null;\n    splitFailureBeforeReplicaCreation = null;\n    splitFailureAfterReplicaCreation = null;\n    splitLatch = null;\n    directUpdateLatch = null;\n    reindexLatch = null;\n    reindexFailure = null;\n    prepRecoveryOpPauseForever = null;\n    countPrepRecoveryOpPauseForever = new AtomicInteger(0);\n    failIndexFingerprintRequests = null;\n    wrongIndexFingerprint = null;\n    delayBeforeSlaveCommitRefresh = null;\n    delayInExecutePlanAction = null;\n    failInExecutePlanAction = false;\n    skipIndexWriterCommitOnClose = false;\n    uifOutOfMemoryError = false;\n    notifyPauseForeverDone();\n    newSearcherHooks.clear();\n    for (Timer timer : timers) {\n      timer.cancel();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["536b47681314488eb94706248be6047a3f142841"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ae70f2df00762dfce0455c0e39381848762662e5"],"685af99397b6da31116a2cac747ed255d217d080":["f0b850f06b1db39c994c6386cbbaa486651f490b"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"f0b850f06b1db39c994c6386cbbaa486651f490b":["436eff77c0517cdabffce79a0738ab69d524d9fb"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"033183e9e2da4609614733f0226a38c88c49ed36":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"ae70f2df00762dfce0455c0e39381848762662e5":["685af99397b6da31116a2cac747ed255d217d080"],"833432c363468a5df50f87446a68015404b1fbcf":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"b1197d6f54676973038ad402280d80a139dfd27b":["1b800611029360525d55dc4797bcdfc2a689b7fe"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["970a667af41fa94f5b9e55f7d08c90b51daf989d","61c45e99cf6676da48f19d7511c73712ad39402b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f0b850f06b1db39c994c6386cbbaa486651f490b","685af99397b6da31116a2cac747ed255d217d080"],"a229cb50768e988c50a2106bdae3a92154f428bf":["833432c363468a5df50f87446a68015404b1fbcf","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b1197d6f54676973038ad402280d80a139dfd27b","d1d231959c9d0545adc421b7a2fefa7db47300d8"],"f9362075f92dff89425ca488b480f70d565d66e7":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"e87998750c1408b8af3248e55cff794d51d37166":["61c45e99cf6676da48f19d7511c73712ad39402b"],"1b800611029360525d55dc4797bcdfc2a689b7fe":["f9362075f92dff89425ca488b480f70d565d66e7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f0b850f06b1db39c994c6386cbbaa486651f490b","685af99397b6da31116a2cac747ed255d217d080"],"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d1d231959c9d0545adc421b7a2fefa7db47300d8":["b1197d6f54676973038ad402280d80a139dfd27b"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["833432c363468a5df50f87446a68015404b1fbcf"],"61c45e99cf6676da48f19d7511c73712ad39402b":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"536b47681314488eb94706248be6047a3f142841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b1197d6f54676973038ad402280d80a139dfd27b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","e87998750c1408b8af3248e55cff794d51d37166"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["033183e9e2da4609614733f0226a38c88c49ed36"],"436eff77c0517cdabffce79a0738ab69d524d9fb":["e87998750c1408b8af3248e55cff794d51d37166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["033183e9e2da4609614733f0226a38c88c49ed36","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4":["f9362075f92dff89425ca488b480f70d565d66e7"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ea30eccc5df86149453ac5ce8ff85443cfe1b9f7"],"685af99397b6da31116a2cac747ed255d217d080":["ae70f2df00762dfce0455c0e39381848762662e5","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"f0b850f06b1db39c994c6386cbbaa486651f490b":["685af99397b6da31116a2cac747ed255d217d080","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"ae70f2df00762dfce0455c0e39381848762662e5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"033183e9e2da4609614733f0226a38c88c49ed36":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"833432c363468a5df50f87446a68015404b1fbcf":["a229cb50768e988c50a2106bdae3a92154f428bf","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"b1197d6f54676973038ad402280d80a139dfd27b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d1d231959c9d0545adc421b7a2fefa7db47300d8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["970a667af41fa94f5b9e55f7d08c90b51daf989d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536b47681314488eb94706248be6047a3f142841"],"f9362075f92dff89425ca488b480f70d565d66e7":["1b800611029360525d55dc4797bcdfc2a689b7fe"],"1b800611029360525d55dc4797bcdfc2a689b7fe":["b1197d6f54676973038ad402280d80a139dfd27b"],"e87998750c1408b8af3248e55cff794d51d37166":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","436eff77c0517cdabffce79a0738ab69d524d9fb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"d1d231959c9d0545adc421b7a2fefa7db47300d8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ea30eccc5df86149453ac5ce8ff85443cfe1b9f7":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","a229cb50768e988c50a2106bdae3a92154f428bf"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536b47681314488eb94706248be6047a3f142841":["c67fb7bad9a9f5e5f07a3166b8b8cfa0fe3f6ce4"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e87998750c1408b8af3248e55cff794d51d37166"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["033183e9e2da4609614733f0226a38c88c49ed36"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"39561034e67ea008831f095a2f7be7fcdbd37f53":["833432c363468a5df50f87446a68015404b1fbcf","b0b597c65628ca9e73913a07e81691f8229bae35"],"436eff77c0517cdabffce79a0738ab69d524d9fb":["f0b850f06b1db39c994c6386cbbaa486651f490b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a229cb50768e988c50a2106bdae3a92154f428bf","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}