{"path":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","commits":[{"id":"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d","date":1152816469,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      super.setValues(args);\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n                \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0907819f524a744c3377371e616839271317ac6","date":1157570948,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     * @deprecated use SolrParams.toSolrParams\n     */\n    public void setValues(NamedList args) {\n\n      super.setValues(args);\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n                \n    }\n\n","sourceOld":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     *\n     */\n    public void setValues(NamedList args) {\n\n      super.setValues(args);\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n                \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69298b8fddfcc46c3705ee070fa85cb3224ab15","date":1172104917,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        SolrCore.log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        SolrCore.log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"    /**\n     * Sets the params using values from a NamedList, usefull in the\n     * init method for your handler.\n     *\n     * <p>\n     * If any param is not of the expected type, a severe error is\n     * logged,and the param is skipped.\n     * </p>\n     *\n     * <p>\n     * If any param is not of in the NamedList, it is skipped and the\n     * old value is left alone.\n     * </p>\n     * @deprecated use SolrParams.toSolrParams\n     */\n    public void setValues(NamedList args) {\n\n      super.setValues(args);\n\n      Object tmp;\n\n      tmp = args.get(TIE);\n      if (null != tmp) {\n        if (tmp instanceof Float) {\n          tiebreaker = ((Float)tmp).floatValue();\n        } else {\n          SolrCore.log.severe(\"init param is not a float: \" + TIE);\n        }\n      }\n\n      tmp = args.get(QF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          qf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + QF);\n        }\n      }\n\n      tmp = args.get(PF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          pf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + PF);\n        }\n      }\n\n        \n      tmp = args.get(MM);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          mm = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + MM);\n        }\n      }\n        \n      tmp = args.get(PS);\n      if (null != tmp) {\n        if (tmp instanceof Integer) {\n          pslop = ((Integer)tmp).intValue();\n        } else {\n          SolrCore.log.severe(\"init param is not an int: \" + PS);\n        }\n      }\n\n      tmp = args.get(BQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BQ);\n        }\n      }\n \n      tmp = args.get(BF);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          bf = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + BF);\n        }\n      }\n \n      tmp = args.get(FQ);\n      if (null != tmp) {\n        if (tmp instanceof String) {\n          fq = tmp.toString();\n        } else {\n          SolrCore.log.severe(\"init param is not a str: \" + FQ);\n        }\n      }\n                \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/params/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        SolrCore.log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        SolrCore.log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        SolrCore.log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        SolrCore.log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/common/params/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.severe(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.severe(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/DisMaxParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   * @deprecated use SolrParams.toSolrParams\n   */\n  public void setValues(NamedList args) {\n\n    super.setValues(args);\n\n    Object tmp;\n\n    tmp = args.get(TIE);\n    if (null != tmp) {\n      if (tmp instanceof Float) {\n        tiebreaker = ((Float)tmp).floatValue();\n      } else {\n        log.error(\"init param is not a float: \" + TIE);\n      }\n    }\n\n    tmp = args.get(QF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        qf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + QF);\n      }\n    }\n\n    tmp = args.get(PF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        pf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + PF);\n      }\n    }\n\n        \n    tmp = args.get(MM);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        mm = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + MM);\n      }\n    }\n        \n    tmp = args.get(PS);\n    if (null != tmp) {\n      if (tmp instanceof Integer) {\n        pslop = ((Integer)tmp).intValue();\n      } else {\n        log.error(\"init param is not an int: \" + PS);\n      }\n    }\n\n    tmp = args.get(BQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BQ);\n      }\n    }\n \n    tmp = args.get(BF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        bf = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + BF);\n      }\n    }\n \n    tmp = args.get(FQ);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fq = tmp.toString();\n      } else {\n        log.error(\"init param is not a str: \" + FQ);\n      }\n    }\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["a69298b8fddfcc46c3705ee070fa85cb3224ab15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69298b8fddfcc46c3705ee070fa85cb3224ab15":["c0907819f524a744c3377371e616839271317ac6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"c0907819f524a744c3377371e616839271317ac6":["1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a69298b8fddfcc46c3705ee070fa85cb3224ab15":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d"],"1aa2b803ab70ac42b322d648a4f0bf8fdcb7456d":["c0907819f524a744c3377371e616839271317ac6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0907819f524a744c3377371e616839271317ac6":["a69298b8fddfcc46c3705ee070fa85cb3224ab15"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}