{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","sourceNew":null,"sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    cp.unregister(cp.lookup(\"MockRandom\"));\n    swapCodec(new PulsingCodec(), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}