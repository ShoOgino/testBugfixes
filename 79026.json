{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"/dev/null","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<Callable<Void>>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"/dev/null","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<Callable<Void>>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<Callable<Void>>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(() -> {\n          assertBlockU(msg);\n          return null;\n        });\n        if (rarely()) {\n          rez.add(() -> {\n            assertBlockU(commit());\n            return null;\n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(() -> {\n          assertBlockU(msg);\n          return null;\n        });\n        if (rarely()) {\n          rez.add(() -> {\n            assertBlockU(commit());\n            return null;\n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(new Callable<Void>() {\n          @Override\n          public Void call() {\n            assertBlockU(msg);\n            return null;\n          }\n          \n        });\n        if (rarely()) {\n          rez.add(new Callable<Void>() {\n            @Override\n            public Void call() {\n              assertBlockU(commit());\n              return null;\n            }\n            \n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#callables(List[Document]).mjava","sourceNew":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = getStringFromDocument(block);\n      if (msg.length() > 0) {\n        rez.add(() -> {\n          assertBlockU(msg);\n          return null;\n        });\n        if (rarely()) {\n          rez.add(() -> {\n            assertBlockU(commit());\n            return null;\n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","sourceOld":"  private Collection<? extends Callable<Void>> callables(List<Document> blocks) {\n    final List<Callable<Void>> rez = new ArrayList<>();\n    for (Document block : blocks) {\n      final String msg = block.asXML();\n      if (msg.length() > 0) {\n        rez.add(() -> {\n          assertBlockU(msg);\n          return null;\n        });\n        if (rarely()) {\n          rez.add(() -> {\n            assertBlockU(commit());\n            return null;\n          });\n        }\n      }\n    }\n    return rez;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"043df2e9a841864922c32756a44c939ed768cb89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","043df2e9a841864922c32756a44c939ed768cb89"],"bb1a5eff758fefcac883606f32579ae501a14119":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"b6284684320a9808c41a5e43de958b2da22f89bd":["bb1a5eff758fefcac883606f32579ae501a14119"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}