{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#BlockPackedPostingsWriter(SegmentWriteState,int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#BlockPackedPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public BlockPackedPostingsWriter(SegmentWriteState state, int blockSize) throws IOException {\n    super();\n    this.blockSize = blockSize;\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new long[blockSize];\n        posDeltaLBuffer = LongBuffer.wrap(posDeltaBuffer);\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new long[blockSize];\n          payloadLengthLBuffer = LongBuffer.wrap(payloadLengthBuffer);\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n          payloadLengthLBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new long[blockSize];\n          offsetLengthBuffer = new long[blockSize];\n          offsetStartDeltaLBuffer = LongBuffer.wrap(offsetStartDeltaBuffer);\n          offsetLengthLBuffer = LongBuffer.wrap(offsetLengthBuffer);\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n          offsetStartDeltaLBuffer = null;\n          offsetLengthLBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n        posDeltaLBuffer = null;\n        payloadLengthLBuffer = null;\n        offsetStartDeltaLBuffer = null;\n        offsetLengthLBuffer = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new long[blockSize];\n    freqBuffer = new long[blockSize];\n    docDeltaLBuffer = LongBuffer.wrap(docDeltaBuffer);\n    freqLBuffer = LongBuffer.wrap(freqBuffer);\n\n    skipWriter = new BlockPackedSkipWriter(blockSize,\n                                     maxSkipLevels, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[blockSize*4];\n    encodedBuffer = ByteBuffer.wrap(encoded).asLongBuffer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#BlockPackedPostingsWriter(SegmentWriteState,int).mjava","sourceNew":null,"sourceOld":"  public BlockPackedPostingsWriter(SegmentWriteState state, int blockSize) throws IOException {\n    super();\n    this.blockSize = blockSize;\n\n    docOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.DOC_EXTENSION),\n                                          state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(docOut, DOC_CODEC, VERSION_CURRENT);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new long[blockSize];\n        posDeltaLBuffer = LongBuffer.wrap(posDeltaBuffer);\n        posOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.POS_EXTENSION),\n                                              state.context);\n        CodecUtil.writeHeader(posOut, POS_CODEC, VERSION_CURRENT);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new long[blockSize];\n          payloadLengthLBuffer = LongBuffer.wrap(payloadLengthBuffer);\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n          payloadLengthLBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new long[blockSize];\n          offsetLengthBuffer = new long[blockSize];\n          offsetStartDeltaLBuffer = LongBuffer.wrap(offsetStartDeltaBuffer);\n          offsetLengthLBuffer = LongBuffer.wrap(offsetLengthBuffer);\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n          offsetStartDeltaLBuffer = null;\n          offsetLengthLBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          payOut = state.directory.createOutput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockPackedPostingsFormat.PAY_EXTENSION),\n                                                state.context);\n          CodecUtil.writeHeader(payOut, PAY_CODEC, VERSION_CURRENT);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n        posDeltaLBuffer = null;\n        payloadLengthLBuffer = null;\n        offsetStartDeltaLBuffer = null;\n        offsetLengthLBuffer = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new long[blockSize];\n    freqBuffer = new long[blockSize];\n    docDeltaLBuffer = LongBuffer.wrap(docDeltaBuffer);\n    freqLBuffer = LongBuffer.wrap(freqBuffer);\n\n    skipWriter = new BlockPackedSkipWriter(blockSize,\n                                     maxSkipLevels, \n                                     state.segmentInfo.getDocCount(),\n                                     docOut,\n                                     posOut,\n                                     payOut);\n\n    encoded = new byte[blockSize*4];\n    encodedBuffer = ByteBuffer.wrap(encoded).asLongBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0e3359210474c12c0b79e6400450313e3d7ef2bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}