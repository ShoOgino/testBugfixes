{"path":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","commits":[{"id":"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","date":1453975275,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335c742a0e04e95338760c9da8aecb8c3f5df9b3","date":1454322440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","sourceOld":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","date":1457539417,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true, null);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","sourceOld":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n      expectThrowsAnyOf(Arrays.asList(CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),\n          () -> DirectoryReader.open(dirCopy).close()\n      );\n\n      // CheckIndex should also fail:\n      expectThrowsAnyOf(Arrays.asList(CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),\n          () -> TestUtil.checkIndex(dirCopy, true, true, null)\n      );\n    }\n  }\n\n","sourceOld":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true, null);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSwappedIndexFiles#swapOneFile(Directory,Directory,String).mjava","sourceNew":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n      expectThrowsAnyOf(Arrays.asList(CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),\n          () -> DirectoryReader.open(dirCopy).close()\n      );\n\n      // CheckIndex should also fail:\n      expectThrowsAnyOf(Arrays.asList(CorruptIndexException.class, EOFException.class, IndexFormatTooOldException.class),\n          () -> TestUtil.checkIndex(dirCopy, true, true, null)\n      );\n    }\n  }\n\n","sourceOld":"  private void swapOneFile(Directory dir1, Directory dir2, String victim) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: swap file \" + victim);\n    }\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      // Copy all files from dir1 to dirCopy, except victim which we copy from dir2:\n      for(String name : dir1.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir1, name, name, IOContext.DEFAULT);\n        } else {\n          dirCopy.copyFrom(dir2, name, name, IOContext.DEFAULT);\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      try {\n        // NOTE: we .close so that if the test fails (truncation not detected) we don't also get all these confusing errors about open files:\n        DirectoryReader.open(dirCopy).close();\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n\n      // CheckIndex should also fail:\n      try {\n        TestUtil.checkIndex(dirCopy, true, true, null);\n        fail(\"wrong file \" + victim + \" not detected\");\n      } catch (CorruptIndexException | EOFException | IndexFormatTooOldException e) {\n        // expected\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"335c742a0e04e95338760c9da8aecb8c3f5df9b3":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["335c742a0e04e95338760c9da8aecb8c3f5df9b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","335c742a0e04e95338760c9da8aecb8c3f5df9b3"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"335c742a0e04e95338760c9da8aecb8c3f5df9b3":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["335c742a0e04e95338760c9da8aecb8c3f5df9b3"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}