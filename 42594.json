{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","commits":[{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testEmptyClusterState().mjava","sourceNew":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","sourceOld":"  public void testEmptyClusterState(){\n    String autoScaleJson =  \" {'policies':{'c1':[{\" +\n        \"        'replica':1,\" +\n        \"        'shard':'#EACH',\" +\n        \"        'port':'50096'}]}}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"    '127.0.0.1:50097_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50097'},\" +\n        \"    '127.0.0.1:50096_solr':{\" +\n        \"      'cores':0,\" +\n        \"      'port':'50096'}}\");\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList( \"127.0.0.1:50097_solr\", \"127.0.0.1:50096_solr\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"c1\"), Arrays.asList(\"shard1\", \"shard2\"), 1, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"127.0.0.1:50096_solr\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"25e4a4cddd699db6cce60282e747c7705897e821":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["25e4a4cddd699db6cce60282e747c7705897e821"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["611797611928fc8d5afd1c468ef7522f1cc03b61","e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}