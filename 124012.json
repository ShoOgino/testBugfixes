{"path":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.put(\"configName\", actualConfigName);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION_NAME , props.store(), CreateMode.PERSISTENT);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, TIMEOUT,\n          \"localhost\", \"8983\", \"/solr\");\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc2388a5005de25370273411bc713d0ff722805","date":1345719157,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      ZkController zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,String> props = new HashMap<String,String>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["f9a98541130dbb2dd570f39bd89ced65760cad80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a98541130dbb2dd570f39bd89ced65760cad80","date":1355032328,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", \"0\", true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, 10000, 10000, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0b5db1c20d7a379233ae3955449a9e42caef007","date":1394048511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<String,Object>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkController.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n      \n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, 10000,\n          \"127.0.0.1\", \"8983\", \"solr\", 0, 60000, true, new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e11b7252d34d00665befca520dee82fd64aed3c2","date":1429595379,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n          + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, ZkStateReader.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":["bed62fe6383040eaff2ec720cdc55bb1462c61da","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadConfigName().mjava","sourceNew":"  @Test\n  public void testReadConfigName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, () -> null);\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testReadConfigName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String actualConfigName = \"firstConfig\";\n\n      zkClient.makePath(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + actualConfigName, true);\n      \n      Map<String,Object> props = new HashMap<>();\n      props.put(\"configName\", actualConfigName);\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\"\n              + COLLECTION_NAME, Utils.toJSON(zkProps),\n          CreateMode.PERSISTENT, true);\n\n      zkClient.close();\n      \n      cc = getCoreContainer();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n      ZkController zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig,\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      try {\n        String configName = zkController.getZkStateReader().readConfigName(COLLECTION_NAME);\n        assertEquals(configName, actualConfigName);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"001b25b42373b22a52f399dbf072f1224632e8e6":["c51a2dcb8b4e1820a44f35f11961110201e06cdb","adc2388a5005de25370273411bc713d0ff722805"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a7035935aa89f6951286e9005cbeb16e89a082a2","a0b5db1c20d7a379233ae3955449a9e42caef007"],"adc2388a5005de25370273411bc713d0ff722805":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a69439d0df009e0bb0038d1e427159f449dd670d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a69439d0df009e0bb0038d1e427159f449dd670d":["f9a98541130dbb2dd570f39bd89ced65760cad80"],"e15199583d3635cb940942caed05132dd6c4c7c6":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","e15199583d3635cb940942caed05132dd6c4c7c6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b693a83132c9e45afcd564fd65a25b60ed80388b","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["1dca57049fb75fd60d90723d142769094a0402be"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0b5db1c20d7a379233ae3955449a9e42caef007"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1c560208bc8842ee884b76b08784ccb132f05b48":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"fa64435b5902ce266c23755a4a00691a3285dab8":["adc2388a5005de25370273411bc713d0ff722805"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["f4abec28b874149a7223e32cc7a01704c27790de"],"92a4da96826f502cf1a56a096929b37ce73e523a":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["fa64435b5902ce266c23755a4a00691a3285dab8"],"407687e67faf6e1f02a211ca078d8e3eed631027":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","f9a98541130dbb2dd570f39bd89ced65760cad80"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e11b7252d34d00665befca520dee82fd64aed3c2"],"a0b5db1c20d7a379233ae3955449a9e42caef007":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a69439d0df009e0bb0038d1e427159f449dd670d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1dca57049fb75fd60d90723d142769094a0402be":["92a4da96826f502cf1a56a096929b37ce73e523a"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["92a4da96826f502cf1a56a096929b37ce73e523a","a7035935aa89f6951286e9005cbeb16e89a082a2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e11b7252d34d00665befca520dee82fd64aed3c2":["e15199583d3635cb940942caed05132dd6c4c7c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"adc2388a5005de25370273411bc713d0ff722805":["001b25b42373b22a52f399dbf072f1224632e8e6","fa64435b5902ce266c23755a4a00691a3285dab8"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e11b7252d34d00665befca520dee82fd64aed3c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["a69439d0df009e0bb0038d1e427159f449dd670d","407687e67faf6e1f02a211ca078d8e3eed631027"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["96ea64d994d340044e0d57aeb6a5871539d10ca5","a0b5db1c20d7a379233ae3955449a9e42caef007","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["f9a98541130dbb2dd570f39bd89ced65760cad80","407687e67faf6e1f02a211ca078d8e3eed631027"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0b5db1c20d7a379233ae3955449a9e42caef007":["96ea64d994d340044e0d57aeb6a5871539d10ca5","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f4abec28b874149a7223e32cc7a01704c27790de":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["001b25b42373b22a52f399dbf072f1224632e8e6","adc2388a5005de25370273411bc713d0ff722805","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1dca57049fb75fd60d90723d142769094a0402be":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["1c560208bc8842ee884b76b08784ccb132f05b48"],"e11b7252d34d00665befca520dee82fd64aed3c2":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","96ea64d994d340044e0d57aeb6a5871539d10ca5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}