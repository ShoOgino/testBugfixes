{"path":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates new WildcardTermEnum */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n      super(reader, term);\n      searchTerm = term;\n      field = searchTerm.field();\n      text = searchTerm.text();\n\n      int sidx = text.indexOf(WILDCARD_STRING);\n      int cidx = text.indexOf(WILDCARD_CHAR);\n      int idx = sidx;\n      if (idx == -1) idx = cidx;\n      else if (cidx >= 0) idx = Math.min(idx, cidx);\n\n      pre = searchTerm.text().substring(0,idx);\n      preLen = pre.length();\n      text = text.substring(preLen);\n      setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56177790ebd889c3bda8ac967497b9f00ccfa662","date":1050466958,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n      super(reader, term);\n      searchTerm = term;\n      field = searchTerm.field();\n      text = searchTerm.text();\n\n      int sidx = text.indexOf(WILDCARD_STRING);\n      int cidx = text.indexOf(WILDCARD_CHAR);\n      int idx = sidx;\n      if (idx == -1) {\n        idx = cidx;\n      }\n      else if (cidx >= 0) {\n        idx = Math.min(idx, cidx);\n      }\n\n      pre = searchTerm.text().substring(0,idx);\n      preLen = pre.length();\n      text = text.substring(preLen);\n      setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /** Creates new WildcardTermEnum */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n      super(reader, term);\n      searchTerm = term;\n      field = searchTerm.field();\n      text = searchTerm.text();\n\n      int sidx = text.indexOf(WILDCARD_STRING);\n      int cidx = text.indexOf(WILDCARD_CHAR);\n      int idx = sidx;\n      if (idx == -1) idx = cidx;\n      else if (cidx >= 0) idx = Math.min(idx, cidx);\n\n      pre = searchTerm.text().substring(0,idx);\n      preLen = pre.length();\n      text = text.substring(preLen);\n      setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3449282534151d4584c6dd66673158b9d62996a7","date":1063188287,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super(reader, term);\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n      super(reader, term);\n      searchTerm = term;\n      field = searchTerm.field();\n      text = searchTerm.text();\n\n      int sidx = text.indexOf(WILDCARD_STRING);\n      int cidx = text.indexOf(WILDCARD_CHAR);\n      int idx = sidx;\n      if (idx == -1) {\n        idx = cidx;\n      }\n      else if (cidx >= 0) {\n        idx = Math.min(idx, cidx);\n      }\n\n      pre = searchTerm.text().substring(0,idx);\n      preLen = pre.length();\n      text = text.substring(preLen);\n      setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45407913c2be0240c4ab8bf83c83580e522bfba","date":1084296201,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super(reader, term);\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b24692af739249f4a81d97bececd979938b963f","date":1101237744,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n    if (idx != -1) {\n      pre = searchTerm.text().substring(0,idx);\n    } else {\n      pre = \"\";\n    }\n\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.  Passing in a\n   * {@link org.apache.lucene.index.Term Term} that does not contain a\n   * <code>WILDCARD_CHAR</code> will cause an exception to be thrown.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n\n    pre = searchTerm.text().substring(0,idx);\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb73de07ab516ef08711d39ccd5c444e26a64bc","date":1244644796,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    final String searchTermText = searchTerm.text();\n\n    final int sidx = searchTermText.indexOf(WILDCARD_STRING);\n    final int cidx = searchTermText.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n    pre = idx != -1?searchTerm.text().substring(0,idx): \"\";\n\n    preLen = pre.length();\n    text = searchTermText.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    text = searchTerm.text();\n\n    int sidx = text.indexOf(WILDCARD_STRING);\n    int cidx = text.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n    if (idx != -1) {\n      pre = searchTerm.text().substring(0,idx);\n    } else {\n      pre = \"\";\n    }\n\n    preLen = pre.length();\n    text = text.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardTermEnum#WildcardTermEnum(IndexReader,Term).mjava","sourceNew":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    final String searchTermText = searchTerm.text();\n\n    final int sidx = searchTermText.indexOf(WILDCARD_STRING);\n    final int cidx = searchTermText.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n    pre = idx != -1?searchTerm.text().substring(0,idx): \"\";\n\n    preLen = pre.length();\n    text = searchTermText.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>WildcardTermEnum</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists.\n   */\n  public WildcardTermEnum(IndexReader reader, Term term) throws IOException {\n    super();\n    searchTerm = term;\n    field = searchTerm.field();\n    final String searchTermText = searchTerm.text();\n\n    final int sidx = searchTermText.indexOf(WILDCARD_STRING);\n    final int cidx = searchTermText.indexOf(WILDCARD_CHAR);\n    int idx = sidx;\n    if (idx == -1) {\n      idx = cidx;\n    }\n    else if (cidx >= 0) {\n      idx = Math.min(idx, cidx);\n    }\n    pre = idx != -1?searchTerm.text().substring(0,idx): \"\";\n\n    preLen = pre.length();\n    text = searchTermText.substring(preLen);\n    setEnum(reader.terms(new Term(searchTerm.field(), pre)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b24692af739249f4a81d97bececd979938b963f":["f45407913c2be0240c4ab8bf83c83580e522bfba"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f45407913c2be0240c4ab8bf83c83580e522bfba":["3449282534151d4584c6dd66673158b9d62996a7"],"3449282534151d4584c6dd66673158b9d62996a7":["56177790ebd889c3bda8ac967497b9f00ccfa662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8eb73de07ab516ef08711d39ccd5c444e26a64bc":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"56177790ebd889c3bda8ac967497b9f00ccfa662":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8eb73de07ab516ef08711d39ccd5c444e26a64bc"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["2b24692af739249f4a81d97bececd979938b963f"]},"commit2Childs":{"2b24692af739249f4a81d97bececd979938b963f":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["56177790ebd889c3bda8ac967497b9f00ccfa662"],"f45407913c2be0240c4ab8bf83c83580e522bfba":["2b24692af739249f4a81d97bececd979938b963f"],"3449282534151d4584c6dd66673158b9d62996a7":["f45407913c2be0240c4ab8bf83c83580e522bfba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8eb73de07ab516ef08711d39ccd5c444e26a64bc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"56177790ebd889c3bda8ac967497b9f00ccfa662":["3449282534151d4584c6dd66673158b9d62996a7"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["8eb73de07ab516ef08711d39ccd5c444e26a64bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}