{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random())).setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.shutdown();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"121cfdcba6f99c493e7b96a919b7be40205b3d15","date":1407714151,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      final int numDWPT = 1 + atLeast(2);\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool(\n          numDWPT);\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnDeleteTerms());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"130574de275b668a12d70a2c1d9cfc72fbfb76f6","date":1535620307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, writer.getFlushingBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, writer.getFlushingBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, writer.getFlushingBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushDocCount().mjava","sourceNew":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, writer.getFlushingBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFlushDocCount() throws IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    for (int i = 0; i < numThreads.length; i++) {\n\n      final int numDocumentsToIndex =  50 + atLeast(30);\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      Directory dir = newDirectory();\n      MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n      IndexWriterConfig iwc = newIndexWriterConfig(analyzer)\n                                .setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new DocumentsWriterPerThreadPool();\n      iwc.setIndexerThreadPool(threadPool);\n      iwc.setMaxBufferedDocs(2 + atLeast(10));\n      iwc.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      flushPolicy = (MockDefaultFlushPolicy) writer.getConfig().getFlushPolicy();\n      assertTrue(flushPolicy.flushOnDocCount());\n      assertFalse(flushPolicy.flushOnRAM());\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" bytes must be 0 after init\", 0, writer.getFlushingBytes());\n\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n\n      assertEquals(\" all flushes must be due numThreads=\" + numThreads[i], 0,\n          writer.getFlushingBytes());\n      assertEquals(numDocumentsToIndex, writer.getDocStats().numDocs);\n      assertEquals(numDocumentsToIndex, writer.getDocStats().maxDoc);\n      assertTrue(\"peak bytes without flush exceeded watermark\",\n          flushPolicy.peakDocCountWithoutFlush <= iwc.getMaxBufferedDocs());\n      assertActiveBytesAfter(flushControl);\n      writer.close();\n      assertEquals(0, flushControl.activeBytes());\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"130574de275b668a12d70a2c1d9cfc72fbfb76f6":["28288370235ed02234a64753cdbf0c6ec096304a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"121cfdcba6f99c493e7b96a919b7be40205b3d15":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["121cfdcba6f99c493e7b96a919b7be40205b3d15"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["130574de275b668a12d70a2c1d9cfc72fbfb76f6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"130574de275b668a12d70a2c1d9cfc72fbfb76f6":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"121cfdcba6f99c493e7b96a919b7be40205b3d15":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["130574de275b668a12d70a2c1d9cfc72fbfb76f6"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["264935965977b4a9e2f3920420647072c9c49176"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["121cfdcba6f99c493e7b96a919b7be40205b3d15"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}