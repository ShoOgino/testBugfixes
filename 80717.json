{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","commits":[{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","sourceNew":"    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","sourceNew":"    @Override\n    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.UseCompressionResponseInterceptor#process(HttpResponse,HttpContext).mjava","sourceNew":"    @Override\n    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void process(final HttpResponse response, final HttpContext context)\n        throws HttpException, IOException {\n      \n      HttpEntity entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      if (ceheader != null) {\n        HeaderElement[] codecs = ceheader.getElements();\n        for (int i = 0; i < codecs.length; i++) {\n          if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n            response\n                .setEntity(new GzipDecompressingEntity(response.getEntity()));\n            return;\n          }\n          if (codecs[i].getName().equalsIgnoreCase(\"deflate\")) {\n            response.setEntity(new DeflateDecompressingEntity(response\n                .getEntity()));\n            return;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["eb99886ff640d94edb43e0d36112a2b7023379ba","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}