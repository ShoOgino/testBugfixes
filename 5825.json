{"path":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","commits":[{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      public Explanation explain(int doc) throws IOException { return null; }\n      public float score() throws IOException { return 0; }\n      /** @deprecated delete in 3.0. */\n      public int doc() { return 3000; }\n      public int docID() { return doc; }\n      /** @deprecated delete in 3.0 */\n      public boolean next() throws IOException { return nextDoc() != NO_MORE_DOCS; }\n      \n      public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      /** @deprecated delete in 3.0 */\n      public boolean skipTo(int target) throws IOException {\n        return advance(target) != NO_MORE_DOCS;\n      }\n      \n      public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      public Explanation explain(int doc) throws IOException { return null; }\n      public float score() throws IOException { return 0; }\n      public int docID() { return doc; }\n      \n      public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      public Explanation explain(int doc) throws IOException { return null; }\n      public float score() throws IOException { return 0; }\n      /** @deprecated delete in 3.0. */\n      public int doc() { return 3000; }\n      public int docID() { return doc; }\n      /** @deprecated delete in 3.0 */\n      public boolean next() throws IOException { return nextDoc() != NO_MORE_DOCS; }\n      \n      public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      /** @deprecated delete in 3.0 */\n      public boolean skipTo(int target) throws IOException {\n        return advance(target) != NO_MORE_DOCS;\n      }\n      \n      public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      public Explanation explain(int doc) throws IOException { return null; }\n      public float score() throws IOException { return 0; }\n      public int docID() { return doc; }\n      \n      public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanScorer#testEmptyBucketWithMoreDocs().mjava","sourceNew":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","sourceOld":"  public void testEmptyBucketWithMoreDocs() throws Exception {\n    // This test checks the logic of nextDoc() when all sub scorers have docs\n    // beyond the first bucket (for example). Currently, the code relies on the\n    // 'more' variable to work properly, and this test ensures that if the logic\n    // changes, we have a test to back it up.\n    \n    Similarity sim = Similarity.getDefault();\n    Scorer[] scorers = new Scorer[] {new Scorer(sim) {\n      private int doc = -1;\n      @Override public float score() throws IOException { return 0; }\n      @Override public int docID() { return doc; }\n      \n      @Override public int nextDoc() throws IOException {\n        return doc = doc == -1 ? 3000 : NO_MORE_DOCS;\n      }\n\n      @Override public int advance(int target) throws IOException {\n        return doc = target <= 3000 ? 3000 : NO_MORE_DOCS;\n      }\n      \n    }};\n    BooleanScorer bs = new BooleanScorer(sim, 1, Arrays.asList(scorers), null);\n    \n    assertEquals(\"should have received 3000\", 3000, bs.nextDoc());\n    assertEquals(\"should have received NO_MORE_DOCS\", DocIdSetIterator.NO_MORE_DOCS, bs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}