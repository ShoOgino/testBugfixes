{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), random().nextFloat());\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.setDisableCoord(random().nextBoolean());\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d71e3cf3647e39893d150156dcada71d66fbcf3","date":1453227528,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","sourceNew":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), TestUtil.nextInt(random(), 1, 10));\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.setDisableCoord(random().nextBoolean());\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","sourceOld":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), random().nextFloat());\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.setDisableCoord(random().nextBoolean());\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","sourceNew":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), TestUtil.nextInt(random(), 1, 10));\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","sourceOld":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), TestUtil.nextInt(random(), 1, 10));\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.setDisableCoord(random().nextBoolean());\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#randomBooleanQuery().mjava","sourceNew":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), TestUtil.nextInt(random(), 1, 10));\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","sourceOld":"  private Query randomBooleanQuery() {\n    if (random().nextInt(10) == 0) {\n      return new BoostQuery(randomBooleanQuery(), TestUtil.nextInt(random(), 1, 10));\n    }\n    final int numClauses = random().nextInt(5);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.setDisableCoord(random().nextBoolean());\n    int numShoulds = 0;\n    for (int i = 0; i < numClauses; ++i) {\n      final Occur occur = Occur.values()[random().nextInt(Occur.values().length)];\n      if (occur == Occur.SHOULD) {\n        numShoulds++;\n      }\n      final Query query = randomQuery();\n      b.add(query, occur);\n    }\n    b.setMinimumNumberShouldMatch(random().nextBoolean() ? 0 : TestUtil.nextInt(random(), 0, numShoulds + 1));\n    return b.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d71e3cf3647e39893d150156dcada71d66fbcf3":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3d71e3cf3647e39893d150156dcada71d66fbcf3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3d71e3cf3647e39893d150156dcada71d66fbcf3","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3d71e3cf3647e39893d150156dcada71d66fbcf3":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["3d71e3cf3647e39893d150156dcada71d66fbcf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}