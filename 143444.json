{"path":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#cost().mjava","sourceNew":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        if (queryRelation == ShapeField.QueryRelation.DISJOINT) {\n          cost = values.estimatePointCount(disjointVisitor);\n        } else {\n          cost = values.estimatePointCount(visitor);\n        }\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","sourceOld":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        if (queryRelation == QueryRelation.DISJOINT) {\n          cost = values.estimatePointCount(disjointVisitor);\n        } else {\n          cost = values.estimatePointCount(visitor);\n        }\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637ced5887480f9803707c2fc68df68ce0c0bf13","date":1568120036,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","sourceNew":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimatePointCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","sourceOld":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        if (queryRelation == ShapeField.QueryRelation.DISJOINT) {\n          cost = values.estimatePointCount(disjointVisitor);\n        } else {\n          cost = values.estimatePointCount(visitor);\n        }\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","bugFix":null,"bugIntro":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","sourceNew":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimateDocCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","sourceOld":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimatePointCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","bugFix":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","sourceNew":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimateDocCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","sourceOld":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimatePointCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#cost().mjava","sourceNew":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimateDocCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","sourceOld":"    @Override\n    public long cost() {\n      if (cost == -1) {\n        // Computing the cost may be expensive, so only do it if necessary\n        cost = values.estimateDocCount(getEstimateVisitor(query));\n        assert cost >= 0;\n      }\n      return cost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"b0b597c65628ca9e73913a07e81691f8229bae35":["637ced5887480f9803707c2fc68df68ce0c0bf13","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["09c1e6d465800c73af60624bf9d4459a19f7940c","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}