{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptySingletonNFAConcatenate().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"/dev/null","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = Automata.makeString(\"\");\n    Automaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    Automaton concat1 = Operations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = Operations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(Operations.sameLanguage(Operations.determinize(concat1),\n                                       Operations.determinize(concat2)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat1)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat2)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"/dev/null","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = Automata.makeString(\"\");\n    Automaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    Automaton concat1 = Operations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = Operations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(Operations.sameLanguage(Operations.determinize(concat1),\n                                       Operations.determinize(concat2)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat1)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat2)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptySingletonNFAConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptySingletonNFAConcatenate().mjava","sourceNew":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = Automata.makeString(\"\");\n    Automaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    Automaton concat1 = Operations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = Operations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(Operations.sameLanguage(Operations.determinize(concat1, 100),\n                                       Operations.determinize(concat2, 100)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa, 100),\n                                       Operations.determinize(concat1, 100)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa, 100),\n                                       Operations.determinize(concat2, 100)));\n  }\n\n","sourceOld":"  /** Test optimization to concatenate() with empty String to an NFA */\n  public void testEmptySingletonNFAConcatenate() {\n    Automaton singleton = Automata.makeString(\"\");\n    Automaton expandedSingleton = singleton;\n    // an NFA (two transitions for 't' from initial state)\n    Automaton nfa = Operations.union(Automata.makeString(\"this\"),\n        Automata.makeString(\"three\"));\n    Automaton concat1 = Operations.concatenate(expandedSingleton, nfa);\n    Automaton concat2 = Operations.concatenate(singleton, nfa);\n    assertFalse(concat2.isDeterministic());\n    assertTrue(Operations.sameLanguage(Operations.determinize(concat1),\n                                       Operations.determinize(concat2)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat1)));\n    assertTrue(Operations.sameLanguage(Operations.determinize(nfa),\n                                       Operations.determinize(concat2)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}