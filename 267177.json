{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#copyIndexFiles(File,File).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean copyIndexFiles(File tmpIdxDir, File indexDir) {\n    String segmentsFile = null;\n    List<String> copiedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!copyAFile(tmpIdxDir, indexDir, fname, copiedfiles)) return false;\n      copiedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!copyAFile(tmpIdxDir, indexDir, segmentsFile, copiedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"190779ba7de3fda15afd1bbafbc383720a4b0966","date":1384747256,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<String>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    List<String> movedfiles = new ArrayList<>();\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname, movedfiles)) return false;\n      movedfiles.add(fname);\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile, movedfiles)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveIndexFiles(Directory,Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#moveIndexFiles(Directory,Directory).mjava","sourceNew":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all index files from the temp index dir to the actual index. The segments_N file is copied last.\n   */\n  private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    if (LOG.isDebugEnabled()) {\n      try {\n        LOG.info(\"From dir files:\" + Arrays.asList(tmpIdxDir.listAll()));\n        LOG.info(\"To dir files:\" + Arrays.asList(indexDir.listAll()));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    String segmentsFile = null;\n    for (Map<String, Object> f : filesDownloaded) {\n      String fname = (String) f.get(NAME);\n      // the segments file must be copied last\n      // or else if there is a failure in between the\n      // index will be corrupted\n      if (fname.startsWith(\"segments_\")) {\n        //The segments file must be copied in the end\n        //Otherwise , if the copy fails index ends up corrupted\n        segmentsFile = fname;\n        continue;\n      }\n      if (!moveAFile(tmpIdxDir, indexDir, fname)) return false;\n    }\n    //copy the segments file last\n    if (segmentsFile != null) {\n      if (!moveAFile(tmpIdxDir, indexDir, segmentsFile)) return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["190779ba7de3fda15afd1bbafbc383720a4b0966"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d9405f486872f1e416304dfe389741f4ee2f8a4d","190779ba7de3fda15afd1bbafbc383720a4b0966"],"190779ba7de3fda15afd1bbafbc383720a4b0966":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"190779ba7de3fda15afd1bbafbc383720a4b0966":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","190779ba7de3fda15afd1bbafbc383720a4b0966","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}