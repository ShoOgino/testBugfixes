{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","commits":[{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores and alphanumerics\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af1d911cebbfb7726a0e0aab6dc222df6297930c","date":1455840238,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, and alphanumerics\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, and alphanumerics\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1223af4d627bf4c69c653e7617110e161a39d3e8","date":1457558158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (SolrException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    SolrException e = expectThrows(SolrException.class, () -> createRequest.setCoreName(\"invalid$core@name\"));\n    final String exceptionMessage = e.getMessage();\n    assertTrue(exceptionMessage.contains(\"Invalid core\"));\n    assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n    assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (SolrException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    SolrException e = expectThrows(SolrException.class, () -> createRequest.setCoreName(\"invalid$core@name\"));\n    final String exceptionMessage = e.getMessage();\n    assertTrue(exceptionMessage.contains(\"Invalid core\"));\n    assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n    assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (SolrException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testInvalidCoreNamesAreRejectedWhenCreatingCore().mjava","sourceNew":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    SolrException e = expectThrows(SolrException.class, () -> createRequest.setCoreName(\"invalid$core@name\"));\n    final String exceptionMessage = e.getMessage();\n    assertTrue(exceptionMessage.contains(\"Invalid core\"));\n    assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n    assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidCoreNamesAreRejectedWhenCreatingCore() {\n    final Create createRequest = new Create();\n    \n    try {\n      createRequest.setCoreName(\"invalid$core@name\");\n      fail();\n    } catch (SolrException e) {\n      final String exceptionMessage = e.getMessage();\n      assertTrue(exceptionMessage.contains(\"Invalid core\"));\n      assertTrue(exceptionMessage.contains(\"invalid$core@name\"));\n      assertTrue(exceptionMessage.contains(\"must consist entirely of periods, underscores, hyphens, and alphanumerics\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a839eb6696740aa302262e32e6f45b5e70b47bff":["06043fcf612d2cd93636c22cd062e0641406b417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["1223af4d627bf4c69c653e7617110e161a39d3e8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["06043fcf612d2cd93636c22cd062e0641406b417","a839eb6696740aa302262e32e6f45b5e70b47bff"],"1223af4d627bf4c69c653e7617110e161a39d3e8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["1223af4d627bf4c69c653e7617110e161a39d3e8","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"06043fcf612d2cd93636c22cd062e0641406b417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af1d911cebbfb7726a0e0aab6dc222df6297930c"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1223af4d627bf4c69c653e7617110e161a39d3e8","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"af1d911cebbfb7726a0e0aab6dc222df6297930c":["cbd8af67010775ee4b53c58597a30bbe480707ee"]},"commit2Childs":{"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1223af4d627bf4c69c653e7617110e161a39d3e8"],"1223af4d627bf4c69c653e7617110e161a39d3e8":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"06043fcf612d2cd93636c22cd062e0641406b417":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["af1d911cebbfb7726a0e0aab6dc222df6297930c"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"af1d911cebbfb7726a0e0aab6dc222df6297930c":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}