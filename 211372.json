{"path":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n        }\n        if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n          pendingChildScores = ArrayUtil.grow(pendingChildScores);\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          if (scoreMode != ScoreMode.None) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3548d95924aea5ee6d88499a7d166498a8e49","date":1328909332,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      // Loop until we hit a parentDoc that's accepted\n      while (true) {\n        if (nextChildDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  end\");\n          return parentDoc = NO_MORE_DOCS;\n        }\n\n        // Gather all children sharing the same parent as\n        // nextChildDoc\n\n        parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n        //System.out.println(\"  parentDoc=\" + parentDoc);\n        assert parentDoc != -1;\n\n        //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n          // Parent doc not accepted; skip child docs until\n          // we hit a new parent doc:\n          do {\n            nextChildDoc = childScorer.nextDoc();\n          } while (nextChildDoc < parentDoc);\n          continue;\n        }\n\n        float totalScore = 0;\n        float maxScore = Float.NEGATIVE_INFINITY;\n\n        childDocUpto = 0;\n        do {\n          //System.out.println(\"  c=\" + nextChildDoc);\n          if (pendingChildDocs.length == childDocUpto) {\n            pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          }\n          if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n          pendingChildDocs[childDocUpto] = nextChildDoc;\n          if (scoreMode != ScoreMode.None) {\n            // TODO: specialize this into dedicated classes per-scoreMode\n            final float childScore = childScorer.score();\n            pendingChildScores[childDocUpto] = childScore;\n            maxScore = Math.max(childScore, maxScore);\n            totalScore += childScore;\n          }\n          childDocUpto++;\n          nextChildDoc = childScorer.nextDoc();\n        } while (nextChildDoc < parentDoc);\n\n        // Parent & child docs are supposed to be orthogonal:\n        assert nextChildDoc != parentDoc;\n\n        switch(scoreMode) {\n        case Avg:\n          parentScore = totalScore / childDocUpto;\n          break;\n        case Max:\n          parentScore = maxScore;\n          break;\n        case Total:\n          parentScore = totalScore;\n          break;\n        case None:\n          break;\n        }\n\n        //System.out.println(\"  return parentDoc=\" + parentDoc);\n        return parentDoc;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      if (nextChildDoc == NO_MORE_DOCS) {\n        //System.out.println(\"  end\");\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Gather all children sharing the same parent as nextChildDoc\n      parentDoc = parentBits.nextSetBit(nextChildDoc);\n      //System.out.println(\"  parentDoc=\" + parentDoc);\n      assert parentDoc != -1;\n\n      float totalScore = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      childDocUpto = 0;\n      do {\n        //System.out.println(\"  c=\" + nextChildDoc);\n        if (pendingChildDocs.length == childDocUpto) {\n          pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n        }\n        if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n          pendingChildScores = ArrayUtil.grow(pendingChildScores);\n        }\n        pendingChildDocs[childDocUpto] = nextChildDoc;\n        if (scoreMode != ScoreMode.None) {\n          // TODO: specialize this into dedicated classes per-scoreMode\n          final float childScore = childScorer.score();\n          pendingChildScores[childDocUpto] = childScore;\n          maxScore = Math.max(childScore, maxScore);\n          totalScore += childScore;\n        }\n        childDocUpto++;\n        nextChildDoc = childScorer.nextDoc();\n      } while (nextChildDoc < parentDoc);\n      //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != parentDoc;\n\n      switch(scoreMode) {\n      case Avg:\n        parentScore = totalScore / childDocUpto;\n        break;\n      case Max:\n        parentScore = maxScore;\n        break;\n      case Total:\n        parentScore = totalScore;\n        break;\n      case None:\n        break;\n      }\n\n      //System.out.println(\"  return parentDoc=\" + parentDoc);\n      return parentDoc;\n    }\n\n","bugFix":null,"bugIntro":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f918f6e4bff7afea488f1928f7a7ec05338d479f","date":1331745861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      // Loop until we hit a parentDoc that's accepted\n      while (true) {\n        if (nextChildDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  end\");\n          return parentDoc = NO_MORE_DOCS;\n        }\n\n        // Gather all children sharing the same parent as\n        // nextChildDoc\n\n        parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n        //System.out.println(\"  parentDoc=\" + parentDoc);\n        assert parentDoc != -1;\n\n        //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n          // Parent doc not accepted; skip child docs until\n          // we hit a new parent doc:\n          do {\n            nextChildDoc = childScorer.nextDoc();\n          } while (nextChildDoc < parentDoc);\n          continue;\n        }\n\n        float totalScore = 0;\n        float maxScore = Float.NEGATIVE_INFINITY;\n\n        childDocUpto = 0;\n        do {\n\n          //System.out.println(\"  c=\" + nextChildDoc);\n          if (pendingChildDocs.length == childDocUpto) {\n            pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          }\n          if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n          pendingChildDocs[childDocUpto] = nextChildDoc;\n          if (scoreMode != ScoreMode.None) {\n            // TODO: specialize this into dedicated classes per-scoreMode\n            final float childScore = childScorer.score();\n            pendingChildScores[childDocUpto] = childScore;\n            maxScore = Math.max(childScore, maxScore);\n            totalScore += childScore;\n          }\n          childDocUpto++;\n          nextChildDoc = childScorer.nextDoc();\n        } while (nextChildDoc < parentDoc);\n\n        // Parent & child docs are supposed to be orthogonal:\n        assert nextChildDoc != parentDoc;\n\n        switch(scoreMode) {\n        case Avg:\n          parentScore = totalScore / childDocUpto;\n          break;\n        case Max:\n          parentScore = maxScore;\n          break;\n        case Total:\n          parentScore = totalScore;\n          break;\n        case None:\n          break;\n        }\n\n        //System.out.println(\"  return parentDoc=\" + parentDoc);\n        return parentDoc;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      // Loop until we hit a parentDoc that's accepted\n      while (true) {\n        if (nextChildDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  end\");\n          return parentDoc = NO_MORE_DOCS;\n        }\n\n        // Gather all children sharing the same parent as\n        // nextChildDoc\n\n        parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n        //System.out.println(\"  parentDoc=\" + parentDoc);\n        assert parentDoc != -1;\n\n        //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n          // Parent doc not accepted; skip child docs until\n          // we hit a new parent doc:\n          do {\n            nextChildDoc = childScorer.nextDoc();\n          } while (nextChildDoc < parentDoc);\n          continue;\n        }\n\n        float totalScore = 0;\n        float maxScore = Float.NEGATIVE_INFINITY;\n\n        childDocUpto = 0;\n        do {\n          //System.out.println(\"  c=\" + nextChildDoc);\n          if (pendingChildDocs.length == childDocUpto) {\n            pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          }\n          if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n          pendingChildDocs[childDocUpto] = nextChildDoc;\n          if (scoreMode != ScoreMode.None) {\n            // TODO: specialize this into dedicated classes per-scoreMode\n            final float childScore = childScorer.score();\n            pendingChildScores[childDocUpto] = childScore;\n            maxScore = Math.max(childScore, maxScore);\n            totalScore += childScore;\n          }\n          childDocUpto++;\n          nextChildDoc = childScorer.nextDoc();\n        } while (nextChildDoc < parentDoc);\n\n        // Parent & child docs are supposed to be orthogonal:\n        assert nextChildDoc != parentDoc;\n\n        switch(scoreMode) {\n        case Avg:\n          parentScore = totalScore / childDocUpto;\n          break;\n        case Max:\n          parentScore = maxScore;\n          break;\n        case Total:\n          parentScore = totalScore;\n          break;\n        case None:\n          break;\n        }\n\n        //System.out.println(\"  return parentDoc=\" + parentDoc);\n        return parentDoc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      // Loop until we hit a parentDoc that's accepted\n      while (true) {\n        if (nextChildDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  end\");\n          return parentDoc = NO_MORE_DOCS;\n        }\n\n        // Gather all children sharing the same parent as\n        // nextChildDoc\n\n        parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n        //System.out.println(\"  parentDoc=\" + parentDoc);\n        assert parentDoc != -1;\n\n        //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n          // Parent doc not accepted; skip child docs until\n          // we hit a new parent doc:\n          do {\n            nextChildDoc = childScorer.nextDoc();\n          } while (nextChildDoc < parentDoc);\n          continue;\n        }\n\n        float totalScore = 0;\n        float maxScore = Float.NEGATIVE_INFINITY;\n\n        childDocUpto = 0;\n        do {\n\n          //System.out.println(\"  c=\" + nextChildDoc);\n          if (pendingChildDocs.length == childDocUpto) {\n            pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          }\n          if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n          pendingChildDocs[childDocUpto] = nextChildDoc;\n          if (scoreMode != ScoreMode.None) {\n            // TODO: specialize this into dedicated classes per-scoreMode\n            final float childScore = childScorer.score();\n            pendingChildScores[childDocUpto] = childScore;\n            maxScore = Math.max(childScore, maxScore);\n            totalScore += childScore;\n          }\n          childDocUpto++;\n          nextChildDoc = childScorer.nextDoc();\n        } while (nextChildDoc < parentDoc);\n\n        // Parent & child docs are supposed to be orthogonal:\n        assert nextChildDoc != parentDoc;\n\n        switch(scoreMode) {\n        case Avg:\n          parentScore = totalScore / childDocUpto;\n          break;\n        case Max:\n          parentScore = maxScore;\n          break;\n        case Total:\n          parentScore = totalScore;\n          break;\n        case None:\n          break;\n        }\n\n        //System.out.println(\"  return parentDoc=\" + parentDoc);\n        return parentDoc;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n\n      // Loop until we hit a parentDoc that's accepted\n      while (true) {\n        if (nextChildDoc == NO_MORE_DOCS) {\n          //System.out.println(\"  end\");\n          return parentDoc = NO_MORE_DOCS;\n        }\n\n        // Gather all children sharing the same parent as\n        // nextChildDoc\n\n        parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n        //System.out.println(\"  parentDoc=\" + parentDoc);\n        assert parentDoc != -1;\n\n        //System.out.println(\"  nextChildDoc=\" + nextChildDoc);\n        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n          // Parent doc not accepted; skip child docs until\n          // we hit a new parent doc:\n          do {\n            nextChildDoc = childScorer.nextDoc();\n          } while (nextChildDoc < parentDoc);\n          continue;\n        }\n\n        float totalScore = 0;\n        float maxScore = Float.NEGATIVE_INFINITY;\n\n        childDocUpto = 0;\n        do {\n\n          //System.out.println(\"  c=\" + nextChildDoc);\n          if (pendingChildDocs.length == childDocUpto) {\n            pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n          }\n          if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n            pendingChildScores = ArrayUtil.grow(pendingChildScores);\n          }\n          pendingChildDocs[childDocUpto] = nextChildDoc;\n          if (scoreMode != ScoreMode.None) {\n            // TODO: specialize this into dedicated classes per-scoreMode\n            final float childScore = childScorer.score();\n            pendingChildScores[childDocUpto] = childScore;\n            maxScore = Math.max(childScore, maxScore);\n            totalScore += childScore;\n          }\n          childDocUpto++;\n          nextChildDoc = childScorer.nextDoc();\n        } while (nextChildDoc < parentDoc);\n\n        // Parent & child docs are supposed to be orthogonal:\n        assert nextChildDoc != parentDoc;\n\n        switch(scoreMode) {\n        case Avg:\n          parentScore = totalScore / childDocUpto;\n          break;\n        case Max:\n          parentScore = maxScore;\n          break;\n        case Total:\n          parentScore = totalScore;\n          break;\n        case None:\n          break;\n        }\n\n        //System.out.println(\"  return parentDoc=\" + parentDoc);\n        return parentDoc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["f918f6e4bff7afea488f1928f7a7ec05338d479f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"f918f6e4bff7afea488f1928f7a7ec05338d479f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}