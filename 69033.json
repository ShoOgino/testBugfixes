{"path":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(new Field(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(new Field(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n\n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","53a31399f2471493d67b19a95c028a74e0113b6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, ANALYZER)\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergeScheduler(\n            merger));\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      // System.out.println(\"TEST: now index=\" + writer.segString());\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"/dev/null","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      //writer.setInfoStream(System.out);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED_NO_NORMS));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory,MergeScheduler).mjava","sourceNew":null,"sourceOld":"  public void runTest(Random random, Directory directory, MergeScheduler merger) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(merger).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(newField(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, Field.Store.YES, Field.Index.NOT_ANALYZED));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), Field.Store.NO, Field.Index.ANALYZED));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","cca56866c19997e28ef073622656669c15210540"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["3bb13258feba31ab676502787ab2e1779f129b7a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","53a31399f2471493d67b19a95c028a74e0113b6a"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["53a31399f2471493d67b19a95c028a74e0113b6a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"53a31399f2471493d67b19a95c028a74e0113b6a":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["f1bdbf92da222965b46c0a942c3857ba56e5c638","cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cca56866c19997e28ef073622656669c15210540"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f1bdbf92da222965b46c0a942c3857ba56e5c638","cca56866c19997e28ef073622656669c15210540","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}