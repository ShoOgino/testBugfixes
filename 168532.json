{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader();\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":["76d2012ed2cc7e019ab72e50032734abf73ff8ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader();\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader(0);\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76d2012ed2cc7e019ab72e50032734abf73ff8ef","date":1393409514,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader();\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    this.fstReader = fst.getBytesReader();\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<BytesRef>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter#SynonymFilter(TokenStream,SynonymMap,boolean).mjava","sourceNew":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, it's your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<>();\n  }\n\n","sourceOld":"  /**\n   * @param input input tokenstream\n   * @param synonyms synonym map\n   * @param ignoreCase case-folds input for matching with {@link Character#toLowerCase(int)}.\n   *                   Note, if you set this to true, its your responsibility to lowercase\n   *                   the input entries when you create the {@link SynonymMap}\n   */\n  public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {\n    super(input);\n    this.synonyms = synonyms;\n    this.ignoreCase = ignoreCase;\n    this.fst = synonyms.fst;\n    if (fst == null) {\n      throw new IllegalArgumentException(\"fst must be non-null\");\n    }\n    this.fstReader = fst.getBytesReader();\n\n    // Must be 1+ so that when roll buffer is at full\n    // lookahead we can distinguish this full buffer from\n    // the empty buffer:\n    rollBufferSize = 1+synonyms.maxHorizontalContext;\n\n    futureInputs = new PendingInput[rollBufferSize];\n    futureOutputs = new PendingOutputs[rollBufferSize];\n    for(int pos=0;pos<rollBufferSize;pos++) {\n      futureInputs[pos] = new PendingInput();\n      futureOutputs[pos] = new PendingOutputs();\n    }\n\n    //System.out.println(\"FSTFilt maxH=\" + synonyms.maxHorizontalContext);\n\n    scratchArc = new FST.Arc<>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["76d2012ed2cc7e019ab72e50032734abf73ff8ef"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76d2012ed2cc7e019ab72e50032734abf73ff8ef":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["82557a475db3e0849171dc0be5b02e3ae0745ddb","76d2012ed2cc7e019ab72e50032734abf73ff8ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["c4015cd39dff8d4dec562d909f9766debac53aa6","76d2012ed2cc7e019ab72e50032734abf73ff8ef","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76d2012ed2cc7e019ab72e50032734abf73ff8ef":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}