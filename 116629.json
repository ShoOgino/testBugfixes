{"path":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testRollback().mjava","commits":[{"id":"1d60e292705ee7b33afc5626438b30e694160930","date":1341229584,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testRollback().mjava","sourceNew":"  public void testRollback() throws Exception {\n    // tests that rollback is called if failure occurs at any stage\n    int numObjects = random().nextInt(8) + 3; // between [3, 10]\n    TwoPhaseCommitImpl[] objects = new TwoPhaseCommitImpl[numObjects];\n    for (int i = 0; i < objects.length; i++) {\n      boolean failOnPrepare = random().nextBoolean();\n      // we should not hit failures on commit usually\n      boolean failOnCommit = random().nextDouble() < 0.05;\n      boolean railOnRollback = random().nextBoolean();\n      objects[i] = new TwoPhaseCommitImpl(failOnPrepare, failOnCommit, railOnRollback);\n    }\n\n    boolean anyFailure = false;\n    try {\n      TwoPhaseCommitTool.execute(objects);\n    } catch (Throwable t) {\n      anyFailure = true;\n    }\n\n    if (anyFailure) {\n      // if any failure happened, ensure that rollback was called on all.\n      for (TwoPhaseCommitImpl tpc : objects) {\n        assertTrue(\"rollback was not called while a failure occurred during the 2-phase commit\", tpc.rollbackCalled);\n      }\n    }\n  }\n\n","sourceOld":"  public void testRollback() throws Exception {\n    // tests that rollback is called if failure occurs at any stage\n    int numObjects = random().nextInt(8) + 3; // between [3, 10]\n    TwoPhaseCommitImpl[] objects = new TwoPhaseCommitImpl[numObjects];\n    for (int i = 0; i < objects.length; i++) {\n      boolean failOnPrepare = random().nextBoolean();\n      // we should not hit failures on commit usually\n      boolean failOnCommit = random().nextDouble() < 0.05;\n      boolean railOnRollback = random().nextBoolean();\n      objects[i] = new TwoPhaseCommitImpl(failOnPrepare, failOnCommit, railOnRollback);\n    }\n\n    boolean anyFailure = false;\n    try {\n      TwoPhaseCommitTool.execute(objects);\n    } catch (Throwable t) {\n      anyFailure = true;\n    }\n\n    if (anyFailure) {\n      // if any failure happened, ensure that rollback was called on all.\n      for (TwoPhaseCommitImpl tpc : objects) {\n        assertTrue(\"rollback was not called while a failure occurred during the 2-phase commit\", tpc.rollbackCalled);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testRollback().mjava","sourceNew":"  public void testRollback() throws Exception {\n    // tests that rollback is called if failure occurs at any stage\n    int numObjects = random().nextInt(8) + 3; // between [3, 10]\n    TwoPhaseCommitImpl[] objects = new TwoPhaseCommitImpl[numObjects];\n    for (int i = 0; i < objects.length; i++) {\n      boolean failOnPrepare = random().nextBoolean();\n      // we should not hit failures on commit usually\n      boolean failOnCommit = random().nextDouble() < 0.05;\n      boolean railOnRollback = random().nextBoolean();\n      objects[i] = new TwoPhaseCommitImpl(failOnPrepare, failOnCommit, railOnRollback);\n    }\n\n    boolean anyFailure = false;\n    try {\n      TwoPhaseCommitTool.execute(objects);\n    } catch (Throwable t) {\n      anyFailure = true;\n    }\n\n    if (anyFailure) {\n      // if any failure happened, ensure that rollback was called on all.\n      for (TwoPhaseCommitImpl tpc : objects) {\n        assertTrue(\"rollback was not called while a failure occurred during the 2-phase commit\", tpc.rollbackCalled);\n      }\n    }\n  }\n\n","sourceOld":"  public void testRollback() throws Exception {\n    // tests that rollback is called if failure occurs at any stage\n    int numObjects = random().nextInt(8) + 3; // between [3, 10]\n    TwoPhaseCommitImpl[] objects = new TwoPhaseCommitImpl[numObjects];\n    for (int i = 0; i < objects.length; i++) {\n      boolean failOnPrepare = random().nextBoolean();\n      // we should not hit failures on commit usually\n      boolean failOnCommit = random().nextDouble() < 0.05;\n      boolean railOnRollback = random().nextBoolean();\n      objects[i] = new TwoPhaseCommitImpl(failOnPrepare, failOnCommit, railOnRollback);\n    }\n\n    boolean anyFailure = false;\n    try {\n      TwoPhaseCommitTool.execute(objects);\n    } catch (Throwable t) {\n      anyFailure = true;\n    }\n\n    if (anyFailure) {\n      // if any failure happened, ensure that rollback was called on all.\n      for (TwoPhaseCommitImpl tpc : objects) {\n        assertTrue(\"rollback was not called while a failure occurred during the 2-phase commit\", tpc.rollbackCalled);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d60e292705ee7b33afc5626438b30e694160930":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d60e292705ee7b33afc5626438b30e694160930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d60e292705ee7b33afc5626438b30e694160930"]},"commit2Childs":{"1d60e292705ee7b33afc5626438b30e694160930":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d60e292705ee7b33afc5626438b30e694160930","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}