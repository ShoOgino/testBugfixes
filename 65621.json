{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(data, field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b873e6a2036c1deda886d1fcf6ba42c995dd15a0","date":1408410832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(data, field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","bugFix":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(field, bytes);\n    final ReverseTermsIndex index = getReverseIndexInstance(field, bytes);\n    assert addresses.size() > 0; // we don't have to handle empty case\n    IndexInput slice = data.slice(\"terms\", bytes.offset, bytes.addressesOffset - bytes.offset);\n    return new CompressedBinaryDocValues(bytes, addresses, index, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"]},"commit2Childs":{"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}