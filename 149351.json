{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    throw new UnsupportedOperationException(); // nocommit\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    addNumericField(field, ords);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    throw new UnsupportedOperationException(); // nocommit\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","date":1361042054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    addNumericField(field, ords);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addBinaryField(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["0ad01348544f9eb6ee985c300245013a75addfc6"],"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"0ad01348544f9eb6ee985c300245013a75addfc6":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["f366ce28775e2b8ea4e06355009471328711666d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0ad01348544f9eb6ee985c300245013a75addfc6":["11a746437bc5c0a0b3df0337ed249c387c812871","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0ad01348544f9eb6ee985c300245013a75addfc6"],"f366ce28775e2b8ea4e06355009471328711666d":["f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}