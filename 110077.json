{"path":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","commits":[{"id":"5d01393ee15c09415a2d4d8610aef0ec780a5e5f","date":1184714576,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"/dev/null","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039","d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dafe85e64882d66ce66ed420d8678b85022b466","date":1190126644,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.listAll();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.listAll();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.list();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.list();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        try {\n          modifier.addDocument(doc);\n        } catch (IOException io) {\n          break;\n        }\n      }\n\n      String[] startFiles = dir.listAll();\n      SegmentInfos infos = new SegmentInfos();\n      infos.read(dir);\n      new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n      String[] endFiles = dir.listAll();\n\n      if (!Arrays.equals(startFiles, endFiles)) {\n        fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n             + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n             + arrayToString(endFiles));\n      }\n\n      modifier.close();\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["3dafe85e64882d66ce66ed420d8678b85022b466"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["87c966e9308847938a7c905c2e46a56d8df788b8"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"3dafe85e64882d66ce66ed420d8678b85022b466":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["3dafe85e64882d66ce66ed420d8678b85022b466"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3dafe85e64882d66ce66ed420d8678b85022b466":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}