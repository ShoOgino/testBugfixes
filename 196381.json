{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef;\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef;  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as it's valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as its valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as it's valid\n      if (runAutomaton.isAccept(0)) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as it's valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as it's valid\n      if (runAutomaton.isAccept(0)) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","sourceOld":"  @Override\n  protected BytesRef nextSeekTerm(final BytesRef term) throws IOException {\n    //System.out.println(\"ATE.nextSeekTerm term=\" + term);\n    if (term == null) {\n      assert seekBytesRef.length() == 0;\n      // return the empty term, as it's valid\n      if (runAutomaton.isAccept(runAutomaton.getInitialState())) {   \n        return seekBytesRef.get();\n      }\n    } else {\n      seekBytesRef.copyBytes(term);\n    }\n\n    // seek to the next possible string;\n    if (nextString()) {\n      return seekBytesRef.get();  // reposition\n    } else {\n      return null;          // no more possible strings can match\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}