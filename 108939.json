{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    // Normal term match\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    query.add(\"fl\", \"[fv]\");\n    query.add(\"rq\", \"{!ltr model=originalScore reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + doc0Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==\"\n        + doc1Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==\"\n        + doc2Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==\"\n        + doc3Score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    // Normal term match\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    query.add(\"fl\", \"[fv]\");\n    query.add(\"rq\", \"{!ltr model=originalScore reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + doc0Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==\"\n        + doc1Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==\"\n        + doc2Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==\"\n        + doc3Score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"355e2dd55d9b49981e73c768a54a747cd9368043","date":1491217809,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    // Normal term match\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    query.add(\"fl\", \"[fv]\");\n    query.add(\"rq\", \"{!ltr model=originalScore reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + doc0Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==\"\n        + doc1Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==\"\n        + doc2Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==\"\n        + doc3Score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","date":1491296430,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n\n    // Normal term match\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    query.add(\"fl\", \"[fv]\");\n    query.add(\"rq\", \"{!ltr model=originalScore reRankDocs=4}\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + doc0Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==\"\n        + doc1Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==\"\n        + doc2Score);\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==\"\n        + doc3Score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScore().mjava","sourceNew":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScore() throws Exception {\n    loadFeature(\"score\", OriginalScoreFeature.class.getCanonicalName(), \"{}\");\n    loadModel(\"originalScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"score\"}, \"{\\\"weights\\\":{\\\"score\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"originalScore\", \"score\", null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"355e2dd55d9b49981e73c768a54a747cd9368043":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["355e2dd55d9b49981e73c768a54a747cd9368043"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["355e2dd55d9b49981e73c768a54a747cd9368043","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"355e2dd55d9b49981e73c768a54a747cd9368043":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","3f906c3206e7eb174774f938416460e39170d819"],"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["355e2dd55d9b49981e73c768a54a747cd9368043","9720b151fde2073f4e401450f4574e5f31c2d0ff","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}