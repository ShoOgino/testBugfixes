{"path":"lucene/core/src/test/org/apache/lucene/store/TestStressLockFactories#runImpl(Class[#-extends-LockFactory]).mjava","commits":[{"id":"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760","date":1599669750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestStressLockFactories#runImpl(Class[#-extends-LockFactory]).mjava","pathOld":"/dev/null","sourceNew":"  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n    final int clients = TEST_NIGHTLY ? 5 : 2;\n    final String host = \"127.0.0.1\";\n    final int delay = 1;\n    final int rounds = (TEST_NIGHTLY ? 30000 : 500) * RANDOM_MULTIPLIER;\n    \n    final Path dir = createTempDir(impl.getSimpleName());\n    \n    final List<Process> processes = new ArrayList<>(clients);\n\n    LockVerifyServer.run(host, clients, addr -> {\n      // spawn clients as separate Java processes\n      for (int i = 0; i < clients; i++) {\n        try {\n          processes.add(applyRedirection(new ProcessBuilder(\n              Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n              \"-Xmx32M\",\n              \"-cp\",\n              System.getProperty(\"java.class.path\"),\n              LockStressTest.class.getName(),\n              Integer.toString(i),\n              addr.getHostString(),\n              Integer.toString(addr.getPort()),\n              impl.getName(),\n              dir.toString(),\n              Integer.toString(delay),\n              Integer.toString(rounds)\n            ), i, dir).start());\n        } catch (IOException ioe) {\n          throw new AssertionError(\"Failed to start child process.\", ioe);\n        }\n      }\n    });\n     \n    // wait for all processes to exit...\n    try {\n      for (Process p : processes) {\n        if (p.waitFor(15, TimeUnit.SECONDS)) {\n          assertEquals(\"Process \" + p.pid() + \" died abnormally?\", 0, p.waitFor());\n        }\n      }\n    } finally {\n      // kill all processes, which are still alive.\n      for (Process p : processes) {\n        if (p.isAlive()) {\n          p.destroyForcibly().waitFor();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7ee2241d9fc5dee5029efe24602d8a4d2b4d760"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7ee2241d9fc5dee5029efe24602d8a4d2b4d760"],"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}