{"path":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int,Store).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   * @param store How <code>value</code> should be stored (compressed or not)\n   * @throws IllegalArgumentException if store is <code>Store.NO</code> \n   * @deprecated Use {@link #Field(String, byte[], int, int) instead}\n   */\n  @Deprecated\n  public Field(String name, byte[] value, int offset, int length, Store store) {\n    this(name, value, offset, length);\n\n    if (store == Store.NO) {\n      throw new IllegalArgumentException(\"binary values can't be unstored\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}