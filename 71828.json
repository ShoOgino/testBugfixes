{"path":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","commits":[{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);\n      return new CustomScoreProvider(reader) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= reader.maxDoc());\n          return (float) values[doc];\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);\n      return new CustomScoreProvider(reader) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);\n      return new CustomScoreProvider(reader) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= reader.maxDoc());\n          return (float) values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(IndexReader).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);\n      return new CustomScoreProvider(reader) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) throws IOException {\n      final int[] values = FieldCache.DEFAULT.getInts(reader, INT_FIELD);\n      return new CustomScoreProvider(reader) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= reader.maxDoc());\n          return values[doc];\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"affefdda19991b74568e601456baad0c8e5c2f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["affefdda19991b74568e601456baad0c8e5c2f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["affefdda19991b74568e601456baad0c8e5c2f65"],"affefdda19991b74568e601456baad0c8e5c2f65":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}