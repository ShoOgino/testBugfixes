{"path":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}