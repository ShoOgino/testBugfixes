{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(TrackingIndexWriter,SearcherFactory,boolean).mjava","commits":[{"id":"2c36db4818c5eba16bdcbedab4f06dd69ae59190","date":1329160108,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(TrackingIndexWriter,SearcherFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(TrackingIndexWriter,SearcherFactory)},\n   * but you can also specify whether each reopened searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(TrackingIndexWriter writer, SearcherFactory searcherFactory, boolean applyDeletes) throws IOException {\n    this.writer = writer;\n    mgr = new SearcherManager(writer.getIndexWriter(), applyDeletes, searcherFactory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(TrackingIndexWriter,SearcherFactory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(TrackingIndexWriter,SearcherFactory,boolean).mjava","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(TrackingIndexWriter,SearcherFactory)},\n   * but you can also specify whether each reopened searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(TrackingIndexWriter writer, SearcherFactory searcherFactory, boolean applyAllDeletes) throws IOException {\n    this.writer = writer;\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(writer.getIndexWriter(), applyAllDeletes));\n  }\n\n","sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(TrackingIndexWriter,SearcherFactory)},\n   * but you can also specify whether each reopened searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(TrackingIndexWriter writer, SearcherFactory searcherFactory, boolean applyDeletes) throws IOException {\n    this.writer = writer;\n    mgr = new SearcherManager(writer.getIndexWriter(), applyDeletes, searcherFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(TrackingIndexWriter,SearcherFactory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(TrackingIndexWriter,SearcherFactory)},\n   * but you can also specify whether each reopened searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(TrackingIndexWriter writer, SearcherFactory searcherFactory, boolean applyAllDeletes) throws IOException {\n    this.writer = writer;\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = SearcherManager.getSearcher(searcherFactory, DirectoryReader.open(writer.getIndexWriter(), applyAllDeletes));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c380c22ff3b659b2d7412a3335f853d354d17568":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}