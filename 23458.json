{"path":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#doTestQuery(int,String[]).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#doTestQuery(int,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    params.set(\"rows\", \"0\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n    }\n    query(params);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c20fa646779d398a61a14cc6f9e00447475c0325"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c20fa646779d398a61a14cc6f9e00447475c0325","date":1423618933,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#doTestQuery(int,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/DistributedIntervalFacetingTest#doTestQuery(int,String[]).mjava","sourceNew":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    params.set(\"rows\", \"0\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    if (random().nextBoolean()) {\n      params.set(\"facet.interval\", field);\n    } else  {\n      params.set(\"facet.interval\", getFieldWithKey(field));\n    }\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n    }\n    query(params);\n\n  }\n\n","sourceOld":"  /**\n   * Executes one query using interval faceting and compares with the same query using\n   * facet query with the same range\n   */\n  private void doTestQuery(int cardinality, String[] fields) throws Exception {\n    String[] startOptions = new String[]{\"(\", \"[\"};\n    String[] endOptions = new String[]{\")\", \"]\"};\n    // the query should match some documents in most cases\n    Integer[] qRange = getRandomRange(cardinality, \"id\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"id:[\" + qRange[0] + \" TO \" + qRange[1] + \"]\");\n    params.set(\"facet\", \"true\");\n    params.set(\"rows\", \"0\");\n    String field = fields[random().nextInt(fields.length)]; //choose from any of the fields\n    params.set(\"facet.interval\", field);\n    // number of intervals\n    for (int i = 0; i < 1 + random().nextInt(20); i++) {\n      Integer[] interval = getRandomRange(cardinality, field);\n      String open = startOptions[interval[0] % 2];\n      String close = endOptions[interval[1] % 2];\n      params.add(\"f.\" + field + \".facet.interval.set\", open + interval[0] + \",\" + interval[1] + close);\n    }\n    query(params);\n\n  }\n\n","bugFix":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c20fa646779d398a61a14cc6f9e00447475c0325":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c20fa646779d398a61a14cc6f9e00447475c0325"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"c20fa646779d398a61a14cc6f9e00447475c0325":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["c20fa646779d398a61a14cc6f9e00447475c0325"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}