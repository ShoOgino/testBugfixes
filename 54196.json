{"path":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","commits":[{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Releaes the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments(segmentInfos);\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1","7ea195c05e197e45a9dd84b46e809370e8e51a69"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments(segmentInfos);\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Releaes the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments(segmentInfos);\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments(segmentInfos);\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":["2586f96f60332eb97ecd2934b0763791462568b2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ea195c05e197e45a9dd84b46e809370e8e51a69","date":1235305227,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveWriteLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveWriteLock)\n        releaseWrite();\n    }\n\n    if (!haveWriteLock)\n      acquireWrite();\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":["2586f96f60332eb97ecd2934b0763791462568b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localAutoCommit = autoCommit;\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      if (localAutoCommit) {\n\n        if (infoStream != null)\n          message(\"flush at startTransaction\");\n\n        flush(true, false, false);\n\n        // Turn off auto-commit during our local transaction:\n        autoCommit = false;\n      } else\n        // We must \"protect\" our files at this point from\n        // deletion in case we need to rollback:\n        deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#startTransaction(boolean).mjava","sourceNew":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","sourceOld":"  /*\n   * Begin a transaction.  During a transaction, any segment\n   * merges that happen (or ram segments flushed) will not\n   * write a new segments file and will not remove any files\n   * that were present at the start of the transaction.  You\n   * must make a matched (try/finally) call to\n   * commitTransaction() or rollbackTransaction() to finish\n   * the transaction.\n   *\n   * Note that buffered documents and delete terms are not handled\n   * within the transactions, so they must be flushed before the\n   * transaction is started.\n   */\n  private synchronized void startTransaction(boolean haveReadLock) throws IOException {\n\n    boolean success = false;\n    try {\n      if (infoStream != null)\n        message(\"now start transaction\");\n\n      assert docWriter.getNumBufferedDeleteTerms() == 0 :\n      \"calling startTransaction with buffered delete terms not supported: numBufferedDeleteTerms=\" + docWriter.getNumBufferedDeleteTerms();\n      assert docWriter.getNumDocsInRAM() == 0 :\n      \"calling startTransaction with buffered documents not supported: numDocsInRAM=\" + docWriter.getNumDocsInRAM();\n\n      ensureOpen();\n\n      // If a transaction is trying to roll back (because\n      // addIndexes hit an exception) then wait here until\n      // that's done:\n      synchronized(this) {\n        while(stopMerges)\n          doWait();\n      }\n      success = true;\n    } finally {\n      // Release the write lock if our caller held it, on\n      // hitting an exception\n      if (!success && haveReadLock)\n        releaseRead();\n    }\n\n    if (haveReadLock) {\n      upgradeReadToWrite();\n    } else {\n      acquireWrite();\n    }\n\n    success = false;\n    try {\n      localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n\n      assert !hasExternalSegments();\n\n      localFlushedDocCount = docWriter.getFlushedDocCount();\n\n      // We must \"protect\" our files at this point from\n      // deletion in case we need to rollback:\n      deleter.incRef(segmentInfos, false);\n\n      success = true;\n    } finally {\n      if (!success)\n        finishAddIndexes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f44610301174bfb430443d89a88dc1c502feea1":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["2586f96f60332eb97ecd2934b0763791462568b2"],"7ea195c05e197e45a9dd84b46e809370e8e51a69":["0f44610301174bfb430443d89a88dc1c502feea1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["7ea195c05e197e45a9dd84b46e809370e8e51a69"],"2586f96f60332eb97ecd2934b0763791462568b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"]},"commit2Childs":{"0f44610301174bfb430443d89a88dc1c502feea1":["7ea195c05e197e45a9dd84b46e809370e8e51a69"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0f44610301174bfb430443d89a88dc1c502feea1"],"7ea195c05e197e45a9dd84b46e809370e8e51a69":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2586f96f60332eb97ecd2934b0763791462568b2"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2586f96f60332eb97ecd2934b0763791462568b2":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}