{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","sourceNew":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = charUtils.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = charUtils.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","sourceNew":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = Character.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = charUtils.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","sourceNew":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = Character.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = charUtils.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#getHashCode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","sourceNew":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = Character.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","sourceOld":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = Character.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#getHashCode(char[],int,int).mjava","sourceNew":null,"sourceOld":"  private int getHashCode(char[] text, int offset, int len) {\n    if (text == null)\n      throw new NullPointerException();\n    int code = 0;\n    final int stop = offset + len;\n    if (ignoreCase) {\n      for (int i=offset; i<stop;) {\n        final int codePointAt = charUtils.codePointAt(text, i, stop);\n        code = code*31 + Character.toLowerCase(codePointAt);\n        i += Character.charCount(codePointAt);\n      }\n    } else {\n      for (int i=offset; i<stop; i++) {\n        code = code*31 + text[i];\n      }\n    }\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}