{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsProducer#getDisiInput(FieldInfo,NormsEntry).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsProducer#getDisiInput(FieldInfo,NormsEntry).mjava","pathOld":"/dev/null","sourceNew":"  private IndexInput getDisiInput(FieldInfo field, NormsEntry entry) throws IOException {\n    IndexInput slice = null;\n    if (merging) {\n      slice = disiInputs.get(field.number);\n    }\n    if (slice == null) {\n      slice = IndexedDISI.createBlockSlice(\n          data, \"docs\", entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.jumpTableEntryCount);\n      if (merging) {\n        disiInputs.put(field.number, slice);\n      }\n    }\n    return slice;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsProducer#getDisiInput(FieldInfo,NormsEntry).mjava","pathOld":"/dev/null","sourceNew":"  private IndexInput getDisiInput(FieldInfo field, NormsEntry entry) throws IOException {\n    IndexInput slice = null;\n    if (merging) {\n      slice = disiInputs.get(field.number);\n    }\n    if (slice == null) {\n      slice = IndexedDISI.createBlockSlice(\n          data, \"docs\", entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.jumpTableEntryCount);\n      if (merging) {\n        disiInputs.put(field.number, slice);\n      }\n    }\n    return slice;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsProducer#getDisiInput(FieldInfo,NormsEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsProducer#getDisiInput(FieldInfo,NormsEntry).mjava","sourceNew":"  private IndexInput getDisiInput(FieldInfo field, NormsEntry entry) throws IOException {\n    if (merging == false) {\n      return IndexedDISI.createBlockSlice(\n          data, \"docs\", entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.jumpTableEntryCount);\n    }\n\n    IndexInput in = disiInputs.get(field.number);\n    if (in == null) {\n      in = IndexedDISI.createBlockSlice(\n          data, \"docs\", entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.jumpTableEntryCount);\n      disiInputs.put(field.number, in);\n    }\n\n    final IndexInput inF = in; // same as in but final\n\n    // Wrap so that reads can be interleaved from the same thread if two\n    // norms instances are pulled and consumed in parallel. Merging usually\n    // doesn't need this feature but CheckIndex might, plus we need merge\n    // instances to behave well and not be trappy.\n    return new IndexInput(\"docs\") {\n\n      long offset = 0;\n\n      @Override\n      public void readBytes(byte[] b, int off, int len) throws IOException {\n        inF.seek(offset);\n        offset += len;\n        inF.readBytes(b, off, len);\n      }\n\n      @Override\n      public byte readByte() throws IOException {\n        throw new UnsupportedOperationException(\"Unused by IndexedDISI\");\n      }\n\n      @Override\n      public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {\n        throw new UnsupportedOperationException(\"Unused by IndexedDISI\");\n      }\n\n      @Override\n      public short readShort() throws IOException {\n        inF.seek(offset);\n        offset += Short.BYTES;\n        return inF.readShort();\n      }\n\n      @Override\n      public long readLong() throws IOException {\n        inF.seek(offset);\n        offset += Long.BYTES;\n        return inF.readLong();\n      }\n\n      @Override\n      public void seek(long pos) throws IOException {\n        offset = pos;\n      }\n\n      @Override\n      public long length() {\n        throw new UnsupportedOperationException(\"Unused by IndexedDISI\");\n      }\n\n      @Override\n      public long getFilePointer() {\n        return offset;\n      }\n\n      @Override\n      public void close() throws IOException {\n        throw new UnsupportedOperationException(\"Unused by IndexedDISI\");\n      }\n    };\n  }\n\n","sourceOld":"  private IndexInput getDisiInput(FieldInfo field, NormsEntry entry) throws IOException {\n    IndexInput slice = null;\n    if (merging) {\n      slice = disiInputs.get(field.number);\n    }\n    if (slice == null) {\n      slice = IndexedDISI.createBlockSlice(\n          data, \"docs\", entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.jumpTableEntryCount);\n      if (merging) {\n        disiInputs.put(field.number, slice);\n      }\n    }\n    return slice;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}