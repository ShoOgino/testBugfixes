{"path":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testSimple().mjava","commits":[{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    List<Map<String, Object>> l = new ArrayList();\n    l.add(Utils.makeMap(\"id\", 1, \"f\", 1.0f, \"s\", \"Some str 1\"));\n    l.add(Utils.makeMap(\"id\", 2, \"f\", 2.0f, \"s\", \"Some str 2\"));\n    l.add(Utils.makeMap(\"id\", 3, \"f\", 1.0f, \"s\", \"Some str 3\"));\n    l.add(Utils.makeMap(\"EOF\", true, \"RESPONSE_TIME\", 206, \"sleepMillis\", 1000));\n    Iterator<Map<String, Object>> iterator = l.iterator();\n    TupleStream tupleStream = new TupleStream() {\n      @Override\n      public void setStreamContext(StreamContext context) {\n\n      }\n\n      @Override\n      public List<TupleStream> children() {\n        return null;\n      }\n\n      @Override\n      public void open() throws IOException {\n      }\n\n      @Override\n      public void close() throws IOException {\n      }\n\n      @Override\n      public Tuple read() throws IOException {\n        if (iterator.hasNext()) return new Tuple(iterator.next());\n        else return null;\n      }\n\n      @Override\n      public StreamComparator getStreamSort() {\n        return null;\n      }\n\n      @Override\n      public Explanation toExplanation(StreamFactory factory) throws IOException {\n        return new StreamExplanation(getStreamNodeId().toString())\n            .withFunctionName(\"Dummy\")\n            .withImplementingClass(this.getClass().getName())\n            .withExpressionType(Explanation.ExpressionType.STREAM_SOURCE)\n            .withExpression(\"--non-expressible--\");\n      }\n    };\n\n    byte[] bytes = serialize(tupleStream);\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map m = parser.next();\n    assertEquals(1L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2L, m.get(\"id\"));\n    assertEquals(2.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n\n    parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), false);\n    m = parser.next();\n    assertEquals(1, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2, m.get(\"id\"));\n    assertEquals(2.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    List<Map<String, Object>> l = new ArrayList();\n    l.add(Utils.makeMap(\"id\", 1, \"f\", 1.0f, \"s\", \"Some str 1\"));\n    l.add(Utils.makeMap(\"id\", 2, \"f\", 2.0f, \"s\", \"Some str 2\"));\n    l.add(Utils.makeMap(\"id\", 3, \"f\", 1.0f, \"s\", \"Some str 3\"));\n    l.add(Utils.makeMap(\"EOF\", true, \"RESPONSE_TIME\", 206, \"sleepMillis\", 1000));\n    Iterator<Map<String, Object>> iterator = l.iterator();\n    TupleStream tupleStream = new TupleStream() {\n      @Override\n      public void setStreamContext(StreamContext context) {\n\n      }\n\n      @Override\n      public List<TupleStream> children() {\n        return null;\n      }\n\n      @Override\n      public void open() throws IOException {\n      }\n\n      @Override\n      public void close() throws IOException {\n      }\n\n      @Override\n      public Tuple read() throws IOException {\n        if (iterator.hasNext()) return new Tuple(iterator.next());\n        else return null;\n      }\n\n      @Override\n      public StreamComparator getStreamSort() {\n        return null;\n      }\n\n      @Override\n      public Explanation toExplanation(StreamFactory factory) throws IOException {\n        return new StreamExplanation(getStreamNodeId().toString())\n            .withFunctionName(\"Dummy\")\n            .withImplementingClass(this.getClass().getName())\n            .withExpressionType(Explanation.ExpressionType.STREAM_SOURCE)\n            .withExpression(\"--non-expressible--\");\n      }\n    };\n\n    byte[] bytes = serialize(tupleStream);\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map m = parser.next();\n    assertEquals(1L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2L, m.get(\"id\"));\n    assertEquals(2.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n\n    parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), false);\n    m = parser.next();\n    assertEquals(1, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2, m.get(\"id\"));\n    assertEquals(2.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    List<Map<String, Object>> l = new ArrayList<>();\n    l.add(Utils.makeMap(\"id\", 1, \"f\", 1.0f, \"s\", \"Some str 1\"));\n    l.add(Utils.makeMap(\"id\", 2, \"f\", 2.0f, \"s\", \"Some str 2\"));\n    l.add(Utils.makeMap(\"id\", 3, \"f\", 1.0f, \"s\", \"Some str 3\"));\n    l.add(Utils.makeMap(\"EOF\", true, \"RESPONSE_TIME\", 206, \"sleepMillis\", 1000));\n    Iterator<Map<String, Object>> iterator = l.iterator();\n    TupleStream tupleStream = new TupleStream() {\n      @Override\n      public void setStreamContext(StreamContext context) {\n\n      }\n\n      @Override\n      public List<TupleStream> children() {\n        return null;\n      }\n\n      @Override\n      public void open() throws IOException {\n      }\n\n      @Override\n      public void close() throws IOException {\n      }\n\n      @Override\n      public Tuple read() throws IOException {\n        if (iterator.hasNext()) return new Tuple(iterator.next());\n        else return null;\n      }\n\n      @Override\n      public StreamComparator getStreamSort() {\n        return null;\n      }\n\n      @Override\n      public Explanation toExplanation(StreamFactory factory) throws IOException {\n        return new StreamExplanation(getStreamNodeId().toString())\n            .withFunctionName(\"Dummy\")\n            .withImplementingClass(this.getClass().getName())\n            .withExpressionType(Explanation.ExpressionType.STREAM_SOURCE)\n            .withExpression(\"--non-expressible--\");\n      }\n    };\n\n    byte[] bytes = serialize(tupleStream);\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = parser.next();\n    assertEquals(1L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2L, m.get(\"id\"));\n    assertEquals(2.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n\n    parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), false);\n    m = parser.next();\n    assertEquals(1, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2, m.get(\"id\"));\n    assertEquals(2.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    List<Map<String, Object>> l = new ArrayList();\n    l.add(Utils.makeMap(\"id\", 1, \"f\", 1.0f, \"s\", \"Some str 1\"));\n    l.add(Utils.makeMap(\"id\", 2, \"f\", 2.0f, \"s\", \"Some str 2\"));\n    l.add(Utils.makeMap(\"id\", 3, \"f\", 1.0f, \"s\", \"Some str 3\"));\n    l.add(Utils.makeMap(\"EOF\", true, \"RESPONSE_TIME\", 206, \"sleepMillis\", 1000));\n    Iterator<Map<String, Object>> iterator = l.iterator();\n    TupleStream tupleStream = new TupleStream() {\n      @Override\n      public void setStreamContext(StreamContext context) {\n\n      }\n\n      @Override\n      public List<TupleStream> children() {\n        return null;\n      }\n\n      @Override\n      public void open() throws IOException {\n      }\n\n      @Override\n      public void close() throws IOException {\n      }\n\n      @Override\n      public Tuple read() throws IOException {\n        if (iterator.hasNext()) return new Tuple(iterator.next());\n        else return null;\n      }\n\n      @Override\n      public StreamComparator getStreamSort() {\n        return null;\n      }\n\n      @Override\n      public Explanation toExplanation(StreamFactory factory) throws IOException {\n        return new StreamExplanation(getStreamNodeId().toString())\n            .withFunctionName(\"Dummy\")\n            .withImplementingClass(this.getClass().getName())\n            .withExpressionType(Explanation.ExpressionType.STREAM_SOURCE)\n            .withExpression(\"--non-expressible--\");\n      }\n    };\n\n    byte[] bytes = serialize(tupleStream);\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map m = parser.next();\n    assertEquals(1L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2L, m.get(\"id\"));\n    assertEquals(2.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3L, m.get(\"id\"));\n    assertEquals(1.0, (Double) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n\n    parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), false);\n    m = parser.next();\n    assertEquals(1, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(2, m.get(\"id\"));\n    assertEquals(2.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(3, m.get(\"id\"));\n    assertEquals(1.0, (Float) m.get(\"f\"), 0.01);\n    m = parser.next();\n    assertEquals(Boolean.TRUE, m.get(\"EOF\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da8b6cfd1b67b932db9907356935046c4d40d033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["da8b6cfd1b67b932db9907356935046c4d40d033"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["727bb765ff2542275f6d31f67be18d7104bae148","e98520789adb1d5ad05afb4956eca0944a929688"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8b6cfd1b67b932db9907356935046c4d40d033","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}