{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean,boolean,boolean).mjava","commits":[{"id":"f064be057b13c0e9885962e9e5bae10317371f1b","date":1458702313,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled, boolean cacheMerges, boolean cacheReadOnce) throws IOException {\n    super(directory);\n    this.cacheMerges = cacheMerges;\n    this.cacheReadOnce = cacheReadOnce;\n    this.dirName = dirName;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectory#BlockDirectory(String,Directory,Cache,Set[String],boolean,boolean,boolean,boolean).mjava","sourceNew":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled, boolean cacheMerges, boolean cacheReadOnce) throws IOException {\n    super(directory);\n    this.cacheMerges = cacheMerges;\n    this.cacheReadOnce = cacheReadOnce;\n    this.dirName = dirName;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      log.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      log.info(\"Block cache on write is disabled\");\n    }\n  }\n\n","sourceOld":"  public BlockDirectory(String dirName, Directory directory, Cache cache,\n      Set<String> blockCacheFileTypes, boolean blockCacheReadEnabled,\n      boolean blockCacheWriteEnabled, boolean cacheMerges, boolean cacheReadOnce) throws IOException {\n    super(directory);\n    this.cacheMerges = cacheMerges;\n    this.cacheReadOnce = cacheReadOnce;\n    this.dirName = dirName;\n    blockSize = BLOCK_SIZE;\n    this.cache = cache;\n    if (blockCacheFileTypes == null || blockCacheFileTypes.isEmpty()) {\n      this.blockCacheFileTypes = null;\n    } else {\n      this.blockCacheFileTypes = blockCacheFileTypes;\n    }\n    this.blockCacheReadEnabled = blockCacheReadEnabled;\n    if (!blockCacheReadEnabled) {\n      LOG.info(\"Block cache on read is disabled\");\n    }\n    this.blockCacheWriteEnabled = blockCacheWriteEnabled;\n    if (!blockCacheWriteEnabled) {\n      LOG.info(\"Block cache on write is disabled\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f064be057b13c0e9885962e9e5bae10317371f1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["f064be057b13c0e9885962e9e5bae10317371f1b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f064be057b13c0e9885962e9e5bae10317371f1b"],"f064be057b13c0e9885962e9e5bae10317371f1b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}