{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#handleReplicationFactor().mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#handleReplicationFactor().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#handleReplicationFactor().mjava","sourceNew":"  /**\n   * If necessary, include in the response the achieved replication factor\n   */\n  @SuppressWarnings(\"deprecation\")\n  private void handleReplicationFactor() {\n    if (leaderReplicationTracker != null || rollupReplicationTracker != null) {\n      int achievedRf = Integer.MAX_VALUE;\n\n      if (leaderReplicationTracker != null) {\n\n        achievedRf = leaderReplicationTracker.getAchievedRf();\n\n        // Transfer this to the rollup tracker if it exists\n        if (rollupReplicationTracker != null) {\n          rollupReplicationTracker.testAndSetAchievedRf(achievedRf);\n        }\n      }\n\n      // Rollup tracker has accumulated stats.\n      if (rollupReplicationTracker != null) {\n        achievedRf = rollupReplicationTracker.getAchievedRf();\n      }\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // Unused, but kept for back compatibility. To be removed in Solr 9\n        rsp.getResponseHeader().add(UpdateRequest.MIN_REPFACT, Integer.parseInt(req.getParams().get(UpdateRequest.MIN_REPFACT)));\n      }\n      rsp.getResponseHeader().add(UpdateRequest.REPFACT, achievedRf);\n      rollupReplicationTracker = null;\n      leaderReplicationTracker = null;\n\n    }\n  }\n\n","sourceOld":"  /**\n   * If necessary, include in the response the achieved replication factor\n   */\n  @SuppressWarnings(\"deprecation\")\n  private void handleReplicationFactor() {\n    if (leaderReplicationTracker != null || rollupReplicationTracker != null) {\n      int achievedRf = Integer.MAX_VALUE;\n\n      if (leaderReplicationTracker != null) {\n\n        achievedRf = leaderReplicationTracker.getAchievedRf();\n\n        // Transfer this to the rollup tracker if it exists\n        if (rollupReplicationTracker != null) {\n          rollupReplicationTracker.testAndSetAchievedRf(achievedRf);\n        }\n      }\n\n      // Rollup tracker has accumulated stats.\n      if (rollupReplicationTracker != null) {\n        achievedRf = rollupReplicationTracker.getAchievedRf();\n      }\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // Unused, but kept for back compatibility. To be removed in Solr 9\n        rsp.getResponseHeader().add(UpdateRequest.MIN_REPFACT, Integer.parseInt(req.getParams().get(UpdateRequest.MIN_REPFACT)));\n      }\n      rsp.getResponseHeader().add(UpdateRequest.REPFACT, achievedRf);\n      rollupReplicationTracker = null;\n      leaderReplicationTracker = null;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}