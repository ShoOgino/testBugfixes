{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.shutdown();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.shutdown();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new TextField(FIELD, English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES));\n      doc.add(new TextField(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = DirectoryReader.open(writer, true);\n    writer.close();\n\n    IndexSearcher searcher = LuceneTestCase.newSearcher(reader);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}