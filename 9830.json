{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#parse(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\r\n   *  @param query  the query string to be parsed.\r\n   *  @throws ParseException if the parsing fails\r\n   */\r\n  public Query parse(String query) throws ParseException {\r\n    ReInit(new FastCharStream(new StringReader(query)));\r\n    try {\r\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\r\n      Query res = TopLevelQuery(field);\r\n      return res!=null ? res : newBooleanQuery(false);\r\n    }\r\n    catch (ParseException tme) {\r\n      // rethrow to include the original query:\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (TokenMgrError tme) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\r\n      e.initCause(tme);\r\n      throw e;\r\n    }\r\n    catch (BooleanQuery.TooManyClauses tmc) {\r\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\r\n      e.initCause(tmc);\r\n      throw e;\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":null,"sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}