{"path":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<ArrayList<T>>();\n    ArrayList<T> between = new ArrayList<T>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<T>();\n    ArrayList<T> after = new ArrayList<T>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<ArrayList<T>>();\n    ArrayList<T> between = new ArrayList<T>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<T>();\n    ArrayList<T> after = new ArrayList<T>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","sourceOld":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<ArrayList<T>>();\n    ArrayList<T> between = new ArrayList<T>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<T>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<T>();\n    ArrayList<T> after = new ArrayList<T>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,String,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","sourceOld":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, String gapString\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    String[] stringGaps = gapString.split(\",\");\n    int[] gaps = new int[stringGaps.length];\n    for (int i = 0; i<gaps.length; i++) {\n      gaps[i] = Integer.parseInt(stringGaps[i]);\n    }\n    int bigGap = 0;\n    int last = gaps[gaps.length-1];\n    for (int i = 0; i<gaps.length-1; i++) {\n      bigGap += gaps[i];\n    }\n    int off = (end-start-bigGap)%last;\n    if (!hardend && off>0) {\n      end+=last-off;\n    }\n    \n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    int gap = 0;\n    int gapCounter = 0;\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        if (gapCounter<gaps.length) {\n          gap = gaps[gapCounter++];\n        }\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    if (before.size()>0) {\n      lists.add(before);\n    }\n    if (after.size()>0) {\n      lists.add(after);\n    }\n    if (between.size()>0) {\n      lists.add(between);\n    }\n    return lists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}