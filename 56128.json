{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap);\n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"780b011e6e552810161e3c859b4bc270f655f47e","date":1360554192,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc);\n                                }\n                              });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount);\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount);\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField);\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount);\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField);\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final int maxCountPerDoc = maxCount;\n    assert pendingCounts.size() == maxDoc;\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    dvConsumer.addSortedSetField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new ValuesIterator(sortedValues, valueCount, hash);\n                                }\n                              },\n                              \n                              // doc -> ordCount\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdCountIterator(maxDoc, ordCounts);\n                                }\n                              },\n\n                              // ords\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new OrdsIterator(ordMap, maxCountPerDoc, ords, ordCounts);\n                                }\n                              });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField);\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField);\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords = pending.build();\n    final PackedLongValues ordCounts = pendingCounts.build();\n\n    final int[] sortedValues = hash.sort();\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     return new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["b0267c69e2456a3477a1ad785723f2135da3117e","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"5844844466689b1121b12ccb467623f894eb269d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","780b011e6e552810161e3c859b4bc270f655f47e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","5844844466689b1121b12ccb467623f894eb269d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"b06445ae1731e049327712db0454e5643ca9b7fe":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af2638813028b254a88b418ebeafb541afb49653","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["af2638813028b254a88b418ebeafb541afb49653"],"780b011e6e552810161e3c859b4bc270f655f47e":["f366ce28775e2b8ea4e06355009471328711666d"],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["ceec64003e8cc400e862d44c8589a41570432ab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["af2638813028b254a88b418ebeafb541afb49653","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5844844466689b1121b12ccb467623f894eb269d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"780b011e6e552810161e3c859b4bc270f655f47e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"f366ce28775e2b8ea4e06355009471328711666d":["780b011e6e552810161e3c859b4bc270f655f47e"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}