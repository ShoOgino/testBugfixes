{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],Map[String,String],Map[String,String],Node,File,SolrResourceLoader).mjava","commits":[{"id":"f225b9b576dc345ee8c27f91147b4afc0350511c","date":1373552135,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],Map[String,String],Map[String,String],Node,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],Map[String,String],Map[String,String],Map[String,String],Map[String,String],File,SolrResourceLoader).mjava","sourceNew":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      Map<String, String> loggingAttribs, Map<String,String> watcherAttribs,\n      Node shardHandlerNode,\n      File file, SolrResourceLoader loader) throws XPathExpressionException {\n\n\n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n\n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLDef.loggingAttribs = loggingAttribs;\n      solrXMLDef.watcherAttribs = watcherAttribs;\n      solrXMLDef.shardHandlerNode = shardHandlerNode;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n\n  }\n\n","sourceOld":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      Map<String, String> loggingAttribs, Map<String,String> watcherAttribs,\n      Map<String, String> shardHandlerAttrib, Map<String,String> shardHandlerProps,\n      File file, SolrResourceLoader loader) throws XPathExpressionException {\n\n\n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n\n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLDef.loggingAttribs = loggingAttribs;\n      solrXMLDef.watcherAttribs = watcherAttribs;\n      solrXMLDef.shardHandlerAttribs = shardHandlerAttrib;\n      solrXMLDef.shardHandlerProps = shardHandlerProps;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],Map[String,String],Map[String,String],Node,File,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      Map<String, String> loggingAttribs, Map<String,String> watcherAttribs,\n      Node shardHandlerNode,\n      File file, SolrResourceLoader loader) throws XPathExpressionException {\n\n\n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n\n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      solrXMLDef.loggingAttribs = loggingAttribs;\n      solrXMLDef.watcherAttribs = watcherAttribs;\n      solrXMLDef.shardHandlerNode = shardHandlerNode;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}