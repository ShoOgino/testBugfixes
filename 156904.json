{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token,Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token,Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current, final Token reusableToken) {\n    reusableToken.reinit(current, synonym);\n    reusableToken.setTermBuffer(synonym);\n    reusableToken.setType(SYNONYM_TOKEN_TYPE);\n    reusableToken.setPositionIncrement(0);\n    return reusableToken;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behaviour, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current) {\n    Token token = new Token(\n      synonym, current.startOffset(), current.endOffset(), SYNONYM_TOKEN_TYPE);\n    token.setPositionIncrement(0);\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token,Token).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current, final Token reusableToken) {\n    reusableToken.reinit(current, synonym);\n    reusableToken.setTermBuffer(synonym);\n    reusableToken.setType(SYNONYM_TOKEN_TYPE);\n    reusableToken.setPositionIncrement(0);\n    return reusableToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}