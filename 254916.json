{"path":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DimensionalValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","sourceOld":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": dimensional value cannot be null\");\n    }\n    if (value.length != fieldInfo.getDimensionCount() * fieldInfo.getDimensionNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getDimensionCount() * fieldInfo.getDimensionNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","sourceOld":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","sourceOld":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * RamUsageEstimator.NUM_BYTES_INT);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","sourceOld":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","sourceOld":"  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numDocs) {\n      docIDs = ArrayUtil.grow(docIDs, numDocs+1);\n      iwBytesUsed.addAndGet((docIDs.length - numDocs) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numDocs] = docID;\n    numDocs++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value cannot be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","bugFix":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDataDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#addPackedValue(int,BytesRef).mjava","sourceNew":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","sourceOld":"  // TODO: if exactly the same value is added to exactly the same doc, should we dedup?\n  public void addPackedValue(int docID, BytesRef value) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": point value must not be null\");\n    }\n    if (value.length != packedBytesLength) {\n      throw new IllegalArgumentException(\"field=\" + fieldInfo.name + \": this field's value has length=\" + value.length + \" but should be \" + (fieldInfo.getPointDataDimensionCount() * fieldInfo.getPointNumBytes()));\n    }\n\n    if (docIDs.length == numPoints) {\n      docIDs = ArrayUtil.grow(docIDs, numPoints+1);\n      iwBytesUsed.addAndGet((docIDs.length - numPoints) * Integer.BYTES);\n    }\n    bytes.append(value);\n    docIDs[numPoints] = docID;\n    if (docID != lastDocID) {\n      numDocs++;\n      lastDocID = docID;\n    }\n\n    numPoints++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a20457919db052812998f60294d17daa883ff972":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a20457919db052812998f60294d17daa883ff972"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["419a8f52c6635419beb951255cacbbb281044c57"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","a20457919db052812998f60294d17daa883ff972"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["419a8f52c6635419beb951255cacbbb281044c57","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a20457919db052812998f60294d17daa883ff972":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"419a8f52c6635419beb951255cacbbb281044c57":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}