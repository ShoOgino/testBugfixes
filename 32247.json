{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"/dev/null","sourceNew":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n\n    //We cannot compare /select vs /export as for docs with the same values ( ties ) the ordering is different\n    SolrQueryRequest req = null;\n    try {\n      req = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs));\n\n      SolrQueryResponse selectRsp = h.queryAndResponse(\"\", req);\n      DocList selectDocList = ((ResultContext)selectRsp.getResponse()).getDocList();\n      assert selectDocList.size() == numDocs;\n      DocIterator selectDocListIter = selectDocList.iterator();\n\n      ObjectMapper mapper = new ObjectMapper();\n      HashMap respMap = mapper.readValue(resp, HashMap.class);\n      List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n      assert docs.size() == numDocs;\n\n      for (int i = 0; i < docs.size() - 1; i++) { // docs..\n        assertEquals(\"Position:\" + i + \" has different id value\" , String.valueOf(selectDocListIter.nextDoc()), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n        for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n          String field = fieldSorts[j].getField();\n          String sort = fieldSorts[j].getSort();\n          String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n          String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n          if (fieldVal1.equals(fieldVal2)) {\n            continue;\n          } else {\n            if (sort.equals(\"asc\")) {\n              if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n                assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n              } else if (field.equals(\"doubledv\")){\n                assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"floatdv\")) {\n                assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n                assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n                assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n              }\n            } else {\n              if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n                assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n              } else if (field.equals(\"doubledv\")){\n                assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"floatdv\")) {\n                assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n                assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n                assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n              }\n            }\n            break;\n          }\n        }\n      }\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3550ab475f4e1badfcc93dd6c0c56462e85a8798","date":1532373719,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","sourceNew":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    ObjectMapper mapper = new ObjectMapper();\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)ObjectBuilder.fromJSON(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n\n    //We cannot compare /select vs /export as for docs with the same values ( ties ) the ordering is different\n    SolrQueryRequest req = null;\n    try {\n      req = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs));\n\n      SolrQueryResponse selectRsp = h.queryAndResponse(\"\", req);\n      DocList selectDocList = ((ResultContext)selectRsp.getResponse()).getDocList();\n      assert selectDocList.size() == numDocs;\n      DocIterator selectDocListIter = selectDocList.iterator();\n\n      ObjectMapper mapper = new ObjectMapper();\n      HashMap respMap = mapper.readValue(resp, HashMap.class);\n      List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n      assert docs.size() == numDocs;\n\n      for (int i = 0; i < docs.size() - 1; i++) { // docs..\n        assertEquals(\"Position:\" + i + \" has different id value\" , String.valueOf(selectDocListIter.nextDoc()), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n        for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n          String field = fieldSorts[j].getField();\n          String sort = fieldSorts[j].getSort();\n          String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n          String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n          if (fieldVal1.equals(fieldVal2)) {\n            continue;\n          } else {\n            if (sort.equals(\"asc\")) {\n              if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n                assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n              } else if (field.equals(\"doubledv\")){\n                assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"floatdv\")) {\n                assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n                assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n              } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n                assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n              }\n            } else {\n              if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n                assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n              } else if (field.equals(\"doubledv\")){\n                assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"floatdv\")) {\n                assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n                assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n              } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n                assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n              }\n            }\n            break;\n          }\n        }\n      }\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","sourceNew":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    ObjectMapper mapper = new ObjectMapper();\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)Utils.fromJSONString(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    ObjectMapper mapper = new ObjectMapper();\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)ObjectBuilder.fromJSON(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","sourceNew":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)Utils.fromJSONString(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    ObjectMapper mapper = new ObjectMapper();\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)Utils.fromJSONString(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","sourceNew":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    @SuppressWarnings({\"rawtypes\"})\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    @SuppressWarnings({\"rawtypes\"})\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map)Utils.fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)Utils.fromJSONString(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b8c26c13b294e143adb7359d48c525f7052def","date":1593853283,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#validateSort(int).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    Map rsp = (Map)Utils.fromJSONString(response);\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap<?,?>) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void validateSort(int numDocs) throws Exception {\n    // 10 fields\n    List<String> fieldNames = new ArrayList<>(Arrays.asList(\"floatdv\", \"intdv\", \"stringdv\", \"longdv\", \"doubledv\",\n        \"datedv\", \"booleandv\", \"field1_s_dv\", \"field2_i_p\", \"field3_l_p\"));\n\n    SortFields[] fieldSorts = new SortFields[TestUtil.nextInt(random(), 1, fieldNames.size())];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldSorts[i] = new SortFields(fieldNames.get(TestUtil.nextInt(random(), 0, fieldNames.size() - 1)));\n      fieldNames.remove(fieldSorts[i].getField());\n    }\n    String[] fieldWithOrderStrs = new String[fieldSorts.length];\n    String[] fieldStrs = new String[fieldSorts.length];\n    for (int i = 0; i < fieldSorts.length; i++) {\n      fieldWithOrderStrs[i] = fieldSorts[i].getFieldWithOrder();\n      fieldStrs[i] = fieldSorts[i].getField();\n    }\n\n    String sortStr = String.join(\",\", fieldWithOrderStrs); // sort : field1 asc, field2 desc\n    String fieldsStr = String.join(\",\", fieldStrs); // fl :  field1, field2\n\n    String resp = h.query(req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr));\n    @SuppressWarnings({\"rawtypes\"})\n    HashMap respMap = mapper.readValue(resp, HashMap.class);\n    @SuppressWarnings({\"rawtypes\"})\n    List docs = (ArrayList) ((HashMap) respMap.get(\"response\")).get(\"docs\");\n\n    SolrQueryRequest selectReq = req(\"q\", \"*:*\", \"qt\", \"/select\", \"fl\", \"id,\" + fieldsStr, \"sort\", sortStr, \"rows\", Integer.toString(numDocs), \"wt\", \"json\");\n    String response = h.query(selectReq);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map)Utils.fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n\n    assert docs.size() == numDocs;\n\n    for (int i = 0; i < docs.size() - 1; i++) { // docs..\n      assertEquals(\"Position:\" + i + \" has different id value\" , ((LinkedHashMap)doclist.get(i)).get(\"id\"), String.valueOf(((HashMap) docs.get(i)).get(\"id\")));\n\n      for (int j = 0; j < fieldSorts.length; j++) { // fields ..\n        String field = fieldSorts[j].getField();\n        String sort = fieldSorts[j].getSort();\n        String fieldVal1 = String.valueOf(((HashMap) docs.get(i)).get(field)); // 1st doc\n        String fieldVal2 = String.valueOf(((HashMap) docs.get(i + 1)).get(field)); // 2nd obj\n        if (fieldVal1.equals(fieldVal2)) {\n          continue;\n        } else {\n          if (sort.equals(\"asc\")) {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) < 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) <= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) <= 0);\n            }\n          } else {\n            if (field.equals(\"stringdv\") || field.equals(\"field1_s_dv\")|| field.equals(\"datedv\") || field.equals(\"booleandv\")) { // use string comparator\n              assertTrue(fieldVal1.compareTo(fieldVal2) > 0);\n            } else if (field.equals(\"doubledv\")){\n              assertTrue(Double.compare(Double.valueOf(fieldVal1), Double.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"floatdv\")) {\n              assertTrue(Float.compare(Float.valueOf(fieldVal1), Float.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"intdv\") || \"field2_i_p\".equals(field)) {\n              assertTrue(Integer.compare(Integer.valueOf(fieldVal1), Integer.valueOf(fieldVal2)) >= 0);\n            } else if(field.equals(\"longdv\") || field.equals(\"field3_l_p\")) {\n              assertTrue(Long.compare(Integer.valueOf(fieldVal1), Long.valueOf(fieldVal2)) >= 0);\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11b8c26c13b294e143adb7359d48c525f7052def":["e98520789adb1d5ad05afb4956eca0944a929688"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["3550ab475f4e1badfcc93dd6c0c56462e85a8798"],"804a8d5358fe7b7563b85ee7838714d720b89272":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"3550ab475f4e1badfcc93dd6c0c56462e85a8798":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11b8c26c13b294e143adb7359d48c525f7052def"],"e98520789adb1d5ad05afb4956eca0944a929688":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"11b8c26c13b294e143adb7359d48c525f7052def":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["3550ab475f4e1badfcc93dd6c0c56462e85a8798"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["804a8d5358fe7b7563b85ee7838714d720b89272"],"3550ab475f4e1badfcc93dd6c0c56462e85a8798":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"804a8d5358fe7b7563b85ee7838714d720b89272":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["11b8c26c13b294e143adb7359d48c525f7052def"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}