{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","commits":[{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","pathOld":"/dev/null","sourceNew":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    CellIterator nextLevelCells = parentCell.getNextLevelCells(shapeFilter);\n    iterStack[0] = nextLevelCells;\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b3795e235066cdfe382d88a214eb4bb559f4af","date":1400016324,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","sourceNew":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","sourceOld":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    CellIterator nextLevelCells = parentCell.getNextLevelCells(shapeFilter);\n    iterStack[0] = nextLevelCells;\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","sourceNew":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","sourceOld":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    CellIterator nextLevelCells = parentCell.getNextLevelCells(shapeFilter);\n    iterStack[0] = nextLevelCells;\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","sourceNew":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","sourceOld":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#TreeCellIterator(Shape,int,Cell).mjava","sourceNew":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","sourceOld":"  public TreeCellIterator(Shape shapeFilter, int detailLevel, Cell parentCell) {\n    this.shapeFilter = shapeFilter;\n    assert parentCell.getLevel() == 0;\n    iterStack = new CellIterator[detailLevel];\n    iterStack[0] = parentCell.getNextLevelCells(shapeFilter);\n    stackIdx = 0;//always points to an iter (non-null)\n    //note: not obvious but needed to visit the first cell before trying to descend\n    descend = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["34b3795e235066cdfe382d88a214eb4bb559f4af","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["34b3795e235066cdfe382d88a214eb4bb559f4af"],"34b3795e235066cdfe382d88a214eb4bb559f4af":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","34b3795e235066cdfe382d88a214eb4bb559f4af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"34b3795e235066cdfe382d88a214eb4bb559f4af":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["34b3795e235066cdfe382d88a214eb4bb559f4af","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}