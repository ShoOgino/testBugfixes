{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testPostCopyFields().mjava","commits":[{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testPostCopyFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPostCopyFields() throws Exception {\n    assertJPost(\"/schema/dynamicfields\",\n                json( \"[{'name':'dynamicfieldA_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldB_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldC_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldD_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldE_*','type':'text','stored':false}]\"),\n                \"/responseHeader/status==0\");\n    assertJPost(\"/schema/copyfields\",\n                json( \"[{'source':'dynamicfieldA_*', 'dest':'dynamicfieldB_*'},\"\n                    + \" {'source':'dynamicfieldD_*', 'dest':['dynamicfieldC_*', 'dynamicfieldE_*']}]\"),\n                \"/responseHeader/status==0\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldA_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldD_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 2\");\n    assertJPost(\"/schema/copyfields\", // copyField glob sources are not required to match a dynamic field\n                json(\"[{'source':'some_glob_not_necessarily_matching_any_dynamicfield_*', 'dest':['dynamicfieldA_*']},\"\n                    +\" {'source':'*', 'dest':['dynamicfieldD_*']}]\"),\n                \"/responseHeader/status==0\");\n    assertJPost(\"/schema/copyfields\",\n                json(\"[{'source':'dynamicfieldD_*', 'dest':['some_nonexistent_dynamicfield_ignore_exception_*']}]\"),\n                \"/error/msg=='copyField dest :\\\\'some_nonexistent_dynamicfield_ignore_exception_*\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaDynamicFieldResource#testPostCopyFields().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPostCopyFields() throws Exception {\n    assertJPost(\"/schema/dynamicfields\",\n                json( \"[{'name':'dynamicfieldA_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldB_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldC_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldD_*','type':'text','stored':false},\"\n                    + \" {'name':'dynamicfieldE_*','type':'text','stored':false}]\"),\n                \"/responseHeader/status==0\");\n    assertJPost(\"/schema/copyfields\",\n                json( \"[{'source':'dynamicfieldA_*', 'dest':'dynamicfieldB_*'},\"\n                    + \" {'source':'dynamicfieldD_*', 'dest':['dynamicfieldC_*', 'dynamicfieldE_*']}]\"),\n                \"/responseHeader/status==0\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldA_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 1\");\n    assertQ(\"/schema/copyfields/?indent=on&wt=xml&source.fl=dynamicfieldD_*\",\n            \"count(/response/arr[@name='copyFields']/lst) = 2\");\n    assertJPost(\"/schema/copyfields\", // copyField glob sources are not required to match a dynamic field\n                json(\"[{'source':'some_glob_not_necessarily_matching_any_dynamicfield_*', 'dest':['dynamicfieldA_*']},\"\n                    +\" {'source':'*', 'dest':['dynamicfieldD_*']}]\"),\n                \"/responseHeader/status==0\");\n    assertJPost(\"/schema/copyfields\",\n                json(\"[{'source':'dynamicfieldD_*', 'dest':['some_nonexistent_dynamicfield_ignore_exception_*']}]\"),\n                \"/error/msg=='copyField dest :\\\\'some_nonexistent_dynamicfield_ignore_exception_*\\\\' is not an explicit field and doesn\\\\'t match a dynamicField.'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}