{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions#lazySkip().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions#lazySkip().mjava","pathOld":"/dev/null","sourceNew":"  // It is not always necessary to move the prox pointer\n  // to a new document after the freq pointer has been moved.\n  // Consider for example a phrase query with two terms:\n  // the freq pointer for term 1 has to move to document x\n  // to answer the question if the term occurs in that document. But\n  // only if term 2 also matches document x, the positions have to be\n  // read to figure out if term 1 and term 2 appear next\n  // to each other in document x and thus satisfy the query.\n  // So we move the prox pointer lazily to the document\n  // as soon as positions are requested.\n  private void lazySkip() throws IOException {\n    if (proxStream == null) {\n      // clone lazily\n      proxStream = (IndexInput)proxStreamOrig.clone();\n    }\n    \n    // we might have to skip the current payload\n    // if it was not read yet\n    skipPayload();\n      \n    if (lazySkipPointer != -1) {\n      proxStream.seek(lazySkipPointer);\n      lazySkipPointer = -1;\n    }\n     \n    if (lazySkipProxCount != 0) {\n      skipPositions(lazySkipProxCount);\n      lazySkipProxCount = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/SegmentTermPositions#lazySkip().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermPositions#lazySkip().mjava","sourceNew":"  // It is not always necessary to move the prox pointer\n  // to a new document after the freq pointer has been moved.\n  // Consider for example a phrase query with two terms:\n  // the freq pointer for term 1 has to move to document x\n  // to answer the question if the term occurs in that document. But\n  // only if term 2 also matches document x, the positions have to be\n  // read to figure out if term 1 and term 2 appear next\n  // to each other in document x and thus satisfy the query.\n  // So we move the prox pointer lazily to the document\n  // as soon as positions are requested.\n  private void lazySkip() throws IOException {\n    if (proxStream == null) {\n      // clone lazily\n      proxStream = (IndexInput)proxStreamOrig.clone();\n    }\n    \n    // we might have to skip the current payload\n    // if it was not read yet\n    skipPayload();\n      \n    if (lazySkipPointer != -1) {\n      proxStream.seek(lazySkipPointer);\n      lazySkipPointer = -1;\n    }\n     \n    if (lazySkipProxCount != 0) {\n      skipPositions(lazySkipProxCount);\n      lazySkipProxCount = 0;\n    }\n  }\n\n","sourceOld":"  // It is not always necessary to move the prox pointer\n  // to a new document after the freq pointer has been moved.\n  // Consider for example a phrase query with two terms:\n  // the freq pointer for term 1 has to move to document x\n  // to answer the question if the term occurs in that document. But\n  // only if term 2 also matches document x, the positions have to be\n  // read to figure out if term 1 and term 2 appear next\n  // to each other in document x and thus satisfy the query.\n  // So we move the prox pointer lazily to the document\n  // as soon as positions are requested.\n  private void lazySkip() throws IOException {\n    if (proxStream == null) {\n      // clone lazily\n      proxStream = (IndexInput)proxStreamOrig.clone();\n    }\n    \n    // we might have to skip the current payload\n    // if it was not read yet\n    skipPayload();\n      \n    if (lazySkipPointer != -1) {\n      proxStream.seek(lazySkipPointer);\n      lazySkipPointer = -1;\n    }\n     \n    if (lazySkipProxCount != 0) {\n      skipPositions(lazySkipProxCount);\n      lazySkipProxCount = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}