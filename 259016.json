{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","commits":[{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified {@link StatsField}\n   *\n   * @param statsField {@link StatsField} whose statistics will be created by the resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n\n    final SchemaField sf = statsField.getSchemaField();\n\n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    } \n\n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["2106271e380c198349e0f6eac0395bb462913fab"],"2106271e380c198349e0f6eac0395bb462913fab":["bf795ee457272965bd751f513787065bbf0a650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf795ee457272965bd751f513787065bbf0a650a"],"bf795ee457272965bd751f513787065bbf0a650a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["283ff02f401ec3e7a2fad73643970f052383fb0c"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2106271e380c198349e0f6eac0395bb462913fab":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bf795ee457272965bd751f513787065bbf0a650a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bf795ee457272965bd751f513787065bbf0a650a":["2106271e380c198349e0f6eac0395bb462913fab","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}