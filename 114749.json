{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testVariableSchema().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testVariableSchema().mjava","pathOld":"/dev/null","sourceNew":"  public void testVariableSchema() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    int delID = 0;\n    for(int i=0;i<20;i++) {\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(2);\n      writer.setUseCompoundFile(false);\n      Document doc = new Document();\n      String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n\n      if (i == 7) {\n        // Add empty docs here\n        doc.add(new Field(\"content3\", \"\", Field.Store.NO,\n                          Field.Index.ANALYZED));\n      } else {\n        Field.Store storeVal;\n        if (i%2 == 0) {\n          doc.add(new Field(\"content4\", contents, Field.Store.YES,\n                            Field.Index.ANALYZED));\n          storeVal = Field.Store.YES;\n        } else\n          storeVal = Field.Store.NO;\n        doc.add(new Field(\"content1\", contents, storeVal,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content3\", \"\", Field.Store.YES,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content5\", \"\", storeVal,\n                          Field.Index.ANALYZED));\n      }\n\n      for(int j=0;j<4;j++)\n        writer.addDocument(doc);\n\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n      reader.deleteDocument(delID++);\n      reader.close();\n\n      if (0 == i % 4) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.optimize();\n        writer.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testVariableSchema().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testVariableSchema().mjava","sourceNew":"  public void testVariableSchema() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    int delID = 0;\n    for(int i=0;i<20;i++) {\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(2);\n      writer.setUseCompoundFile(false);\n      Document doc = new Document();\n      String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n\n      if (i == 7) {\n        // Add empty docs here\n        doc.add(new Field(\"content3\", \"\", Field.Store.NO,\n                          Field.Index.ANALYZED));\n      } else {\n        Field.Store storeVal;\n        if (i%2 == 0) {\n          doc.add(new Field(\"content4\", contents, Field.Store.YES,\n                            Field.Index.ANALYZED));\n          storeVal = Field.Store.YES;\n        } else\n          storeVal = Field.Store.NO;\n        doc.add(new Field(\"content1\", contents, storeVal,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content3\", \"\", Field.Store.YES,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content5\", \"\", storeVal,\n                          Field.Index.ANALYZED));\n      }\n\n      for(int j=0;j<4;j++)\n        writer.addDocument(doc);\n\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n      reader.deleteDocument(delID++);\n      reader.close();\n\n      if (0 == i % 4) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.optimize();\n        writer.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testVariableSchema() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    int delID = 0;\n    for(int i=0;i<20;i++) {\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setMergeFactor(2);\n      writer.setUseCompoundFile(false);\n      Document doc = new Document();\n      String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n\n      if (i == 7) {\n        // Add empty docs here\n        doc.add(new Field(\"content3\", \"\", Field.Store.NO,\n                          Field.Index.ANALYZED));\n      } else {\n        Field.Store storeVal;\n        if (i%2 == 0) {\n          doc.add(new Field(\"content4\", contents, Field.Store.YES,\n                            Field.Index.ANALYZED));\n          storeVal = Field.Store.YES;\n        } else\n          storeVal = Field.Store.NO;\n        doc.add(new Field(\"content1\", contents, storeVal,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content3\", \"\", Field.Store.YES,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"content5\", \"\", storeVal,\n                          Field.Index.ANALYZED));\n      }\n\n      for(int j=0;j<4;j++)\n        writer.addDocument(doc);\n\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n      reader.deleteDocument(delID++);\n      reader.close();\n\n      if (0 == i % 4) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.optimize();\n        writer.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}