{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SplineEvaluator#doWork(Object...).mjava","commits":[{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SplineEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n    } else if(objects.length == 2) {\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    }\n\n    SplineInterpolator interpolator = new SplineInterpolator();\n    PolynomialSplineFunction spline = interpolator.interpolate(x, y);\n\n    List<Number> list = new ArrayList();\n    for(double xvalue : x) {\n      list.add(spline.value(xvalue));\n    }\n\n    VectorFunction vec = new VectorFunction(spline, list);\n    vec.addToContext(\"x\", x);\n    vec.addToContext(\"y\", y);\n\n    return vec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SplineEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SplineEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object... objects) throws IOException{\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n    } else if(objects.length == 2) {\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    }\n\n    SplineInterpolator interpolator = new SplineInterpolator();\n    PolynomialSplineFunction spline = interpolator.interpolate(x, y);\n\n    List<Number> list = new ArrayList<>();\n    for(double xvalue : x) {\n      list.add(spline.value(xvalue));\n    }\n\n    VectorFunction vec = new VectorFunction(spline, list);\n    vec.addToContext(\"x\", x);\n    vec.addToContext(\"y\", y);\n\n    return vec;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException{\n\n    Object first = objects[0];\n\n    double[] x = null;\n    double[] y = null;\n\n    if(objects.length == 1) {\n      //Only the y values passed\n      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      x = new double[y.length];\n      for(int i=0; i<y.length; i++) {\n        x[i] = i;\n      }\n    } else if(objects.length == 2) {\n      Object second = objects[1];\n      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    }\n\n    SplineInterpolator interpolator = new SplineInterpolator();\n    PolynomialSplineFunction spline = interpolator.interpolate(x, y);\n\n    List<Number> list = new ArrayList();\n    for(double xvalue : x) {\n      list.add(spline.value(xvalue));\n    }\n\n    VectorFunction vec = new VectorFunction(spline, list);\n    vec.addToContext(\"x\", x);\n    vec.addToContext(\"y\", y);\n\n    return vec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}