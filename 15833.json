{"path":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","commits":[{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(InputStream).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & 0x1) != 0;\n      boolean storeTermVector = (bits & 0x2) != 0;\n      addInternal(name, isIndexed, storeTermVector);\n    }    \n  }\n\n","sourceOld":"  private void read(InputStream input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & 0x1) != 0;\n      boolean storeTermVector = (bits & 0x2) != 0;\n      addInternal(name, isIndexed, storeTermVector);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector);\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & 0x1) != 0;\n      boolean storeTermVector = (bits & 0x2) != 0;\n      addInternal(name, isIndexed, storeTermVector);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n\n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms);\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n\n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTf = (bits & OMIT_TF) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTf);\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTf = (bits & OMIT_TF) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTf);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367","date":1241174228,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input) throws IOException {\n    int size = input.readVInt();//read in the size\n    for (int i = 0; i < size; i++) {\n      String name = input.readString().intern();\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"950f3c7592cb559e2534e5089c78833250e156a3":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["950f3c7592cb559e2534e5089c78833250e156a3"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["e971ba25509e21a130fef61f0687be0446ca27a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"950f3c7592cb559e2534e5089c78833250e156a3":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e971ba25509e21a130fef61f0687be0446ca27a0"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["950f3c7592cb559e2534e5089c78833250e156a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}