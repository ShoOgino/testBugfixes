{"path":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n          d.findDeletableFiles();\n          d.deleteFiles();\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38","d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n          d.findDeletableFiles();\n          d.deleteFiles();\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n          d.findDeletableFiles();\n          d.deleteFiles();\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n    }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n          d.findDeletableFiles();\n          d.deleteFiles();\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          IndexFileDeleter d = new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          Hits hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm));\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length();\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.list();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.list();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      boolean debug = false;\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (debug) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (debug) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (debug) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDiskFull().mjava","sourceNew":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure if reader tries to commit but hits disk\n     * full that reader remains consistent and usable.\n     */\n    public void testDiskFull() throws IOException {\n\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      int START_COUNT = 157;\n      int END_COUNT = 144;\n      \n      // First build up a starting index:\n      RAMDirectory startDir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<157;i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      long diskUsage = startDir.sizeInBytes();\n      long diskFree = diskUsage+100;      \n\n      IOException err = null;\n\n      boolean done = false;\n\n      // Iterate w/ ever increasing free disk space:\n      while(!done) {\n        MockRAMDirectory dir = new MockRAMDirectory(startDir);\n\n        // If IndexReader hits disk full, it can write to\n        // the same files again.\n        dir.setPreventDoubleWrite(false);\n\n        IndexReader reader = IndexReader.open(dir, false);\n\n        // For each disk size, first try to commit against\n        // dir that will hit random IOExceptions & disk\n        // full; after, give it infinite disk space & turn\n        // off random IOExceptions & retry w/ same reader:\n        boolean success = false;\n\n        for(int x=0;x<2;x++) {\n\n          double rate = 0.05;\n          double diskRatio = ((double) diskFree)/diskUsage;\n          long thisDiskFree;\n          String testName;\n\n          if (0 == x) {\n            thisDiskFree = diskFree;\n            if (diskRatio >= 2.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 4.0) {\n              rate /= 2;\n            }\n            if (diskRatio >= 6.0) {\n              rate = 0.0;\n            }\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n            }\n            testName = \"disk full during reader.close() @ \" + thisDiskFree + \" bytes\";\n          } else {\n            thisDiskFree = 0;\n            rate = 0.0;\n            if (VERBOSE) {\n              System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n            }\n            testName = \"reader re-use after disk full\";\n          }\n\n          dir.setMaxSizeInBytes(thisDiskFree);\n          dir.setRandomIOExceptionRate(rate, diskFree);\n\n          try {\n            if (0 == x) {\n              int docId = 12;\n              for(int i=0;i<13;i++) {\n                reader.deleteDocument(docId);\n                reader.setNorm(docId, \"contents\", (float) 2.0);\n                docId += 12;\n              }\n            }\n            reader.close();\n            success = true;\n            if (0 == x) {\n              done = true;\n            }\n          } catch (IOException e) {\n            if (VERBOSE) {\n              System.out.println(\"  hit IOException: \" + e);\n              e.printStackTrace(System.out);\n            }\n            err = e;\n            if (1 == x) {\n              e.printStackTrace();\n              fail(testName + \" hit IOException after disk space was freed up\");\n            }\n          }\n\n          // Whether we succeeded or failed, check that all\n          // un-referenced files were in fact deleted (ie,\n          // we did not create garbage).  Just create a\n          // new IndexFileDeleter, have it delete\n          // unreferenced files, then verify that in fact\n          // no files were deleted:\n          String[] startFiles = dir.listAll();\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n          String[] endFiles = dir.listAll();\n\n          Arrays.sort(startFiles);\n          Arrays.sort(endFiles);\n\n          //for(int i=0;i<startFiles.length;i++) {\n          //  System.out.println(\"  startFiles: \" + i + \": \" + startFiles[i]);\n          //}\n\n          if (!Arrays.equals(startFiles, endFiles)) {\n            String successStr;\n            if (success) {\n              successStr = \"success\";\n            } else {\n              successStr = \"IOException\";\n              err.printStackTrace();\n            }\n            fail(\"reader.close() failed to delete unreferenced files after \" + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \" + arrayToString(startFiles) + \"\\n  after delete:\\n    \" + arrayToString(endFiles));\n          }\n\n          // Finally, verify index is not corrupt, and, if\n          // we succeeded, we see all docs changed, and if\n          // we failed, we see either all docs or no docs\n          // changed (transactional semantics):\n          IndexReader newReader = null;\n          try {\n            newReader = IndexReader.open(dir, false);\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \":exception when creating IndexReader after disk full during close: \" + e);\n          }\n          /*\n          int result = newReader.docFreq(searchTerm);\n          if (success) {\n            if (result != END_COUNT) {\n              fail(testName + \": method did not throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result != START_COUNT && result != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but docFreq('aaa') is \" + result + \" instead of expected \" + START_COUNT + \" or \" + END_COUNT);\n            }\n          }\n          */\n\n          IndexSearcher searcher = new IndexSearcher(newReader);\n          ScoreDoc[] hits = null;\n          try {\n            hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          } catch (IOException e) {\n            e.printStackTrace();\n            fail(testName + \": exception when searching: \" + e);\n          }\n          int result2 = hits.length;\n          if (success) {\n            if (result2 != END_COUNT) {\n              fail(testName + \": method did not throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + END_COUNT);\n            }\n          } else {\n            // On hitting exception we still may have added\n            // all docs:\n            if (result2 != START_COUNT && result2 != END_COUNT) {\n              err.printStackTrace();\n              fail(testName + \": method did throw exception but hits.length for search on term 'aaa' is \" + result2 + \" instead of expected \" + START_COUNT);\n            }\n          }\n\n          searcher.close();\n          newReader.close();\n\n          if (result2 == END_COUNT) {\n            break;\n          }\n        }\n\n        dir.close();\n\n        // Try again with 10 more bytes of free space:\n        diskFree += 10;\n      }\n\n      startDir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["d54c7739bfe85d68f0352823cd70c10c619fad38","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8b6187898fc4413ccd18229711786550a280383c"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e82780afe6097066eb5befb86e9432f077667e3d"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["eeefd99c477417e5c7c574228461ebafe92469d4"],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"8b6187898fc4413ccd18229711786550a280383c":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"eeefd99c477417e5c7c574228461ebafe92469d4":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e82780afe6097066eb5befb86e9432f077667e3d":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}