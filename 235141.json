{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","pathOld":"/dev/null","sourceNew":"  public void testFill() {\n    final int valueCount = 1111;\n    final int from = random().nextInt(valueCount + 1);\n    final int to = from + random().nextInt(valueCount + 1 - from);\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      final long val = random().nextInt((int) Math.min(Integer.MAX_VALUE, PackedInts.maxValue(bpv)));\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n      for (PackedInts.Mutable ints : packedInts) {\n        String msg = ints.getClass().getSimpleName() + \" bpv=\" + bpv + \", from=\" + from + \", to=\" + to + \", val=\" + val;\n        ints.fill(0, ints.size(), 1);\n        ints.fill(from, to, val);\n        for (int i = 0; i < ints.size(); ++i) {\n          if (i >= from && i < to) {\n            assertEquals(msg + \", i=\" + i, val, ints.get(i));\n          } else {\n            assertEquals(msg + \", i=\" + i, 1, ints.get(i));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","sourceNew":"  public void testFill() {\n    final int valueCount = 1111;\n    final int from = random().nextInt(valueCount + 1);\n    final int to = from + random().nextInt(valueCount + 1 - from);\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      final long val = _TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n      for (PackedInts.Mutable ints : packedInts) {\n        String msg = ints.getClass().getSimpleName() + \" bpv=\" + bpv + \", from=\" + from + \", to=\" + to + \", val=\" + val;\n        ints.fill(0, ints.size(), 1);\n        ints.fill(from, to, val);\n        for (int i = 0; i < ints.size(); ++i) {\n          if (i >= from && i < to) {\n            assertEquals(msg + \", i=\" + i, val, ints.get(i));\n          } else {\n            assertEquals(msg + \", i=\" + i, 1, ints.get(i));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testFill() {\n    final int valueCount = 1111;\n    final int from = random().nextInt(valueCount + 1);\n    final int to = from + random().nextInt(valueCount + 1 - from);\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      final long val = random().nextInt((int) Math.min(Integer.MAX_VALUE, PackedInts.maxValue(bpv)));\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n      for (PackedInts.Mutable ints : packedInts) {\n        String msg = ints.getClass().getSimpleName() + \" bpv=\" + bpv + \", from=\" + from + \", to=\" + to + \", val=\" + val;\n        ints.fill(0, ints.size(), 1);\n        ints.fill(from, to, val);\n        for (int i = 0; i < ints.size(); ++i) {\n          if (i >= from && i < to) {\n            assertEquals(msg + \", i=\" + i, val, ints.get(i));\n          } else {\n            assertEquals(msg + \", i=\" + i, 1, ints.get(i));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testFill().mjava","sourceNew":"  public void testFill() {\n    final int valueCount = 1111;\n    final int from = random().nextInt(valueCount + 1);\n    final int to = from + random().nextInt(valueCount + 1 - from);\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      final long val = TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n      for (PackedInts.Mutable ints : packedInts) {\n        String msg = ints.getClass().getSimpleName() + \" bpv=\" + bpv + \", from=\" + from + \", to=\" + to + \", val=\" + val;\n        ints.fill(0, ints.size(), 1);\n        ints.fill(from, to, val);\n        for (int i = 0; i < ints.size(); ++i) {\n          if (i >= from && i < to) {\n            assertEquals(msg + \", i=\" + i, val, ints.get(i));\n          } else {\n            assertEquals(msg + \", i=\" + i, 1, ints.get(i));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testFill() {\n    final int valueCount = 1111;\n    final int from = random().nextInt(valueCount + 1);\n    final int to = from + random().nextInt(valueCount + 1 - from);\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      final long val = _TestUtil.nextLong(random(), 0, PackedInts.maxValue(bpv));\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n      for (PackedInts.Mutable ints : packedInts) {\n        String msg = ints.getClass().getSimpleName() + \" bpv=\" + bpv + \", from=\" + from + \", to=\" + to + \", val=\" + val;\n        ints.fill(0, ints.size(), 1);\n        ints.fill(from, to, val);\n        for (int i = 0; i < ints.size(); ++i) {\n          if (i >= from && i < to) {\n            assertEquals(msg + \", i=\" + i, val, ints.get(i));\n          } else {\n            assertEquals(msg + \", i=\" + i, 1, ints.get(i));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}