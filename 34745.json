{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#verifyRandomRectangles(float[],float[]).mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#verifyRandomRectangles(float[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  protected void verifyRandomRectangles(float[] xs, float[] ys) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < xs.length/100) {\n      iwc.setMaxBufferedDocs(xs.length/100);\n    }\n    Directory dir;\n    if (xs.length > 100000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<xs.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Float.isNaN(xs[id]) == false && Float.isNaN(ys[id]) == false ) {\n        addPointToDoc(FIELD_NAME, doc, xs[id], ys[id]);\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter=0;iter<iters;iter++) {\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" s=\" + s);\n      }\n      \n      XYRectangle rect = nextBox();\n\n      Query query = newRectQuery(FIELD_NAME, rect.minX, rect.maxX, rect.minY, rect.maxY);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for(int docID=0;docID<maxDoc;docID++) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (Float.isNaN(xs[id]) || Float.isNaN(ys[id])) {\n          expected = false;\n        } else {\n          expected = rectContainsPoint(rect, xs[id], ys[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n          b.append(\"docID=(\").append(docID).append(\")\\n\");\n\n          if (expected) {\n            b.append(\"FAIL: id=\").append(id).append(\" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\").append(id).append(\" should not match but did\\n\");\n          }\n          b.append(\"  box=\").append(rect).append(\"\\n\");\n          b.append(\"  query=\").append(query).append(\" docID=\").append(docID).append(\"\\n\");\n          b.append(\"  x=\").append(xs[id]).append(\" y=\").append(ys[id]).append(\"\\n\");\n          b.append(\"  deleted?=\").append(liveDocs != null && liveDocs.get(docID) == false);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}