{"path":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.id = null;\n          deleteCmd.query = null;\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.id = text.toString();\n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.query = text.toString();\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/XMLLoader#processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (UpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (UpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.3\n   */\n  void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {\n    // Parse the command\n    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);\n\n    // First look for commitWithin parameter on the request, will be overwritten for individual <delete>'s\n    SolrParams params = req.getParams();\n    deleteCmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      String attrName = parser.getAttributeLocalName(i);\n      String attrVal = parser.getAttributeValue(i);\n      if (\"fromPending\".equals(attrName)) {\n        // deprecated\n      } else if (\"fromCommitted\".equals(attrName)) {\n        // deprecated\n      } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n        deleteCmd.commitWithin = Integer.parseInt(attrVal);\n      } else {\n        XmlUpdateRequestHandler.log.warn(\"unexpected attribute delete/@\" + attrName);\n      }\n    }\n\n    StringBuilder text = new StringBuilder();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.START_ELEMENT:\n          String mode = parser.getLocalName();\n          if (!(\"id\".equals(mode) || \"query\".equals(mode))) {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + mode);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + mode);\n          }\n          text.setLength(0);\n          \n          if (\"id\".equals(mode)) {\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.VERSION.equals(attrName)) {\n                deleteCmd.setVersion(Long.parseLong(attrVal));\n              }\n            }\n          }\n          break;\n\n        case XMLStreamConstants.END_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (\"id\".equals(currTag)) {\n            deleteCmd.setId(text.toString());         \n          } else if (\"query\".equals(currTag)) {\n            deleteCmd.setQuery(text.toString());\n          } else if (\"delete\".equals(currTag)) {\n            return;\n          } else {\n            XmlUpdateRequestHandler.log.warn(\"unexpected XML tag /delete/\" + currTag);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"unexpected XML tag /delete/\" + currTag);\n          }\n          processor.processDelete(deleteCmd);\n          deleteCmd.clear();\n          break;\n\n          // Add everything to the text\n        case XMLStreamConstants.SPACE:\n        case XMLStreamConstants.CDATA:\n        case XMLStreamConstants.CHARACTERS:\n          text.append(parser.getText());\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"671279fa1676e7f2755c2745a25abd77a169f992":["c26f00b574427b55127e869b935845554afde1fa"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["671279fa1676e7f2755c2745a25abd77a169f992","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["671279fa1676e7f2755c2745a25abd77a169f992","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"818d704eaaf0fba0561d0d2752832e1015053482":["671279fa1676e7f2755c2745a25abd77a169f992"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"671279fa1676e7f2755c2745a25abd77a169f992":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["671279fa1676e7f2755c2745a25abd77a169f992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","042e4d934397657ba04c82b46cc5665076bc5c58","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"818d704eaaf0fba0561d0d2752832e1015053482":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}