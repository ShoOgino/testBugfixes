{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","commits":[{"id":"c84219732de95c058a8de66ece93c70ad1b1051c","date":1492441745,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    if (3 != subEvaluators.size()) {\n      throw new EvaluatorException(new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting 3 value but found %d\", expression, subEvaluators.size())));\n    }\n\n    try {\n      from = LENGTH_CONSTANT.valueOf(subEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      to = LENGTH_CONSTANT.valueOf(subEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      this.convert = getConvert(from, to);\n    } catch (IllegalArgumentException e) {\n      throw new EvaluatorException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    if (3 != subEvaluators.size()) {\n      throw new EvaluatorException(new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting 3 value but found %d\", expression, subEvaluators.size())));\n    }\n\n    try {\n      from = LENGTH_CONSTANT.valueOf(subEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      to = LENGTH_CONSTANT.valueOf(subEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      this.convert = getConvert(from, to);\n    } catch (IllegalArgumentException e) {\n      throw new EvaluatorException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","sourceOld":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    if (3 != subEvaluators.size()) {\n      throw new EvaluatorException(new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting 3 value but found %d\", expression, subEvaluators.size())));\n    }\n\n    try {\n      from = LENGTH_CONSTANT.valueOf(subEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      to = LENGTH_CONSTANT.valueOf(subEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      this.convert = getConvert(from, to);\n    } catch (IllegalArgumentException e) {\n      throw new EvaluatorException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","sourceOld":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    if (3 != subEvaluators.size()) {\n      throw new EvaluatorException(new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting 3 value but found %d\", expression, subEvaluators.size())));\n    }\n\n    try {\n      from = LENGTH_CONSTANT.valueOf(subEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      to = LENGTH_CONSTANT.valueOf(subEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      this.convert = getConvert(from, to);\n    } catch (IllegalArgumentException e) {\n      throw new EvaluatorException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","sourceOld":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    if (3 != subEvaluators.size()) {\n      throw new EvaluatorException(new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting 3 value but found %d\", expression, subEvaluators.size())));\n    }\n\n    try {\n      from = LENGTH_CONSTANT.valueOf(subEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      to = LENGTH_CONSTANT.valueOf(subEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT));\n      this.convert = getConvert(from, to);\n    } catch (IllegalArgumentException e) {\n      throw new EvaluatorException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc61020924012c08fd69015b3edddac5fac6032b","date":1566850580,"type":3,"author":"KoenDG","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(containedEvaluators.subList(0, 2).stream().anyMatch(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","sourceOld":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce","date":1566931059,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConversionEvaluator#ConversionEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(containedEvaluators.subList(0, 2).stream().anyMatch(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","sourceOld":"  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(3 != containedEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting exactly 3 parameters but found %d\", super.toExpression(constructingFactory), containedEvaluators.size()));\n    }\n    \n    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first two parameters must be strings\", super.toExpression(constructingFactory)));      \n    }\n    \n    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);\n    \n    try {\n      from = LENGTH_CONSTANT.valueOf(fromString);\n      to = LENGTH_CONSTANT.valueOf(toString);\n      this.converter = constructConverter(from, to);\n      \n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - '%s' and '%s' are not both valid conversion types\", super.toExpression(constructingFactory), fromString, toString));\n    }\n    \n    // Remove evaluators 0 and 1 because we don't actually want those used\n    containedEvaluators = containedEvaluators.subList(2, 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c84219732de95c058a8de66ece93c70ad1b1051c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["c84219732de95c058a8de66ece93c70ad1b1051c","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["c84219732de95c058a8de66ece93c70ad1b1051c"],"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","fc61020924012c08fd69015b3edddac5fac6032b"],"fc61020924012c08fd69015b3edddac5fac6032b":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"c84219732de95c058a8de66ece93c70ad1b1051c":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c84219732de95c058a8de66ece93c70ad1b1051c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce","fc61020924012c08fd69015b3edddac5fac6032b"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc61020924012c08fd69015b3edddac5fac6032b":["da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}