{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertFalse(ts.incrementToken());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertTokenStreamContents(ts,\n      new String[] { \"please\", \"please divide\", \"divide\", \"divide this\",\n        \"this\", \"this sentence\", \"sentence\", \"sentence into\", \"into\",\n        \"into shingles\", \"shingles\" },\n      new int[] { 0, 0, 7, 7, 14, 14, 19, 19, 28, 28, 33 },\n      new int[] { 6, 13, 13, 18, 18, 27, 27, 32, 32, 39, 39 });\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertFalse(ts.incrementToken());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertTokenStreamContents(ts,\n      new String[] { \"please\", \"please divide\", \"divide\", \"divide this\",\n        \"this\", \"this sentence\", \"sentence\", \"sentence into\", \"into\",\n        \"into shingles\", \"shingles\" },\n      new int[] { 0, 0, 7, 7, 14, 14, 19, 19, 28, 28, 33 },\n      new int[] { 6, 13, 13, 18, 18, 27, 27, 32, 32, 39, 39 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertFalse(ts.incrementToken());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertTokenStreamContents(ts,\n      new String[] { \"please\", \"please divide\", \"divide\", \"divide this\",\n        \"this\", \"this sentence\", \"sentence\", \"sentence into\", \"into\",\n        \"into shingles\", \"shingles\" },\n      new int[] { 0, 0, 7, 7, 14, 14, 19, 19, 28, 28, 33 },\n      new int[] { 6, 13, 13, 18, 18, 27, 27, 32, 32, 39, 39 });\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertFalse(ts.incrementToken());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertTokenStreamContents(ts,\n      new String[] { \"please\", \"please divide\", \"divide\", \"divide this\",\n        \"this\", \"this sentence\", \"sentence\", \"sentence into\", \"into\",\n        \"into shingles\", \"shingles\" },\n      new int[] { 0, 0, 7, 7, 14, 14, 19, 19, 28, 28, 33 },\n      new int[] { 6, 13, 13, 18, 18, 27, 27, 32, 32, 39, 39 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}