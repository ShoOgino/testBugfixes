{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","commits":[{"id":"0bba396c158346d92cdd5ff662e97ac6166a2147","date":1443059349,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams params = getParams(this.props);\n    addStats(params, metrics);\n    params.add(\"stats\", \"true\");\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816189b2f867eab5e0795237a1d8e1bc03b19550","date":1493771668,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      this.tuple = getTuple(response);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","bugFix":["816189b2f867eab5e0795237a1d8e1bc03b19550"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n    if (streamContext.isLocal()) {\n      paramsLoc.set(\"distrib\", \"false\");\n    }\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    String json = getJsonFacetString(metrics);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)context.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(this.params);\n    addStats(paramsLoc, metrics);\n    paramsLoc.set(\"stats\", \"true\");\n    paramsLoc.set(\"rows\", \"0\");\n    if (streamContext.isLocal()) {\n      paramsLoc.set(\"distrib\", \"false\");\n    }\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      CloudSolrClient cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        this.tuple = getTuple(response);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#open().mjava","sourceNew":"  public void open() throws IOException {\n\n    String json = getJsonFacetString(metrics);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)context.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList response = cloudSolrClient.request(request, collection);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList response = client.request(request);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n    String json = getJsonFacetString(metrics);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    Map<String, List<String>> shardsMap = (Map<String, List<String>>)context.get(\"shards\");\n    if(shardsMap == null) {\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n      try {\n        NamedList response = cloudSolrClient.request(request, collection);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } else {\n      List<String> shards = shardsMap.get(collection);\n      HttpSolrClient client = cache.getHttpSolrClient(shards.get(0));\n\n      if(shards.size() > 1) {\n        String shardsParam = getShardString(shards);\n        paramsLoc.add(\"shards\", shardsParam);\n        paramsLoc.add(\"distrib\", \"true\");\n      }\n\n      QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n      try {\n        NamedList response = client.request(request);\n        getTuples(response, metrics);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["816189b2f867eab5e0795237a1d8e1bc03b19550"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","816189b2f867eab5e0795237a1d8e1bc03b19550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["0bba396c158346d92cdd5ff662e97ac6166a2147","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["70d9c44f68e848648da304352cf7c045c33148f4"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"70d9c44f68e848648da304352cf7c045c33148f4":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","816189b2f867eab5e0795237a1d8e1bc03b19550"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["70d9c44f68e848648da304352cf7c045c33148f4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816189b2f867eab5e0795237a1d8e1bc03b19550":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","e9017cf144952056066919f1ebc7897ff9bd71b1"],"70d9c44f68e848648da304352cf7c045c33148f4":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}