{"path":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa122aa6bc90e14eb49c0efee7cda631a87d8574","date":1361636893,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        // Currently, only UnInvertedField can deal with multi-part trie fields\n        String prefix = TrieField.getMainValuePrefix(ft);\n\n        if (sf.multiValued() || ft.multiValuedFieldCache() || prefix!=null) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = searcher.getSchema().getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c20e2f66487155554bc2d8bc489e0ff1686ba915","date":1394942287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(statsField, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n        String[] facets = params.getFieldParams(f, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(f);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(f, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(f, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(f, stv);\n        } else {\n          res.add(f, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f41068c0ab05fda1c7fe6e4bb799e00d1414668","date":1400030748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(statsField, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(statsField, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          //use UnInvertedField for multivalued fields\n          UnInvertedField uif = UnInvertedField.getUnInvertedField(statsField, searcher);\n          stv = uif.getStats(searcher, docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"511309ff970d3c2a68d1ac453cc187df1198f0d1","date":1410303604,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), base, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), docs, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":["0f41068c0ab05fda1c7fe6e4bb799e00d1414668"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#getStatsFields().mjava","sourceNew":null,"sourceOld":"  public NamedList<Object> getStatsFields() throws IOException, SyntaxError {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n    String[] statsFs = params.getParams(StatsParams.STATS_FIELD);\n    boolean isShard = params.getBool(ShardParams.IS_SHARD, false);\n    if (null != statsFs) {\n      final IndexSchema schema = searcher.getSchema();\n      for (String f : statsFs) {\n        boolean calcDistinct = params.getFieldBool(f, StatsParams.STATS_CALC_DISTINCT, false);\n\n        parseParams(f);\n\n        String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n        if (facets == null) {\n          facets = new String[0]; // make sure it is something...\n        }\n        SchemaField sf = schema.getField(statsField);\n        FieldType ft = sf.getType();\n        NamedList<?> stv;\n\n        if (sf.multiValued() || ft.multiValuedFieldCache()) {\n          // TODO: should this also be used for single-valued string fields? (should work fine)\n          stv = DocValuesStats.getCounts(searcher, sf.getName(), base, calcDistinct, facets).getStatsValues();\n        } else {\n          stv = getFieldCacheStats(statsField, calcDistinct, facets);\n        }\n        if (isShard == true || (Long) stv.get(\"count\") > 0) {\n          res.add(key, stv);\n        } else {\n          res.add(key, null);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bf795ee457272965bd751f513787065bbf0a650a"],"0f41068c0ab05fda1c7fe6e4bb799e00d1414668":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fa122aa6bc90e14eb49c0efee7cda631a87d8574":["c26f00b574427b55127e869b935845554afde1fa"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bf795ee457272965bd751f513787065bbf0a650a":["08970e5b8411182a29412c177eff67ec1110095b"],"56572ec06f1407c066d6b7399413178b33176cd8":["c20e2f66487155554bc2d8bc489e0ff1686ba915","93dd449115a9247533e44bab47e8429e5dccbc6d"],"08970e5b8411182a29412c177eff67ec1110095b":["fa122aa6bc90e14eb49c0efee7cda631a87d8574"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["c20e2f66487155554bc2d8bc489e0ff1686ba915","0f41068c0ab05fda1c7fe6e4bb799e00d1414668"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["08970e5b8411182a29412c177eff67ec1110095b","bf795ee457272965bd751f513787065bbf0a650a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["610c97b96420e614c67797fd43822ebc1d4b7ee2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"0f41068c0ab05fda1c7fe6e4bb799e00d1414668":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["fa122aa6bc90e14eb49c0efee7cda631a87d8574"],"fa122aa6bc90e14eb49c0efee7cda631a87d8574":["08970e5b8411182a29412c177eff67ec1110095b"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["0f41068c0ab05fda1c7fe6e4bb799e00d1414668","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"bf795ee457272965bd751f513787065bbf0a650a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"08970e5b8411182a29412c177eff67ec1110095b":["bf795ee457272965bd751f513787065bbf0a650a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","511309ff970d3c2a68d1ac453cc187df1198f0d1"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}