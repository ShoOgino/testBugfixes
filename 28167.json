{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","commits":[{"id":"344d7fb38511184be27e3eba27408ad5f634b91c","date":1270838455,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","pathOld":"lucene/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzPushbackPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead < 0) {\n      return true;\n    }\n    else {\n      zzEndRead+= numRead;\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzPushbackPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead < 0) {\n      return true;\n    }\n    else {\n      zzEndRead+= numRead;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzPushbackPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead < 0) {\n      return true;\n    }\n    else {\n      zzEndRead+= numRead;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl#zzRefill().mjava","sourceNew":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Refills the input buffer.\n   *\n   * @return      <code>false</code>, iff there was new input.\n   * \n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  private boolean zzRefill() throws java.io.IOException {\n\n    /* first: make room (if you can) */\n    if (zzStartRead > 0) {\n      System.arraycopy(zzBuffer, zzStartRead,\n                       zzBuffer, 0,\n                       zzEndRead-zzStartRead);\n\n      /* translate stored positions */\n      zzEndRead-= zzStartRead;\n      zzCurrentPos-= zzStartRead;\n      zzMarkedPos-= zzStartRead;\n      zzStartRead = 0;\n    }\n\n    /* is the buffer big enough? */\n    if (zzCurrentPos >= zzBuffer.length) {\n      /* if not: blow it up */\n      char newBuffer[] = new char[zzCurrentPos*2];\n      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);\n      zzBuffer = newBuffer;\n    }\n\n    /* finally: fill the buffer with new input */\n    int numRead = zzReader.read(zzBuffer, zzEndRead,\n                                            zzBuffer.length-zzEndRead);\n\n    if (numRead > 0) {\n      zzEndRead+= numRead;\n      return false;\n    }\n    // unlikely but not impossible: read 0 characters, but not at end of stream    \n    if (numRead == 0) {\n      int c = zzReader.read();\n      if (c == -1) {\n        return true;\n      } else {\n        zzBuffer[zzEndRead++] = (char) c;\n        return false;\n      }     \n    }\n\n\t// numRead < 0\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"344d7fb38511184be27e3eba27408ad5f634b91c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["344d7fb38511184be27e3eba27408ad5f634b91c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"344d7fb38511184be27e3eba27408ad5f634b91c":["1f03d60547476e008d3d993cd26872c1157f19cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["344d7fb38511184be27e3eba27408ad5f634b91c"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f03d60547476e008d3d993cd26872c1157f19cf":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}