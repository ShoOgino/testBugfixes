{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#refillPositions().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        pforUtil.decode(posIn, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (needsPayloads) {\n            pforUtil.decode(payIn, payloadLengthBuffer);\n            int numBytes = payIn.readVInt();\n\n            if (numBytes > payloadBytes.length) {\n              payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n            }\n            payIn.readBytes(payloadBytes, 0, numBytes);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            pforUtil.skip(payIn); // skip over lengths\n            int numBytes = payIn.readVInt(); // read length of payloadBytes\n            payIn.seek(payIn.getFilePointer() + numBytes); // skip over payloadBytes\n          }\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (needsOffsets) {\n            pforUtil.decode(payIn, offsetStartDeltaBuffer);\n            pforUtil.decode(payIn, offsetLengthBuffer);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            pforUtil.skip(payIn); // skip over starts\n            pforUtil.skip(payIn); // skip over lengths\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}