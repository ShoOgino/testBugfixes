{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        //System.out.println(\"BTR.seek by ord ord=\" + ord);\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n\n        assert ord < numTerms;\n\n        // TODO: if ord is in same terms block and\n        // after current ord, we should avoid this seek just\n        // like we do in the seek(BytesRef) case\n        in.seek(indexEnum.seek(ord));\n        boolean result = nextBlock();\n\n        // Block must exist since ord < numTerms:\n        assert result;\n\n        indexIsCurrent = true;\n        didIndexNext = false;\n        seekPending = false;\n\n        state.ord = indexEnum.ord()-1;\n        assert state.ord >= -1: \"ord=\" + state.ord;\n        term.copyBytes(indexEnum.term());\n\n        // Now, scan:\n        int left = (int) (ord - state.ord);\n        while(left > 0) {\n          final BytesRef term = _next();\n          assert term != null;\n          left--;\n          assert indexIsCurrent;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}