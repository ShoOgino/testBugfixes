{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","commits":[{"id":"0eab5479eeaba1914f4cd6b6bca566976c31075c","date":1162241544,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"/dev/null","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    int maxMergeDocs = writer.getMaxMergeDocs();\n    writer.setMaxMergeDocs(99);\n\n    try {\n      // upper bound cannot exceed maxMergeDocs\n      writer.addIndexesNoOptimize(new Directory[] { aux });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n\n    writer.setMaxMergeDocs(maxMergeDocs);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","ded5d448578a903cd50db958f11addab67e51bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0cb4e0840ad0d45706ad7fe5806b6d3e6624335b","date":1173256348,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    int maxMergeDocs = writer.getMaxMergeDocs();\n    writer.setMaxMergeDocs(99);\n\n    try {\n      // upper bound cannot exceed maxMergeDocs\n      writer.addIndexesNoOptimize(new Directory[] { aux });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n      assertEquals(1, writer.getSegmentCount());\n    }\n\n    writer.setMaxMergeDocs(maxMergeDocs);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    int maxMergeDocs = writer.getMaxMergeDocs();\n    writer.setMaxMergeDocs(99);\n\n    try {\n      // upper bound cannot exceed maxMergeDocs\n      writer.addIndexesNoOptimize(new Directory[] { aux });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n\n    writer.setMaxMergeDocs(maxMergeDocs);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":["ded5d448578a903cd50db958f11addab67e51bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded5d448578a903cd50db958f11addab67e51bf6","date":1207033122,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    int maxMergeDocs = writer.getMaxMergeDocs();\n    writer.setMaxMergeDocs(99);\n\n    try {\n      // upper bound cannot exceed maxMergeDocs\n      writer.addIndexesNoOptimize(new Directory[] { aux });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n      assertEquals(1, writer.getSegmentCount());\n    }\n\n    writer.setMaxMergeDocs(maxMergeDocs);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":["0cb4e0840ad0d45706ad7fe5806b6d3e6624335b","0eab5479eeaba1914f4cd6b6bca566976c31075c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.docCount());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.docCount());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, true);\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, true);\n    writer.setUseCompoundFile(false); // use one without a compound file\n    writer.setMaxBufferedDocs(1000);\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, false);\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testAddSelf().mjava","sourceNew":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","sourceOld":"  // case 0: add self or exceed maxMergeDocs, expect exception\n  public void testAddSelf() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    IndexWriter writer = null;\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    // add 100 documents\n    addDocs(writer, 100);\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    // add 140 documents in separate files\n    addDocs(writer, 40);\n    writer.close();\n    writer = newWriter(aux, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(1000));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false); // use one without a compound file\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false); // use one without a compound file\n    addDocs(writer, 100);\n    writer.close();\n\n    writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    try {\n      // cannot add self\n      writer.addIndexesNoOptimize(new Directory[] { aux, dir });\n      assertTrue(false);\n    }\n    catch (IllegalArgumentException e) {\n      assertEquals(100, writer.maxDoc());\n    }\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ded5d448578a903cd50db958f11addab67e51bf6":["0cb4e0840ad0d45706ad7fe5806b6d3e6624335b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["ded5d448578a903cd50db958f11addab67e51bf6"],"0cb4e0840ad0d45706ad7fe5806b6d3e6624335b":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"ded5d448578a903cd50db958f11addab67e51bf6":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0eab5479eeaba1914f4cd6b6bca566976c31075c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0cb4e0840ad0d45706ad7fe5806b6d3e6624335b":["ded5d448578a903cd50db958f11addab67e51bf6"],"0eab5479eeaba1914f4cd6b6bca566976c31075c":["0cb4e0840ad0d45706ad7fe5806b6d3e6624335b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}