{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"/dev/null","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = hasArcs(target.address);\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66a31a416e3550794ff2e245570885b7193952b6","date":1298453724,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = node.numArcs >= NUM_ARCS_FIXED_ARRAY;\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd87497064680553faa4af8ff897af3637d18c5","date":1305189670,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite;\n    final int stopAt = (endAddress - startAddress)/2;\n    int upto = 0;\n    while (upto < stopAt) {\n      final byte b = bytes[startAddress+upto];\n      bytes[startAddress+upto] = bytes[endAddress-upto-1];\n      bytes[endAddress-upto-1] = b;\n      upto++;\n    }\n\n    lastFrozenNode = endAddress - 1;\n    /*\n    System.out.println(\"  return node addr=\" + (endAddress-1));\n    for(int i=endAddress-1;i>=startAddress;i--) {\n      System.out.println(\"    bytes[\" + i + \"]=\" + bytes[i]);\n    }\n    */\n\n    return endAddress-1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["cdd87497064680553faa4af8ff897af3637d18c5"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"692804e172a5810620fac3194db7b7616a21ad3d":["868da859b43505d9d2a023bfeae6dd0c795f5295","66a31a416e3550794ff2e245570885b7193952b6"],"66a31a416e3550794ff2e245570885b7193952b6":["56da903869515527852ee21ea7ef7bfe414cd40d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","66a31a416e3550794ff2e245570885b7193952b6"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["66a31a416e3550794ff2e245570885b7193952b6","cdd87497064680553faa4af8ff897af3637d18c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","cdd87497064680553faa4af8ff897af3637d18c5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cdd87497064680553faa4af8ff897af3637d18c5":["66a31a416e3550794ff2e245570885b7193952b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"692804e172a5810620fac3194db7b7616a21ad3d":[],"66a31a416e3550794ff2e245570885b7193952b6":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","cdd87497064680553faa4af8ff897af3637d18c5"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","66a31a416e3550794ff2e245570885b7193952b6","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["692804e172a5810620fac3194db7b7616a21ad3d"],"cdd87497064680553faa4af8ff897af3637d18c5":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["692804e172a5810620fac3194db7b7616a21ad3d","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}