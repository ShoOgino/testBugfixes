{"path":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by this SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","sourceNew":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","sourceOld":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by this SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","sourceNew":null,"sourceOld":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#createAggregator(FacetRequest,FacetArrays).mjava","sourceNew":null,"sourceOld":"  protected Aggregator createAggregator(FacetRequest fr, FacetArrays facetArrays) {\n    if (fr instanceof CountFacetRequest) {\n      // we rely on that, if needed, result is cleared by arrays!\n      int[] a = facetArrays.getIntArray();\n      if (isUsingComplements) {\n        return new ComplementCountingAggregator(a);\n      } else {\n        return new CountingAggregator(a);\n      }\n    } else if (fr instanceof SumScoreFacetRequest) {\n      if (isUsingComplements) {\n        throw new IllegalArgumentException(\"complements are not supported by SumScoreFacetRequest\");\n      } else {\n        return new ScoringAggregator(facetArrays.getFloatArray());\n      }\n    } else if (fr instanceof OverSampledFacetRequest) {\n      return createAggregator(((OverSampledFacetRequest) fr).orig, facetArrays);\n    } else {\n      throw new IllegalArgumentException(\"unknown Aggregator implementation for request \" + fr.getClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}