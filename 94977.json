{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<>();\n    flatten( query, reader, flatQueries, 1f );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      float boost = 1f;\n      while (flatQuery instanceof BoostQuery) {\n        BoostQuery bq = (BoostQuery) flatQuery;\n        flatQuery = bq.getQuery();\n        boost *= bq.getBoost();\n      }\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, boost );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"944feda4f2ab2e2de62f308b3cbb6ba6953902ef","date":1539867181,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  public FieldQuery(Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<>();\n    flatten( query, reader, flatQueries, 1f );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      float boost = 1f;\n      while (flatQuery instanceof BoostQuery) {\n        BoostQuery bq = (BoostQuery) flatQuery;\n        flatQuery = bq.getQuery();\n        boost *= bq.getBoost();\n      }\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, boost );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<>();\n    flatten( query, reader, flatQueries, 1f );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      float boost = 1f;\n      while (flatQuery instanceof BoostQuery) {\n        BoostQuery bq = (BoostQuery) flatQuery;\n        flatQuery = bq.getQuery();\n        boost *= bq.getBoost();\n      }\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, boost );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}