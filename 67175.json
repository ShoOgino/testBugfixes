{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","commits":[{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7caae6e820e996ef2eb9ca511fb2e6d00ec3cdc6","date":1565706259,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90fce942f2c2978e110fd5f19c16da1d40f7f5bc","date":1567608696,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r3\", \"r5\", \"r1\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r3\", \"r5\", \"r1\" };\n    final String[] expectedTargetNode = new String[] { \"node2\", \"node2\", \"node3\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":["36f0252ed8dcb14c7a9129860ae8d13028d74365"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f0252ed8dcb14c7a9129860ae8d13028d74365","date":1567769793,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r1\", \"r3\", \"r5\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r1\", \"r3\", \"r5\" };\n    final String[] expectedTargetNode = new String[] { \"node3\", \"node3\", \"node2\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r3\", \"r5\", \"r1\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r3\", \"r5\", \"r1\" };\n    final String[] expectedTargetNode = new String[] { \"node2\", \"node2\", \"node3\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","bugFix":["90fce942f2c2978e110fd5f19c16da1d40f7f5bc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r1\", \"r3\", \"r5\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r1\", \"r3\", \"r5\" };\n    final String[] expectedTargetNode = new String[] { \"node3\", \"node3\", \"node2\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r1\", \"r3\", \"r5\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r1\", \"r3\", \"r5\" };\n    final String[] expectedTargetNode = new String[] { \"node3\", \"node3\", \"node2\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n\n    if(useNodeset) {\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n    }\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getSuggestion();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset: {'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = null;\n    for (String expectedReplica : new String[] { \"r1\", \"r3\", \"r5\", null }) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      if (expectedReplica == null) {\n        assertNull(operation);\n      } else {\n        assertNotNull(operation);\n        assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n        assertEquals(expectedReplica, operation.getParams().get(\"replica\"));\n      }\n    }\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    if(useNodeset){\n      policies = (Map) Utils.fromJSONString(\"{\" +\n          \"  'cluster-preferences': [\" +\n          \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n          \"    { 'minimize': 'cores', 'precision': 50}\" +\n          \"  ],\" +\n          \"  'cluster-policy': [\" +\n          \"    { 'replica': 0, nodeset:{'nodeRole': 'overseer'}}\" +\n          \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n          \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n          \"  ]\" +\n          \"}\");\n\n    }\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n\n    session = null;\n    final String[] expectedReplica = new String[] { \"r1\", \"r3\", \"r5\" };\n    final String[] expectedTargetNode = new String[] { \"node3\", \"node3\", \"node2\" };\n    for (int ii = 0; ii < expectedReplica.length; ++ii) {\n      if (session == null) {\n        session = policy.createSession(provider);\n      } else {\n        session = suggester.getSession();\n      }\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Hint.SRC_NODE, \"node1\");\n      operation = suggester.getSuggestion();\n      assertNotNull(operation);\n      assertEquals(expectedTargetNode[ii], operation.getParams().get(\"targetNode\"));\n      assertEquals(expectedReplica[ii], operation.getParams().get(\"replica\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["36f0252ed8dcb14c7a9129860ae8d13028d74365"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"7caae6e820e996ef2eb9ca511fb2e6d00ec3cdc6":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"90fce942f2c2978e110fd5f19c16da1d40f7f5bc":["7caae6e820e996ef2eb9ca511fb2e6d00ec3cdc6"],"36f0252ed8dcb14c7a9129860ae8d13028d74365":["90fce942f2c2978e110fd5f19c16da1d40f7f5bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["1bbcda32e5cd37ef61ea1190bacd080308e22070","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7caae6e820e996ef2eb9ca511fb2e6d00ec3cdc6":["90fce942f2c2978e110fd5f19c16da1d40f7f5bc"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"90fce942f2c2978e110fd5f19c16da1d40f7f5bc":["36f0252ed8dcb14c7a9129860ae8d13028d74365"],"36f0252ed8dcb14c7a9129860ae8d13028d74365":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["7caae6e820e996ef2eb9ca511fb2e6d00ec3cdc6","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}