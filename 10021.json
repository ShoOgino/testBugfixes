{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"en\", \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"no\", \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(TEST_VERSION_CURRENT, Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}