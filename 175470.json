{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","commits":[{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPropFilePersistence() throws Exception {\n    setMeUp();\n\n    // Test that an existing core.properties file is _not_ deleted if the core fails to load.\n    Properties badProps = makeCoreProperties(\"corep1\", false, true);\n    badProps.setProperty(CoreDescriptor.CORE_SCHEMA, \"not-there.xml\");\n\n    addCoreWithProps(\"corep1\", badProps);\n    // Sanity check that a core did get loaded\n    addCoreWithProps(\"corep2\", makeCoreProperties(\"corep2\", false, true));\n\n    Path coreP1PropFile = Paths.get(solrHomeDirectory.toString(), \"corep1\", \"core.properties\");\n    assertTrue(\"Core.properties file should exist for before core load failure core corep1\",\n        Files.exists(coreP1PropFile));\n\n    CoreContainer cc = init();\n    try {\n      try {\n        cc.getCore(\"corep1\");\n        fail(\"Should have thrown exception\");\n      } catch (SolrCoreInitializationException scie) {\n        assertTrue(scie.getMessage().contains(\"init failure\"));\n      }\n      try (SolrCore sc = cc.getCore(\"corep2\")) {\n        assertNotNull(\"Core corep2 should be loaded\", sc);\n      }\n      assertTrue(\"Core.properties file should still exist for core corep1\", Files.exists(coreP1PropFile));\n\n      // Creating a core successfully should create a core.properties file\n      Path corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep3\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet\", Files.exists(corePropFile));\n      cc.create(\"corep3\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      assertTrue(\"Should be a properties file for newly created core\", Files.exists(corePropFile));\n\n      // Failing to create a core should _not_ leave a core.properties file hanging around.\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep4\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep4\", Files.exists(corePropFile));\n\n      try {\n        cc.create(\"corep4\", ImmutableMap.of(\n            CoreDescriptor.CORE_NAME, \"corep4\",\n            CoreDescriptor.CORE_SCHEMA, \"not-there.xml\",\n            CoreDescriptor.CORE_CONFIG, \"solrconfig-minimal.xml\",\n            CoreDescriptor.CORE_TRANSIENT, \"false\",\n            CoreDescriptor.CORE_LOADONSTARTUP, \"true\"));\n        fail(\"Should have thrown exception getting core \");\n      } catch (SolrException se) {\n        assertTrue(se.getMessage().contains(\"Can't find resource\"));\n      }\n      assertFalse(\"Failed corep4 should not have left a core.properties file around\", Files.exists(corePropFile));\n\n      // Finally, just for yucks, let's determine that a this create path also leaves a prop file.\n\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep5\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep5\", Files.exists(corePropFile));\n\n      cc.create(\"corep5\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      \n      assertTrue(\"corep5 should have left a core.properties file on disk\", Files.exists(corePropFile));\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPropFilePersistence() throws Exception {\n    setMeUp();\n\n    // Test that an existing core.properties file is _not_ deleted if the core fails to load.\n    Properties badProps = makeCoreProperties(\"corep1\", false, true);\n    badProps.setProperty(CoreDescriptor.CORE_SCHEMA, \"not-there.xml\");\n\n    addCoreWithProps(\"corep1\", badProps);\n    // Sanity check that a core did get loaded\n    addCoreWithProps(\"corep2\", makeCoreProperties(\"corep2\", false, true));\n\n    Path coreP1PropFile = Paths.get(solrHomeDirectory.toString(), \"corep1\", \"core.properties\");\n    assertTrue(\"Core.properties file should exist for before core load failure core corep1\",\n        Files.exists(coreP1PropFile));\n\n    CoreContainer cc = init();\n    try {\n      try {\n        cc.getCore(\"corep1\");\n        fail(\"Should have thrown exception\");\n      } catch (SolrCoreInitializationException scie) {\n        assertTrue(scie.getMessage().contains(\"init failure\"));\n      }\n      try (SolrCore sc = cc.getCore(\"corep2\")) {\n        assertNotNull(\"Core corep2 should be loaded\", sc);\n      }\n      assertTrue(\"Core.properties file should still exist for core corep1\", Files.exists(coreP1PropFile));\n\n      // Creating a core successfully should create a core.properties file\n      Path corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep3\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet\", Files.exists(corePropFile));\n      cc.create(\"corep3\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      assertTrue(\"Should be a properties file for newly created core\", Files.exists(corePropFile));\n\n      // Failing to create a core should _not_ leave a core.properties file hanging around.\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep4\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep4\", Files.exists(corePropFile));\n\n      try {\n        cc.create(\"corep4\", ImmutableMap.of(\n            CoreDescriptor.CORE_NAME, \"corep4\",\n            CoreDescriptor.CORE_SCHEMA, \"not-there.xml\",\n            CoreDescriptor.CORE_CONFIG, \"solrconfig-minimal.xml\",\n            CoreDescriptor.CORE_TRANSIENT, \"false\",\n            CoreDescriptor.CORE_LOADONSTARTUP, \"true\"));\n        fail(\"Should have thrown exception getting core \");\n      } catch (SolrException se) {\n        assertTrue(se.getMessage().contains(\"Can't find resource\"));\n      }\n      assertFalse(\"Failed corep4 should not have left a core.properties file around\", Files.exists(corePropFile));\n\n      // Finally, just for yucks, let's determine that a this create path also leaves a prop file.\n\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep5\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep5\", Files.exists(corePropFile));\n\n      cc.create(\"corep5\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      \n      assertTrue(\"corep5 should have left a core.properties file on disk\", Files.exists(corePropFile));\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPropFilePersistence() throws Exception {\n    setMeUp();\n\n    // Test that an existing core.properties file is _not_ deleted if the core fails to load.\n    Properties badProps = makeCoreProperties(\"corep1\", false, true);\n    badProps.setProperty(CoreDescriptor.CORE_SCHEMA, \"not-there.xml\");\n\n    addCoreWithProps(\"corep1\", badProps);\n    // Sanity check that a core did get loaded\n    addCoreWithProps(\"corep2\", makeCoreProperties(\"corep2\", false, true));\n\n    Path coreP1PropFile = Paths.get(solrHomeDirectory.toString(), \"corep1\", \"core.properties\");\n    assertTrue(\"Core.properties file should exist for before core load failure core corep1\",\n        Files.exists(coreP1PropFile));\n\n    CoreContainer cc = init();\n    try {\n      try {\n        cc.getCore(\"corep1\");\n        fail(\"Should have thrown exception\");\n      } catch (SolrCoreInitializationException scie) {\n        assertTrue(scie.getMessage().contains(\"init failure\"));\n      }\n      try (SolrCore sc = cc.getCore(\"corep2\")) {\n        assertNotNull(\"Core corep2 should be loaded\", sc);\n      }\n      assertTrue(\"Core.properties file should still exist for core corep1\", Files.exists(coreP1PropFile));\n\n      // Creating a core successfully should create a core.properties file\n      Path corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep3\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet\", Files.exists(corePropFile));\n      cc.create(\"corep3\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      assertTrue(\"Should be a properties file for newly created core\", Files.exists(corePropFile));\n\n      // Failing to create a core should _not_ leave a core.properties file hanging around.\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep4\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep4\", Files.exists(corePropFile));\n\n      try {\n        cc.create(\"corep4\", ImmutableMap.of(\n            CoreDescriptor.CORE_NAME, \"corep4\",\n            CoreDescriptor.CORE_SCHEMA, \"not-there.xml\",\n            CoreDescriptor.CORE_CONFIG, \"solrconfig-minimal.xml\",\n            CoreDescriptor.CORE_TRANSIENT, \"false\",\n            CoreDescriptor.CORE_LOADONSTARTUP, \"true\"));\n        fail(\"Should have thrown exception getting core \");\n      } catch (SolrException se) {\n        assertTrue(se.getMessage().contains(\"Can't find resource\"));\n      }\n      assertFalse(\"Failed corep4 should not have left a core.properties file around\", Files.exists(corePropFile));\n\n      // Finally, just for yucks, let's determine that a this create path also leaves a prop file.\n\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep5\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep5\", Files.exists(corePropFile));\n\n      cc.create(\"corep5\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      \n      assertTrue(\"corep5 should have left a core.properties file on disk\", Files.exists(corePropFile));\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropFilePersistence().mjava","sourceNew":"  @Test\n  public void testPropFilePersistence() throws Exception {\n    setMeUp();\n\n    // Test that an existing core.properties file is _not_ deleted if the core fails to load.\n    Properties badProps = makeCoreProperties(\"corep1\", false, true);\n    badProps.setProperty(CoreDescriptor.CORE_SCHEMA, \"not-there.xml\");\n\n    addCoreWithProps(\"corep1\", badProps);\n    // Sanity check that a core did get loaded\n    addCoreWithProps(\"corep2\", makeCoreProperties(\"corep2\", false, true));\n\n    Path coreP1PropFile = Paths.get(solrHomeDirectory.toString(), \"corep1\", \"core.properties\");\n    assertTrue(\"Core.properties file should exist for before core load failure core corep1\",\n        Files.exists(coreP1PropFile));\n\n    CoreContainer cc = init();\n    try {\n      Exception thrown = expectThrows(SolrCoreInitializationException.class, () -> cc.getCore(\"corep1\"));\n      assertTrue(thrown.getMessage().contains(\"init failure\"));\n      try (SolrCore sc = cc.getCore(\"corep2\")) {\n        assertNotNull(\"Core corep2 should be loaded\", sc);\n      }\n      assertTrue(\"Core.properties file should still exist for core corep1\", Files.exists(coreP1PropFile));\n\n      // Creating a core successfully should create a core.properties file\n      Path corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep3\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet\", Files.exists(corePropFile));\n      cc.create(\"corep3\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      assertTrue(\"Should be a properties file for newly created core\", Files.exists(corePropFile));\n\n      // Failing to create a core should _not_ leave a core.properties file hanging around.\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep4\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep4\", Files.exists(corePropFile));\n\n      thrown = expectThrows(SolrException.class, () -> {\n        cc.create(\"corep4\", ImmutableMap.of(\n            CoreDescriptor.CORE_NAME, \"corep4\",\n            CoreDescriptor.CORE_SCHEMA, \"not-there.xml\",\n            CoreDescriptor.CORE_CONFIG, \"solrconfig-minimal.xml\",\n            CoreDescriptor.CORE_TRANSIENT, \"false\",\n            CoreDescriptor.CORE_LOADONSTARTUP, \"true\"));\n      });\n      assertTrue(thrown.getMessage().contains(\"Can't find resource\"));\n      assertFalse(\"Failed corep4 should not have left a core.properties file around\", Files.exists(corePropFile));\n\n      // Finally, just for yucks, let's determine that a this create path also leaves a prop file.\n\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep5\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep5\", Files.exists(corePropFile));\n\n      cc.create(\"corep5\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      \n      assertTrue(\"corep5 should have left a core.properties file on disk\", Files.exists(corePropFile));\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPropFilePersistence() throws Exception {\n    setMeUp();\n\n    // Test that an existing core.properties file is _not_ deleted if the core fails to load.\n    Properties badProps = makeCoreProperties(\"corep1\", false, true);\n    badProps.setProperty(CoreDescriptor.CORE_SCHEMA, \"not-there.xml\");\n\n    addCoreWithProps(\"corep1\", badProps);\n    // Sanity check that a core did get loaded\n    addCoreWithProps(\"corep2\", makeCoreProperties(\"corep2\", false, true));\n\n    Path coreP1PropFile = Paths.get(solrHomeDirectory.toString(), \"corep1\", \"core.properties\");\n    assertTrue(\"Core.properties file should exist for before core load failure core corep1\",\n        Files.exists(coreP1PropFile));\n\n    CoreContainer cc = init();\n    try {\n      try {\n        cc.getCore(\"corep1\");\n        fail(\"Should have thrown exception\");\n      } catch (SolrCoreInitializationException scie) {\n        assertTrue(scie.getMessage().contains(\"init failure\"));\n      }\n      try (SolrCore sc = cc.getCore(\"corep2\")) {\n        assertNotNull(\"Core corep2 should be loaded\", sc);\n      }\n      assertTrue(\"Core.properties file should still exist for core corep1\", Files.exists(coreP1PropFile));\n\n      // Creating a core successfully should create a core.properties file\n      Path corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep3\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet\", Files.exists(corePropFile));\n      cc.create(\"corep3\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      assertTrue(\"Should be a properties file for newly created core\", Files.exists(corePropFile));\n\n      // Failing to create a core should _not_ leave a core.properties file hanging around.\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep4\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep4\", Files.exists(corePropFile));\n\n      try {\n        cc.create(\"corep4\", ImmutableMap.of(\n            CoreDescriptor.CORE_NAME, \"corep4\",\n            CoreDescriptor.CORE_SCHEMA, \"not-there.xml\",\n            CoreDescriptor.CORE_CONFIG, \"solrconfig-minimal.xml\",\n            CoreDescriptor.CORE_TRANSIENT, \"false\",\n            CoreDescriptor.CORE_LOADONSTARTUP, \"true\"));\n        fail(\"Should have thrown exception getting core \");\n      } catch (SolrException se) {\n        assertTrue(se.getMessage().contains(\"Can't find resource\"));\n      }\n      assertFalse(\"Failed corep4 should not have left a core.properties file around\", Files.exists(corePropFile));\n\n      // Finally, just for yucks, let's determine that a this create path also leaves a prop file.\n\n      corePropFile = Paths.get(solrHomeDirectory.toString(), \"corep5\", \"core.properties\");\n      assertFalse(\"Should not be a properties file yet for corep5\", Files.exists(corePropFile));\n\n      cc.create(\"corep5\", ImmutableMap.of(\"configSet\", \"minimal\"));\n      \n      assertTrue(\"corep5 should have left a core.properties file on disk\", Files.exists(corePropFile));\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d301cb76d81de80d07b44735622a04d49ed938eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d301cb76d81de80d07b44735622a04d49ed938eb"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["d301cb76d81de80d07b44735622a04d49ed938eb"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"d301cb76d81de80d07b44735622a04d49ed938eb":["936cdd5882761db3b844afd6f84ab81cbb011a75","68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d301cb76d81de80d07b44735622a04d49ed938eb","936cdd5882761db3b844afd6f84ab81cbb011a75","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}