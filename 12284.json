{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    // To avoid needless concurrent communication with the Overseer from this JVM, we\n    //   maintain a Semaphore from an alias name keyed ConcurrentHashMap.\n    //   Alternatively a Lock or CountDownLatch could have been used but they didn't seem\n    //   to make it any easier.\n\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(aliasName, n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        final String operation = CollectionParams.CollectionAction.ROUTEDALIAS_CREATECOLL.toLower();\n        Map<String, Object> msg = new HashMap<>();\n        msg.put(Overseer.QUEUE_OPERATION, operation);\n        msg.put(CollectionParams.NAME, aliasName);\n        msg.put(RoutedAliasCreateCollectionCmd.IF_MOST_RECENT_COLL_NAME, mostRecentCollName);\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        try {\n          this.collHandler.handleResponse(\n              operation,\n              new ZkNodeProps(msg),\n              rsp);\n          if (rsp.getException() != null) {\n            throw rsp.getException();\n          } // otherwise don't care about the response.  It's possible no collection was created because\n          //  of a race and that's okay... we'll ultimately retry any way.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          zkController.getZkStateReader().aliasesHolder.update();\n        } catch (RuntimeException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    // To avoid needless concurrent communication with the Overseer from this JVM, we\n    //   maintain a Semaphore from an alias name keyed ConcurrentHashMap.\n    //   Alternatively a Lock or CountDownLatch could have been used but they didn't seem\n    //   to make it any easier.\n\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(aliasName, n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        final String operation = CollectionParams.CollectionAction.ROUTEDALIAS_CREATECOLL.toLower();\n        Map<String, Object> msg = new HashMap<>();\n        msg.put(Overseer.QUEUE_OPERATION, operation);\n        msg.put(CollectionParams.NAME, aliasName);\n        msg.put(RoutedAliasCreateCollectionCmd.IF_MOST_RECENT_COLL_NAME, mostRecentCollName);\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        try {\n          this.collHandler.handleResponse(\n              operation,\n              new ZkNodeProps(msg),\n              rsp);\n          if (rsp.getException() != null) {\n            throw rsp.getException();\n          } // otherwise don't care about the response.  It's possible no collection was created because\n          //  of a race and that's okay... we'll ultimately retry any way.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          zkController.getZkStateReader().aliasesHolder.update();\n        } catch (RuntimeException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","sourceNew":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    // To avoid needless concurrent communication with the Overseer from this JVM, we\n    //   maintain a Semaphore from an alias name keyed ConcurrentHashMap.\n    //   Alternatively a Lock or CountDownLatch could have been used but they didn't seem\n    //   to make it any easier.\n\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        final String operation = CollectionParams.CollectionAction.ROUTEDALIAS_CREATECOLL.toLower();\n        Map<String, Object> msg = new HashMap<>();\n        msg.put(Overseer.QUEUE_OPERATION, operation);\n        msg.put(CollectionParams.NAME, getAliasName());\n        msg.put(RoutedAliasCreateCollectionCmd.IF_MOST_RECENT_COLL_NAME, mostRecentCollName);\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        try {\n          this.collHandler.handleResponse(\n              operation,\n              new ZkNodeProps(msg),\n              rsp);\n          if (rsp.getException() != null) {\n            throw rsp.getException();\n          } // otherwise don't care about the response.  It's possible no collection was created because\n          //  of a race and that's okay... we'll ultimately retry any way.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          zkController.getZkStateReader().aliasesHolder.update();\n        } catch (RuntimeException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","sourceOld":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    // To avoid needless concurrent communication with the Overseer from this JVM, we\n    //   maintain a Semaphore from an alias name keyed ConcurrentHashMap.\n    //   Alternatively a Lock or CountDownLatch could have been used but they didn't seem\n    //   to make it any easier.\n\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(aliasName, n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        final String operation = CollectionParams.CollectionAction.ROUTEDALIAS_CREATECOLL.toLower();\n        Map<String, Object> msg = new HashMap<>();\n        msg.put(Overseer.QUEUE_OPERATION, operation);\n        msg.put(CollectionParams.NAME, aliasName);\n        msg.put(RoutedAliasCreateCollectionCmd.IF_MOST_RECENT_COLL_NAME, mostRecentCollName);\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        try {\n          this.collHandler.handleResponse(\n              operation,\n              new ZkNodeProps(msg),\n              rsp);\n          if (rsp.getException() != null) {\n            throw rsp.getException();\n          } // otherwise don't care about the response.  It's possible no collection was created because\n          //  of a race and that's okay... we'll ultimately retry any way.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          zkController.getZkStateReader().aliasesHolder.update();\n        } catch (RuntimeException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","sourceNew":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n\n    // (see docs on aliasToSemaphoreMap)\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        RoutedAliasCreateCollectionCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n        // we don't care about the response.  It's possible no collection was created because\n        //  of a race and that's okay... we'll ultimately retry any way.\n\n        // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n        //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n        //  we failed.\n        zkController.getZkStateReader().aliasesManager.update();\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","sourceOld":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    // To avoid needless concurrent communication with the Overseer from this JVM, we\n    //   maintain a Semaphore from an alias name keyed ConcurrentHashMap.\n    //   Alternatively a Lock or CountDownLatch could have been used but they didn't seem\n    //   to make it any easier.\n\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        final String operation = CollectionParams.CollectionAction.ROUTEDALIAS_CREATECOLL.toLower();\n        Map<String, Object> msg = new HashMap<>();\n        msg.put(Overseer.QUEUE_OPERATION, operation);\n        msg.put(CollectionParams.NAME, getAliasName());\n        msg.put(RoutedAliasCreateCollectionCmd.IF_MOST_RECENT_COLL_NAME, mostRecentCollName);\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        try {\n          this.collHandler.handleResponse(\n              operation,\n              new ZkNodeProps(msg),\n              rsp);\n          if (rsp.getException() != null) {\n            throw rsp.getException();\n          } // otherwise don't care about the response.  It's possible no collection was created because\n          //  of a race and that's okay... we'll ultimately retry any way.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          zkController.getZkStateReader().aliasesHolder.update();\n        } catch (RuntimeException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b6eb78cb29a08063ed0ed2816d8817ede89fa90","date":1518149772,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","sourceNew":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n\n    // (see docs on aliasToSemaphoreMap)\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        MaintainRoutedAliasCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n        // we don't care about the response.  It's possible no collection was created because\n        //  of a race and that's okay... we'll ultimately retry any way.\n\n        // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n        //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n        //  we failed.\n        zkController.getZkStateReader().aliasesManager.update();\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","sourceOld":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n\n    // (see docs on aliasToSemaphoreMap)\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        RoutedAliasCreateCollectionCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n        // we don't care about the response.  It's possible no collection was created because\n        //  of a race and that's okay... we'll ultimately retry any way.\n\n        // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n        //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n        //  we failed.\n        zkController.getZkStateReader().aliasesManager.update();\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createCollectionAfter(String).mjava","sourceNew":null,"sourceOld":"  private void createCollectionAfter(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n\n    // (see docs on aliasToSemaphoreMap)\n    final Semaphore semaphore = aliasToSemaphoreMap.computeIfAbsent(getAliasName(), n -> new Semaphore(1));\n    if (semaphore.tryAcquire()) {\n      try {\n        MaintainRoutedAliasCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n        // we don't care about the response.  It's possible no collection was created because\n        //  of a race and that's okay... we'll ultimately retry any way.\n\n        // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n        //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n        //  we failed.\n        zkController.getZkStateReader().aliasesManager.update();\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        semaphore.release(); // to signal we're done to anyone waiting on it\n      }\n\n    } else {\n      // Failed to acquire permit because another URP instance on this JVM is creating a collection.\n      // So wait till it's available\n      log.debug(\"Collection creation is already in progress so we'll wait then try again.\");\n      try {\n        if (semaphore.tryAcquire(DEFAULT_COLLECTION_OP_TIMEOUT, TimeUnit.MILLISECONDS)) {\n          semaphore.release(); // we don't actually want a permit so give it back\n          // return to continue...\n        } else {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Waited too long for another update thread to be done with collection creation.\");\n        }\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Interrupted waiting on collection creation.\", e); // if we were interrupted, give up.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b6eb78cb29a08063ed0ed2816d8817ede89fa90":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["1b6eb78cb29a08063ed0ed2816d8817ede89fa90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849083f8095b1ffaff05a66e0b1e024617b9968d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["1b6eb78cb29a08063ed0ed2816d8817ede89fa90"],"1b6eb78cb29a08063ed0ed2816d8817ede89fa90":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}