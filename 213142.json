{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#addBeans(Iterator[#],int).mjava","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Adds the beans supplied by the given iterator, specifying max time before they become committed\n   * @param commitWithinMs  the time in milliseconds before a commit automatically is triggered\n   * @param beanIterator  the iterator which returns Beans\n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator, int commitWithinMs)\n          throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    req.setCommitWithin(commitWithinMs);\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#addBeans(Iterator[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#addBeans(Iterator[#]).mjava","sourceNew":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Adds the beans supplied by the given iterator.\n   * \n   * @param beanIterator\n   *          the iterator which returns Beans\n   * \n   * @return the response from the SolrServer\n   */\n  public UpdateResponse addBeans(final Iterator<?> beanIterator)\n      throws SolrServerException, IOException {\n    UpdateRequest req = new UpdateRequest();\n    req.setDocIterator(new Iterator<SolrInputDocument>() {\n      \n      @Override\n      public boolean hasNext() {\n        return beanIterator.hasNext();\n      }\n      \n      @Override\n      public SolrInputDocument next() {\n        Object o = beanIterator.next();\n        if (o == null) return null;\n        return getBinder().toSolrInputDocument(o);\n      }\n      \n      @Override\n      public void remove() {\n        beanIterator.remove();\n      }\n    });\n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}