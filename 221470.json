{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","sourceNew":"    /** adds an item to the mapping. returns true if actually added */\n    public boolean add(long l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      if (l >= Byte.MIN_VALUE && l <= Byte.MAX_VALUE) {\n        int index = (int) (l + 128);\n        short previous = singleByteRange[index];\n        if (previous < 0) {\n          singleByteRange[index] = (short) size;\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (!other.containsKey(l)) {\n          other.put(l, (short)size);\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /** adds an item to the mapping. returns true if actually added */\n    public boolean add(long l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      if (l >= Byte.MIN_VALUE && l <= Byte.MAX_VALUE) {\n        int index = (int) (l + 128);\n        short previous = singleByteRange[index];\n        if (previous < 0) {\n          singleByteRange[index] = (short) size;\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (!other.containsKey(l)) {\n          other.put(l, (short)size);\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","sourceNew":"    /** adds an item to the mapping. returns true if actually added */\n    public boolean add(long l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      if (l >= Byte.MIN_VALUE && l <= Byte.MAX_VALUE) {\n        int index = (int) (l + 128);\n        short previous = singleByteRange[index];\n        if (previous < 0) {\n          singleByteRange[index] = (short) size;\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (!other.containsKey(l)) {\n          other.put(l, (short)size);\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    /** adds an item to the mapping. returns true if actually added */\n    public boolean add(long l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      if (l >= Byte.MIN_VALUE && l <= Byte.MAX_VALUE) {\n        int index = (int) (l + 128);\n        short previous = singleByteRange[index];\n        if (previous < 0) {\n          singleByteRange[index] = (short) size;\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (!other.containsKey(l)) {\n          other.put(l, (short)size);\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer.NormMap#add(long).mjava","sourceNew":null,"sourceOld":"    /** adds an item to the mapping. returns true if actually added */\n    public boolean add(long l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      if (l >= Byte.MIN_VALUE && l <= Byte.MAX_VALUE) {\n        int index = (int) (l + 128);\n        short previous = singleByteRange[index];\n        if (previous < 0) {\n          singleByteRange[index] = (short) size;\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (!other.containsKey(l)) {\n          other.put(l, (short)size);\n          size++;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}