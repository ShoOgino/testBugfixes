{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object[]).mjava","commits":[{"id":"5999895c8ef48fe0f20d75576aea7e99dcdc8bde","date":1560987620,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object[]).mjava","pathOld":"/dev/null","sourceNew":"  public Object doWork(Object[] values) throws IOException {\n    if(values[1] instanceof String) {\n      String s = values[0].toString();\n      if(pattern == null) {\n        String p = (String) values[1];\n        pattern = Pattern.compile(p.replace(\"\\\"\", \"\"));\n      }\n\n      if(s.startsWith(\"\\\"\")) {\n        s = s.replace(\"\\\"\", \"\");\n      }\n\n      Matcher matcher = pattern.matcher(s);\n      return matcher.find();\n    } else {\n      throw new IOException(\"The matches function requires a String regex\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ecccbbb5df38d30672b757f22eeef2050098e9","date":1576767784,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object[]).mjava","sourceNew":"  public Object doWork(Object... values) throws IOException {\n    if(values[1] instanceof String) {\n      String s = values[0].toString();\n      if(pattern == null) {\n        String p = (String) values[1];\n        pattern = Pattern.compile(p.replace(\"\\\"\", \"\"));\n      }\n\n      if(s.startsWith(\"\\\"\")) {\n        s = s.replace(\"\\\"\", \"\");\n      }\n\n      Matcher matcher = pattern.matcher(s);\n      return matcher.find();\n    } else {\n      throw new IOException(\"The matches function requires a String regex\");\n    }\n  }\n\n","sourceOld":"  public Object doWork(Object[] values) throws IOException {\n    if(values[1] instanceof String) {\n      String s = values[0].toString();\n      if(pattern == null) {\n        String p = (String) values[1];\n        pattern = Pattern.compile(p.replace(\"\\\"\", \"\"));\n      }\n\n      if(s.startsWith(\"\\\"\")) {\n        s = s.replace(\"\\\"\", \"\");\n      }\n\n      Matcher matcher = pattern.matcher(s);\n      return matcher.find();\n    } else {\n      throw new IOException(\"The matches function requires a String regex\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatchesEvaluator#doWork(Object[]).mjava","sourceNew":"  public Object doWork(Object... values) throws IOException {\n    if(values[1] instanceof String) {\n      String s = values[0].toString();\n      if(pattern == null) {\n        String p = (String) values[1];\n        pattern = Pattern.compile(p.replace(\"\\\"\", \"\"));\n      }\n\n      if(s.startsWith(\"\\\"\")) {\n        s = s.replace(\"\\\"\", \"\");\n      }\n\n      Matcher matcher = pattern.matcher(s);\n      return matcher.find();\n    } else {\n      throw new IOException(\"The matches function requires a String regex\");\n    }\n  }\n\n","sourceOld":"  public Object doWork(Object[] values) throws IOException {\n    if(values[1] instanceof String) {\n      String s = values[0].toString();\n      if(pattern == null) {\n        String p = (String) values[1];\n        pattern = Pattern.compile(p.replace(\"\\\"\", \"\"));\n      }\n\n      if(s.startsWith(\"\\\"\")) {\n        s = s.replace(\"\\\"\", \"\");\n      }\n\n      Matcher matcher = pattern.matcher(s);\n      return matcher.find();\n    } else {\n      throw new IOException(\"The matches function requires a String regex\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5999895c8ef48fe0f20d75576aea7e99dcdc8bde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde","a1ecccbbb5df38d30672b757f22eeef2050098e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1ecccbbb5df38d30672b757f22eeef2050098e9"]},"commit2Childs":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde"],"5999895c8ef48fe0f20d75576aea7e99dcdc8bde":["a1ecccbbb5df38d30672b757f22eeef2050098e9","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}