{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","commits":[{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (maxLon - lon < 90 && lon - minLon < 90 &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (maxLon - lon < 90 && lon - minLon < 90 &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69757d80e0dd57592117406dd1b9620762647f1c","date":1485766071,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (within90LonDegrees(lon, minLon, maxLon) &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (maxLon - lon < 90 && lon - minLon < 90 &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#relate(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (within90LonDegrees(lon, minLon, maxLon) &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /**\n   * Compute the relation between the provided box and distance query.\n   * This only works for boxes that do not cross the dateline.\n   */\n  public static PointValues.Relation relate(\n      double minLat, double maxLat, double minLon, double maxLon,\n      double lat, double lon, double distanceSortKey, double axisLat) {\n\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"Box crosses the dateline\");\n    }\n\n    if ((lon < minLon || lon > maxLon) && (axisLat + Rectangle.AXISLAT_ERROR < minLat || axisLat - Rectangle.AXISLAT_ERROR > maxLat)) {\n      // circle not fully inside / crossing axis\n      if (SloppyMath.haversinSortKey(lat, lon, minLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) > distanceSortKey &&\n          SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) > distanceSortKey) {\n        // no points inside\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n\n    if (maxLon - lon < 90 && lon - minLon < 90 &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, minLat, maxLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, minLon) <= distanceSortKey &&\n        SloppyMath.haversinSortKey(lat, lon, maxLat, maxLon) <= distanceSortKey) {\n      // we are fully enclosed, collect everything within this subtree\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["598b5d23aa7c9732bf473c21a9cd309c44599394","69757d80e0dd57592117406dd1b9620762647f1c"],"69757d80e0dd57592117406dd1b9620762647f1c":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69757d80e0dd57592117406dd1b9620762647f1c"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"69757d80e0dd57592117406dd1b9620762647f1c":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","69757d80e0dd57592117406dd1b9620762647f1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}