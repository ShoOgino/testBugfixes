{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(BytesRef,int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":2,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(BytesRef packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(BytesRef,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void append(BytesRef packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}