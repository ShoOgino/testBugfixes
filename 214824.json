{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new InitializationException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new InitializationException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new InitializationException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles[] = dictionaryArg.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaryArg + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new IllegalArgumentException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new IllegalArgumentException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new Dictionary(affix, dictionaries, ignoreCase);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles[] = dictionaryArg.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaryArg + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new Dictionary(affix, dictionaries, ignoreCase);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles[] = dictionaryArg.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaryArg + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":["a327ae471e79ed4301c7f8cad83f53eb246160e8","57da959ec15bb701bd1d1bf3c613b69009ff4bfd","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<>();\n\n    try {\n      dictionaries = new ArrayList<>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new Dictionary(affix, dictionaries, ignoreCase);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new Dictionary(affix, dictionaries, ignoreCase);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<>();\n\n    try {\n      dictionaries = new ArrayList<>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      Path tempPath = Files.createTempDirectory(Dictionary.getDefaultTempDir(), \"Hunspell\");\n      try (Directory tempDir = FSDirectory.open(tempPath)) {\n        this.dictionary = new Dictionary(tempDir, \"hunspell\", affix, dictionaries, ignoreCase);\n      } finally {\n        IOUtils.rm(tempPath); \n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dicts[] = dictionaryFiles.split(\",\");\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<>();\n\n    try {\n      dictionaries = new ArrayList<>();\n      for (String file : dicts) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new Dictionary(affix, dictionaries, ignoreCase);\n    } catch (ParseException e) {\n      throw new IOException(\"Unable to load hunspell data! [dictionary=\" + dictionaries + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f6f80818731469e00f54165ec94aae2db868ea05","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["3241e06e642196396b80bb293acd9c0814d079e0"],"7530de27b87b961b51f01bd1299b7004d46e8823":["f6f80818731469e00f54165ec94aae2db868ea05"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}