{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","sourceNew":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","sourceOld":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","sourceNew":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","sourceOld":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","sourceNew":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","sourceOld":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","sourceNew":"  public void clearIndexWithReplication() throws Exception {\n    if (numFound(query(\"*:*\", masterClient)) != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync & verify\n      assertEquals(0, numFound(rQuery(0, \"*:*\", slaveClient)));\n    }\n  }\n\n","sourceOld":"  public void clearIndexWithReplication() throws Exception {\n    NamedList res = query(\"*:*\", masterClient);\n    SolrDocumentList docs = (SolrDocumentList)res.get(\"response\");\n    if (docs.getNumFound() != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync\n      res = rQuery(0, \"*:*\", slaveClient);\n      assertEquals(0, ((SolrDocumentList) res.get(\"response\")).getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#clearIndexWithReplication().mjava","sourceNew":"  public void clearIndexWithReplication() throws Exception {\n    if (numFound(query(\"*:*\", leaderClient)) != 0) {\n      leaderClient.deleteByQuery(\"*:*\");\n      leaderClient.commit();\n      // wait for replication to sync & verify\n      assertEquals(0, numFound(rQuery(0, \"*:*\", followerClient)));\n    }\n  }\n\n","sourceOld":"  public void clearIndexWithReplication() throws Exception {\n    if (numFound(query(\"*:*\", masterClient)) != 0) {\n      masterClient.deleteByQuery(\"*:*\");\n      masterClient.commit();\n      // wait for replication to sync & verify\n      assertEquals(0, numFound(rQuery(0, \"*:*\", slaveClient)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}