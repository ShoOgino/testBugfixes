{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","commits":[{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skipBytes(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"]},"commit2Childs":{"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}