{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"1b51bf16b2321204d381cc1154f0c975f5e8b9a2","date":1491806707,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String policyName = op.getStr(\"name\");\n\n    if (policyName == null || policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n    }\n\n    Set<String> keys = op.getDataMap().keySet();\n    boolean isValid = false;\n    for (String key : keys) {\n      if (key.equals(\"conditions\") || key.equals(\"preferences\")) isValid = true;\n      else if(!key.equals(\"name\")){\n        isValid = false;\n        break;\n      }\n    }\n    if (!isValid) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No conditions or peferences are specified for the policy \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy: policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String policyName = op.getStr(\"name\");\n\n    if (policyName == null || policyName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n    }\n\n    Set<String> keys = op.getDataMap().keySet();\n    boolean isValid = false;\n    for (String key : keys) {\n      if (key.equals(\"conditions\") || key.equals(\"preferences\")) isValid = true;\n      else if(!key.equals(\"name\")){\n        isValid = false;\n        break;\n      }\n    }\n    if (!isValid) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No conditions or peferences are specified for the policy \" + policyName);\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), policyName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d913bcce36d9d659d239969d07e20d245a5690d9","date":1496064789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy: policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy: policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy: policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  public void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  public void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n      }\n    }\n    checkErr(op);\n\n    try {\n      zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n    } catch (Exception e) {\n      log.warn(\"error persisting policies\", e);\n      op.addError(e.getMessage());\n      checkErr(op);\n    }\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n\n    zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n      }\n    }\n    checkErr(op);\n\n    try {\n      zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n    } catch (Exception e) {\n      log.warn(\"error persisting policies\", e);\n      op.addError(e.getMessage());\n      checkErr(op);\n    }\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  private void handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policies = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policies.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n      }\n    }\n    checkErr(op);\n\n    try {\n      zkSetPolicies(container.getZkController().getZkStateReader(), null, policies);\n    } catch (Exception e) {\n      log.warn(\"error persisting policies\", e);\n      op.addError(e.getMessage());\n      checkErr(op);\n    }\n\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["afde616cab4149eba221511fd7ff21d460cded7c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"d913bcce36d9d659d239969d07e20d245a5690d9":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"afde616cab4149eba221511fd7ff21d460cded7c":["28288370235ed02234a64753cdbf0c6ec096304a"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d913bcce36d9d659d239969d07e20d245a5690d9","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["afde616cab4149eba221511fd7ff21d460cded7c","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"d913bcce36d9d659d239969d07e20d245a5690d9":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["d913bcce36d9d659d239969d07e20d245a5690d9"],"afde616cab4149eba221511fd7ff21d460cded7c":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"28288370235ed02234a64753cdbf0c6ec096304a":["afde616cab4149eba221511fd7ff21d460cded7c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}