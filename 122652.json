{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","commits":[{"id":"f086342d88c71c53801570c03106eee911e995d2","date":1162597451,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result><result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"id=2\") < resp.indexOf(\"id=1\") );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f","date":1163033034,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"id=2\") < resp.indexOf(\"id=1\") );\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result><result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"id=2\") < resp.indexOf(\"id=1\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"\\\"2\\\"\") < resp.indexOf(\"\\\"1\\\"\") );\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"id=2\") < resp.indexOf(\"id=1\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"\\\"2\\\"\") < resp.indexOf(\"\\\"1\\\"\") );\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    String res = h.update(\"<add>\" + \"<doc><field name=\\\"id\\\">1</field>\"+\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"<doc boost=\\\"2.0\\\"><field name=\\\"id\\\">2</field>\" +\n                                          \"<field name=\\\"text\\\">hello</field></doc>\" + \n                          \"</add>\");\n\n    assertEquals(\"<result status=\\\"0\\\"></result>\", res);\n    assertU(\"<commit/>\");\n    assertQ(req(\"text:hello\")\n            ,\"//*[@numFound='2']\"\n            );\n    String resp = h.query(lrf.makeRequest(\"q\", \"text:hello\", \"debugQuery\", \"true\"));\n    //System.out.println(resp);\n    // second doc ranked first\n    assertTrue( resp.indexOf(\"\\\"2\\\"\") < resp.indexOf(\"\\\"1\\\"\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f086342d88c71c53801570c03106eee911e995d2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f":["f086342d88c71c53801570c03106eee911e995d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["4c065faf385411ac4ff02bdc763de7dfd8aa1c9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f086342d88c71c53801570c03106eee911e995d2":["4c065faf385411ac4ff02bdc763de7dfd8aa1c9f"],"4c065faf385411ac4ff02bdc763de7dfd8aa1c9f":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f086342d88c71c53801570c03106eee911e995d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}