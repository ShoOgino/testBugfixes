{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        FixedIntBlockIndexOutput ret = new FixedIntBlockIndexOutput(out, blockSize) {\n          @Override\n          protected void flushBlock() throws IOException {\n            for(int i=0;i<buffer.length;i++) {\n              assert buffer[i] >= 0;\n              out.writeVInt(buffer[i]);\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        FixedIntBlockIndexOutput ret = new FixedIntBlockIndexOutput(out, blockSize) {\n          @Override\n          protected void flushBlock() throws IOException {\n            for(int i=0;i<buffer.length;i++) {\n              assert buffer[i] >= 0;\n              out.writeVInt(buffer[i]);\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        FixedIntBlockIndexOutput ret = new FixedIntBlockIndexOutput(out, blockSize) {\n          @Override\n          protected void flushBlock() throws IOException {\n            for(int i=0;i<buffer.length;i++) {\n              assert buffer[i] >= 0;\n              out.writeVInt(buffer[i]);\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        FixedIntBlockIndexOutput ret = new FixedIntBlockIndexOutput(out, blockSize) {\n          @Override\n          protected void flushBlock() throws IOException {\n            for(int i=0;i<buffer.length;i++) {\n              assert buffer[i] >= 0;\n              out.writeVInt(buffer[i]);\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}