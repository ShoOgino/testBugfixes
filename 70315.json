{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBiggishAutomaton().mjava","commits":[{"id":"6ee7a8d1573e79dfd9b266a7f5bea709005a6932","date":1415394607,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBiggishAutomaton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHugeAutomaton().mjava","sourceNew":"  public void testBiggishAutomaton() {\n    List<BytesRef> terms = new ArrayList<>();\n    while (terms.size() < 3000) {\n      terms.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n    Collections.sort(terms);\n    new AutomatonQuery(new Term(\"foo\", \"bar\"), Automata.makeStringUnion(terms), Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  public void testHugeAutomaton() {\n    List<BytesRef> terms = new ArrayList<>();\n    while (terms.size() < 10000) {\n      terms.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n    Collections.sort(terms);\n    new AutomatonQuery(new Term(\"foo\", \"bar\"), Automata.makeStringUnion(terms), Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBiggishAutomaton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testBiggishAutomaton().mjava","sourceNew":"  public void testBiggishAutomaton() {\n    int numTerms = TEST_NIGHTLY ? 3000 : 500;\n    List<BytesRef> terms = new ArrayList<>();\n    while (terms.size() < numTerms) {\n      terms.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n    Collections.sort(terms);\n    new AutomatonQuery(new Term(\"foo\", \"bar\"), Automata.makeStringUnion(terms), Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  public void testBiggishAutomaton() {\n    List<BytesRef> terms = new ArrayList<>();\n    while (terms.size() < 3000) {\n      terms.add(new BytesRef(TestUtil.randomUnicodeString(random())));\n    }\n    Collections.sort(terms);\n    new AutomatonQuery(new Term(\"foo\", \"bar\"), Automata.makeStringUnion(terms), Integer.MAX_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ee7a8d1573e79dfd9b266a7f5bea709005a6932":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["6ee7a8d1573e79dfd9b266a7f5bea709005a6932"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ee7a8d1573e79dfd9b266a7f5bea709005a6932"],"6ee7a8d1573e79dfd9b266a7f5bea709005a6932":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}