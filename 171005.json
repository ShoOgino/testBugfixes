{"path":"lucene/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockRAMDirectory,boolean).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockRAMDirectory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#initIndex(MockRAMDirectory,boolean).mjava","sourceNew":"  private IndexWriter initIndex(Random random, MockRAMDirectory dir, boolean initialCommit) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", \"0\", Field.Store.YES, Field.Index.ANALYZED));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","sourceOld":"  private IndexWriter initIndex(MockRAMDirectory dir, boolean initialCommit) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", \"0\", Field.Store.YES, Field.Index.ANALYZED));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockDirectoryWrapper,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#initIndex(Random,MockRAMDirectory,boolean).mjava","sourceNew":"  private IndexWriter initIndex(Random random, MockDirectoryWrapper dir, boolean initialCommit) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", \"0\", Field.Store.YES, Field.Index.ANALYZED));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","sourceOld":"  private IndexWriter initIndex(Random random, MockRAMDirectory dir, boolean initialCommit) throws IOException {\n    dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    if (initialCommit) {\n      writer.commit();\n    }\n    \n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", \"0\", Field.Store.YES, Field.Index.ANALYZED));\n    for(int i=0;i<157;i++)\n      writer.addDocument(doc);\n\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a05409176bd65129d67a785ee70e881e238a9aef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}