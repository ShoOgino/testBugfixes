{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery t = new BooleanQuery();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch);\n      query = t;\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery t = new BooleanQuery();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch);\n      query = t;\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch);\n      query = t.build();\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery t = new BooleanQuery();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch);\n      query = t;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ca415055c1401a2359adfb8f5d3fbf3887f95d7","date":1438554679,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = t.build();\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch);\n      query = t.build();\n    }\n    return query;\n  }\n\n","bugFix":["c7e79e31f55cbb444e3023d430a340658755aa31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = QueryUtils.build(t, this);\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = t.build();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = QueryUtils.build(t, this);\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = t.build();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#parseEscapedQuery(ExtendedSolrQueryParser,String,ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = QueryUtils.build(t, this);\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Parses an escaped version of the user's query.  This method is called \n   * in the event that the original query encounters exceptions during parsing.\n   *\n   * @param up parser used\n   * @param escapedUserQuery query that is parsed, should already be escaped so that no trivial parse errors are encountered\n   * @param config Configuration options for this parse request\n   * @return the resulting query (flattened if needed) with \"min should match\" rules applied as specified in the config.\n   * @see #parseOriginalQuery\n   * @see SolrPluginUtils#flattenBooleanQuery\n   */\n  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,\n      String escapedUserQuery, ExtendedDismaxConfiguration config) throws SyntaxError {\n    Query query = up.parse(escapedUserQuery);\n    \n    if (query instanceof BooleanQuery) {\n      BooleanQuery.Builder t = new BooleanQuery.Builder();\n      SolrPluginUtils.flattenBooleanQuery(t, (BooleanQuery)query);\n      SolrPluginUtils.setMinShouldMatch(t, config.minShouldMatch, config.mmAutoRelax);\n      query = t.build();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c7e79e31f55cbb444e3023d430a340658755aa31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7","39fdbc59d893f5a211736e861fe145798a40b9ff"],"28288370235ed02234a64753cdbf0c6ec096304a":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7","39fdbc59d893f5a211736e861fe145798a40b9ff"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3ca415055c1401a2359adfb8f5d3fbf3887f95d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c7e79e31f55cbb444e3023d430a340658755aa31":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"3ca415055c1401a2359adfb8f5d3fbf3887f95d7":["39fdbc59d893f5a211736e861fe145798a40b9ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}