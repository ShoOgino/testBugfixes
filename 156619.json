{"path":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContextFactory#initCalculator().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContextFactory#initCalculator().mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/context/SpatialContextFactory#initCalculator().mjava","sourceNew":"  protected void initCalculator() {\n    String calcStr = args.get(\"distCalculator\");\n    if (calcStr == null)\n      return;\n    if (calcStr.equalsIgnoreCase(\"haversine\")) {\n      calculator = new GeodesicSphereDistCalc.Haversine(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"lawOfCosines\")) {\n      calculator = new GeodesicSphereDistCalc.LawOfCosines(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"vincentySphere\")) {\n      calculator = new GeodesicSphereDistCalc.Vincenty(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"cartesian\")) {\n      calculator = new CartesianDistCalc();\n    } else if (calcStr.equalsIgnoreCase(\"cartesian^2\")) {\n      calculator = new CartesianDistCalc(true);\n    } else {\n      throw new RuntimeException(\"Unknown calculator: \"+calcStr);\n    }\n  }\n\n","sourceOld":"  protected void initCalculator() {\n    String calcStr = args.get(\"distCalculator\");\n    if (calcStr == null)\n      return;\n    if (calcStr.equalsIgnoreCase(\"haversine\")) {\n      calculator = new GeodesicSphereDistCalc.Haversine(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"lawOfCosines\")) {\n      calculator = new GeodesicSphereDistCalc.LawOfCosines(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"vincentySphere\")) {\n      calculator = new GeodesicSphereDistCalc.Vincenty(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"cartesian\")) {\n      calculator = new CartesianDistCalc();\n    } else if (calcStr.equalsIgnoreCase(\"cartesian^2\")) {\n      calculator = new CartesianDistCalc(true);\n    } else {\n      throw new RuntimeException(\"Unknown calculator: \"+calcStr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/context/SpatialContextFactory#initCalculator().mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContextFactory#initCalculator().mjava","sourceNew":"  protected void initCalculator() {\n    String calcStr = args.get(\"distCalculator\");\n    if (calcStr == null)\n      return;\n    if (calcStr.equalsIgnoreCase(\"haversine\")) {\n      calculator = new GeodesicSphereDistCalc.Haversine(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"lawOfCosines\")) {\n      calculator = new GeodesicSphereDistCalc.LawOfCosines(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"vincentySphere\")) {\n      calculator = new GeodesicSphereDistCalc.Vincenty(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"cartesian\")) {\n      calculator = new CartesianDistCalc();\n    } else if (calcStr.equalsIgnoreCase(\"cartesian^2\")) {\n      calculator = new CartesianDistCalc(true);\n    } else {\n      throw new RuntimeException(\"Unknown calculator: \"+calcStr);\n    }\n  }\n\n","sourceOld":"  protected void initCalculator() {\n    String calcStr = args.get(\"distCalculator\");\n    if (calcStr == null)\n      return;\n    if (calcStr.equalsIgnoreCase(\"haversine\")) {\n      calculator = new GeodesicSphereDistCalc.Haversine(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"lawOfCosines\")) {\n      calculator = new GeodesicSphereDistCalc.LawOfCosines(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"vincentySphere\")) {\n      calculator = new GeodesicSphereDistCalc.Vincenty(units.earthRadius());\n    } else if (calcStr.equalsIgnoreCase(\"cartesian\")) {\n      calculator = new CartesianDistCalc();\n    } else if (calcStr.equalsIgnoreCase(\"cartesian^2\")) {\n      calculator = new CartesianDistCalc(true);\n    } else {\n      throw new RuntimeException(\"Unknown calculator: \"+calcStr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}