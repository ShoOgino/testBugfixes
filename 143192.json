{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","sourceNew":"\tpublic void testFastFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setProcessingMode(DuplicateFilter.PM_FAST_INVALIDATION);\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t\tassertEquals(\"Two urls found\",2, results.size());\n\t}\t\n\n","sourceOld":"\tpublic void testFastFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setProcessingMode(DuplicateFilter.PM_FAST_INVALIDATION);\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t\tassertEquals(\"Two urls found\",2, results.size());\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","sourceNew":"  public void testFastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setProcessingMode(DuplicateFilter.ProcessingMode.PM_FAST_INVALIDATION);\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      assertFalse(\"No duplicate urls should be returned\", results.contains(url));\n      results.add(url);\n    }\n    assertEquals(\"Two urls found\", 2, results.size());\n  }\n\n","sourceOld":"\tpublic void testFastFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\n\t\tdf.setProcessingMode(DuplicateFilter.PM_FAST_INVALIDATION);\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tassertTrue(\"Filtered searching should have found some matches\",hits.length>0);\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t\tassertEquals(\"Two urls found\",2, results.size());\n\t}\t\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testFastFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testFastFilter().mjava","sourceNew":"  public void testFastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setProcessingMode(DuplicateFilter.ProcessingMode.PM_FAST_INVALIDATION);\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      assertFalse(\"No duplicate urls should be returned\", results.contains(url));\n      results.add(url);\n    }\n    assertEquals(\"Two urls found\", 2, results.size());\n  }\n\n","sourceOld":"  public void testFastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setProcessingMode(DuplicateFilter.ProcessingMode.PM_FAST_INVALIDATION);\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      assertFalse(\"No duplicate urls should be returned\", results.contains(url));\n      results.add(url);\n    }\n    assertEquals(\"Two urls found\", 2, results.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}