{"path":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","commits":[{"id":"4e535d313239c42be7df343d2ad892dda58778b5","date":1423213559,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"/dev/null","sourceNew":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd","99e4f8ef2ad8c83b92d86b8a297e9d9224db5055"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99e4f8ef2ad8c83b92d86b8a297e9d9224db5055","date":1455841673,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":["4e535d313239c42be7df343d2ad892dda58778b5"],"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fbf45fdc4c578b71b38d70a03617829161f4bd","date":1471870345,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":["4e535d313239c42be7df343d2ad892dda58778b5","99e4f8ef2ad8c83b92d86b8a297e9d9224db5055"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&wt=json&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fb8cae56bd31a827317dd604b1169743f9475f2","date":1571413113,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#testReqParams().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        @SuppressWarnings({\"rawtypes\"})\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(COLL_NAME);\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump0', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    AbstractFullDistribZkTestBase.waitForRecoveriesToFinish(COLL_NAME, cloudClient.getZkStateReader(), false, true, 90);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump0\", \"name\"),\n        \"/dump0\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList(\"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump0?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"a\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, \"A val\", asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\"), asList(\"params\", \"d\"));\n    compareValues(result, \"20\", asList(\"params\", \"i\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/requestHandler?componentName=/dump1&expandParams=true&useParams=y&c=CC\",\n        cloudClient,\n        asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"B val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"x\", \"b\"));\n    compareValues(result, \"CY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"c\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_useParamsExpanded_\",\"y\", \"b\"));\n    compareValues(result, \"A val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"a\"));\n    compareValues(result, \"BY val\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"b\"));\n    compareValues(result, \"CC\", asList(\"config\", \"requestHandler\",\"/dump1\",\"_effectiveParams_\", \"c\"));\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n    compareValues(result, 2l, asList(\"response\", \"params\", \"y\", \"\",\"v\"));\n    compareValues(result, 0l, asList(\"response\", \"params\", \"x\", \"\",\"v\"));\n\n    payload = \"{update :{x : {_appends_ :{ add : 'first' },  _invariants_ : {fixed: f }}}}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"_appends_\", \"add\"),\n        \"first\",\n        10);\n    compareValues(result, \"f\", asList(\"response\", \"params\", \"x\", \"_invariants_\", \"fixed\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?fixed=changeit&add=second\",\n        cloudClient,\n        asList(\"params\", \"fixed\"),\n        \"f\",\n        5);\n    compareValues(result, new Predicate() {\n      @Override\n      public boolean test(Object o) {\n        List l = (List) o;\n        return l.contains(\"first\") && l.contains(\"second\");\n      }\n    }, asList(\"params\", \"add\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["b5991832ae4bac45cecfff0fc33125aeac823d3d","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"99e4f8ef2ad8c83b92d86b8a297e9d9224db5055":["4e535d313239c42be7df343d2ad892dda58778b5"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b5991832ae4bac45cecfff0fc33125aeac823d3d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e98520789adb1d5ad05afb4956eca0944a929688":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a52341299179de5479672f7cf518bf4b173f34b3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","5e8661269ebb23269662a2826882f11611e91d5a"],"5e8661269ebb23269662a2826882f11611e91d5a":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a5296efc4b319f5647b606629c093a94b23692c6":["99e4f8ef2ad8c83b92d86b8a297e9d9224db5055","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"4e535d313239c42be7df343d2ad892dda58778b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["99e4f8ef2ad8c83b92d86b8a297e9d9224db5055"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["b5991832ae4bac45cecfff0fc33125aeac823d3d","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"99e4f8ef2ad8c83b92d86b8a297e9d9224db5055":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a52341299179de5479672f7cf518bf4b173f34b3":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["e98520789adb1d5ad05afb4956eca0944a929688"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e535d313239c42be7df343d2ad892dda58778b5"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"4e535d313239c42be7df343d2ad892dda58778b5":["99e4f8ef2ad8c83b92d86b8a297e9d9224db5055"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["0c82557b0a8c9d4012f208e5de912ae7500ea351","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60fbf45fdc4c578b71b38d70a03617829161f4bd","a5296efc4b319f5647b606629c093a94b23692c6","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5e8661269ebb23269662a2826882f11611e91d5a"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}