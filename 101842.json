{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","commits":[{"id":"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","date":1383508626,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2))));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, true));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, fc));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (0)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","sourceNew":"  @Test\n  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\", Integer.toString(i % 2))));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumValueSourceFacetRequest(new FacetLabel(\"a\"), 10, valueSource, true));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, fc));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (0)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2))));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, true));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, fc));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (0)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector(true);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, sfc));\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, valueSource);\n    \n    assertEquals(\"a (10.0)\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n    \n    IOUtils.close(taxoWriter, iw, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\", Integer.toString(i % 2))));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumValueSourceFacetRequest(new FacetLabel(\"a\"), 10, valueSource, true));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, fc));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (0)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testWithScore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetFields facetFields = new FacetFields(taxonomyWriter);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2))));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetSearchParams fsp = new FacetSearchParams(new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, true));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    newSearcher(r).search(q, MultiCollector.wrap(tsdc, fc));\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (0)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"]},"commit2Childs":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}