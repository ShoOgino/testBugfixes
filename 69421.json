{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      left.setBoost(getBoost());\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      right.setBoost(getBoost());\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      left.setBoost(getBoost());\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      right.setBoost(getBoost());\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9728ca0faccd3911062a9fe38f19e8114f8f352","date":1448313837,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    // short-circuit to match all if specifying the whole map\n    if (minLon == GeoUtils.MIN_LON_INCL && maxLon == GeoUtils.MAX_LON_INCL\n        && minLat == GeoUtils.MIN_LAT_INCL && maxLat == GeoUtils.MAX_LAT_INCL) {\n      // FieldValueQuery is valid since DocValues are *required* for GeoPointField\n      return new FieldValueQuery(field);\n    }\n\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    // short-circuit to match all if specifying the whole map\n    if (minLon == GeoUtils.MIN_LON_INCL && maxLon == GeoUtils.MAX_LON_INCL\n        && minLat == GeoUtils.MIN_LAT_INCL && maxLat == GeoUtils.MAX_LAT_INCL) {\n      // FieldValueQuery is valid since DocValues are *required* for GeoPointField\n      return new FieldValueQuery(field);\n    }\n\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    // short-circuit to match all if specifying the whole map\n    if (minLon == GeoUtils.MIN_LON_INCL && maxLon == GeoUtils.MAX_LON_INCL\n        && minLat == GeoUtils.MIN_LAT_INCL && maxLat == GeoUtils.MAX_LAT_INCL) {\n      // FieldValueQuery is valid since DocValues are *required* for GeoPointField\n      return new FieldValueQuery(field);\n    }\n\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInBBoxQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    // short-circuit to match all if specifying the whole map\n    if (minLon == GeoUtils.MIN_LON_INCL && maxLon == GeoUtils.MAX_LON_INCL\n        && minLat == GeoUtils.MIN_LAT_INCL && maxLat == GeoUtils.MAX_LAT_INCL) {\n      // FieldValueQuery is valid since DocValues are *required* for GeoPointField\n      return new FieldValueQuery(field);\n    }\n\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, termEncoding, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, termEncoding, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, termEncoding, minLon, minLat, maxLon, maxLat);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    // short-circuit to match all if specifying the whole map\n    if (minLon == GeoUtils.MIN_LON_INCL && maxLon == GeoUtils.MAX_LON_INCL\n        && minLat == GeoUtils.MIN_LAT_INCL && maxLat == GeoUtils.MAX_LAT_INCL) {\n      // FieldValueQuery is valid since DocValues are *required* for GeoPointField\n      return new FieldValueQuery(field);\n    }\n\n    if (maxLon < minLon) {\n      BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n\n      GeoPointInBBoxQueryImpl left = new GeoPointInBBoxQueryImpl(field, -180.0D, minLat, maxLon, maxLat);\n      bqb.add(new BooleanClause(left, BooleanClause.Occur.SHOULD));\n      GeoPointInBBoxQueryImpl right = new GeoPointInBBoxQueryImpl(field, minLon, minLat, 180.0D, maxLat);\n      bqb.add(new BooleanClause(right, BooleanClause.Occur.SHOULD));\n      return bqb.build();\n    }\n    return new GeoPointInBBoxQueryImpl(field, minLon, minLat, maxLon, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9728ca0faccd3911062a9fe38f19e8114f8f352":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f9728ca0faccd3911062a9fe38f19e8114f8f352","937923083e4d137932336fc80f3d78758ff698a6"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"937923083e4d137932336fc80f3d78758ff698a6":["f9728ca0faccd3911062a9fe38f19e8114f8f352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"f9728ca0faccd3911062a9fe38f19e8114f8f352":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f9728ca0faccd3911062a9fe38f19e8114f8f352"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}