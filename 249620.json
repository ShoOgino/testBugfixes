{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> request(SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n        return processErrorsAndResponse(response, parser, is, getEncoding(response), isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getMediaType(), getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n\n        ContentType contentType = getContentType(response);\n        String mimeType = null;\n        String encoding = null;\n        if (contentType != null) {\n          mimeType = contentType.getMimeType();\n          encoding = contentType.getCharset() != null? contentType.getCharset().name() : null;\n        }\n        return processErrorsAndResponse(response, parser, is, mimeType, encoding, isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n        return processErrorsAndResponse(response, parser, is, getEncoding(response), isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","sourceNew":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getMediaType(), getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n\n        ContentType contentType = getContentType(response);\n        String mimeType = null;\n        String encoding = null;\n        if (contentType != null) {\n          mimeType = contentType.getMimeType();\n          encoding = contentType.getCharset() != null? contentType.getCharset().name() : null;\n        }\n        return processErrorsAndResponse(response, parser, is, mimeType, encoding, isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getMediaType(), getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n\n        ContentType contentType = getContentType(response);\n        String mimeType = null;\n        String encoding = null;\n        if (contentType != null) {\n          mimeType = contentType.getMimeType();\n          encoding = contentType.getCharset() != null? contentType.getCharset().name() : null;\n        }\n        return processErrorsAndResponse(response, parser, is, mimeType, encoding, isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#request(SolrRequest,String,OnComplete).mjava","sourceNew":null,"sourceOld":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest,\n                                      String collection,\n                                      OnComplete onComplete) throws IOException, SolrServerException {\n    Request req = makeRequest(solrRequest, collection);\n    final ResponseParser parser = solrRequest.getResponseParser() == null\n        ? this.parser: solrRequest.getResponseParser();\n\n    if (onComplete != null) {\n      // This async call only suitable for indexing since the response size is limited by 5MB\n      req.onRequestQueued(asyncTracker.queuedListener)\n          .onComplete(asyncTracker.completeListener).send(new BufferingResponseListener(5 * 1024 * 1024) {\n\n        @Override\n        public void onComplete(Result result) {\n          if (result.isFailed()) {\n            onComplete.onFailure(result.getFailure());\n            return;\n          }\n\n          NamedList<Object> rsp;\n          try {\n            InputStream is = getContentAsInputStream();\n            assert ObjectReleaseTracker.track(is);\n            rsp = processErrorsAndResponse(result.getResponse(),\n                parser, is, getMediaType(), getEncoding(), isV2ApiRequest(solrRequest));\n            onComplete.onSuccess(rsp);\n          } catch (Exception e) {\n            onComplete.onFailure(e);\n          }\n        }\n      });\n      return null;\n    } else {\n      try {\n        InputStreamResponseListener listener = new InputStreamResponseListener();\n        req.send(listener);\n        Response response = listener.get(idleTimeout, TimeUnit.MILLISECONDS);\n        InputStream is = listener.getInputStream();\n        assert ObjectReleaseTracker.track(is);\n\n        ContentType contentType = getContentType(response);\n        String mimeType = null;\n        String encoding = null;\n        if (contentType != null) {\n          mimeType = contentType.getMimeType();\n          encoding = contentType.getCharset() != null? contentType.getCharset().name() : null;\n        }\n        return processErrorsAndResponse(response, parser, is, mimeType, encoding, isV2ApiRequest(solrRequest));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      } catch (TimeoutException e) {\n        throw new SolrServerException(\n            \"Timeout occured while waiting response from server at: \" + req.getURI(), e);\n      } catch (ExecutionException e) {\n        Throwable cause = e.getCause();\n        if (cause instanceof ConnectException) {\n          throw new SolrServerException(\"Server refused connection at: \" + req.getURI(), cause);\n        }\n        if (cause instanceof SolrServerException) {\n          throw (SolrServerException) cause;\n        } else if (cause instanceof IOException) {\n          throw new SolrServerException(\n              \"IOException occured when talking to server at: \" + getBaseURL(), cause);\n        }\n        throw new SolrServerException(cause.getMessage(), cause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}