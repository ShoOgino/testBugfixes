{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, true, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    log.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    log.info(\"Starting download of configuration files from master: {}\", confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    log.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    log.info(\"Starting download of configuration files from leader: {}\", confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n    log.info(\"Starting download of configuration files from master: {}\", confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpconfDir, file, saveAs, CONF_FILE_SHORT, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}