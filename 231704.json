{"path":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","commits":[{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\");\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\");\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\");\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ed124d21605b0e41f648c25f80f60ba1828e78a","date":1477056513,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","sourceNew":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\", 0);\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","sourceOld":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\");\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.TextLogisticRegressionQParser#parse().mjava","sourceNew":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\", 0);\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","sourceOld":"    public Query parse() {\n\n      String fs = params.get(\"feature\");\n      String[] terms = params.get(\"terms\").split(\",\");\n      String ws = params.get(\"weights\");\n      String dfsStr = params.get(\"idfs\");\n      int iteration = params.getInt(\"iteration\");\n      String outcome = params.get(\"outcome\");\n      int positiveLabel = params.getInt(\"positiveLabel\", 1);\n      double threshold = params.getDouble(\"threshold\", 0.5);\n      double alpha = params.getDouble(\"alpha\", 0.01);\n\n      double[] idfs = new double[terms.length];\n      String[] idfsArr = dfsStr.split(\",\");\n      for (int i = 0; i < idfsArr.length; i++) {\n        idfs[i] = Double.parseDouble(idfsArr[i]);\n      }\n\n      double[] weights = new double[terms.length+1];\n\n      if(ws != null) {\n        String[] wa = ws.split(\",\");\n        for (int i = 0; i < wa.length; i++) {\n          weights[i] = Double.parseDouble(wa[i]);\n        }\n      } else {\n        for(int i=0; i<weights.length; i++) {\n          weights[i]= 1.0d;\n        }\n      }\n\n      TrainingParams input = new TrainingParams(fs, terms, idfs, outcome, weights, iteration, alpha, positiveLabel, threshold);\n\n      return new TextLogisticRegressionQuery(input);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ed124d21605b0e41f648c25f80f60ba1828e78a":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8ed124d21605b0e41f648c25f80f60ba1828e78a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ed124d21605b0e41f648c25f80f60ba1828e78a"]},"commit2Childs":{"8ed124d21605b0e41f648c25f80f60ba1828e78a":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["8ed124d21605b0e41f648c25f80f60ba1828e78a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}