{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6","date":1346421325,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        assert false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#writeField(FieldInfo,IndexableField).mjava","sourceNew":"  public void writeField(FieldInfo info, StorableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  public void writeField(FieldInfo info, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(info.number);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits |= FIELD_IS_NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits |= FIELD_IS_NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits |= FIELD_IS_NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits |= FIELD_IS_NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        fieldsStream.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        fieldsStream.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a92d88a85748af0cb6a68706f8ac3ba6bd686fa6","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"],"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","a92d88a85748af0cb6a68706f8ac3ba6bd686fa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a92d88a85748af0cb6a68706f8ac3ba6bd686fa6":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}