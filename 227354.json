{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    // reset the update log before copying the new tlog directory, it will be reinitialized\n    // during the core reload\n    ((CdcrUpdateLog) ulog).reset();\n    // try to move the temp tlog files to the tlog directory\n    if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1","date":1448389841,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","sourceNew":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      LOG.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    // reset the update log before copying the new tlog directory, it will be reinitialized\n    // during the core reload\n    ((CdcrUpdateLog) ulog).reset();\n    // try to move the temp tlog files to the tlog directory\n    if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfa6bab72dc1ef7209657e6685f9204e2e49bac8","date":1448391014,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","sourceNew":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    // reset the update log before copying the new tlog directory, it will be reinitialized\n    // during the core reload\n    ((CdcrUpdateLog) ulog).reset();\n    // try to move the temp tlog files to the tlog directory\n    if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      LOG.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cae179618908dcb534af567cdf3019505ada6c","date":1449365361,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","sourceNew":"  /**\n   * <p>\n   *   Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   *   the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   *   if the copy fails.\n   * </p>\n   * <p>\n   *   This assumes that the tlog files transferred from the leader are in synch with the\n   *   index files transferred from the leader. The reset of the update log relies on the version\n   *   of the latest operations found in the tlog files. If the tlogs are ahead of the latest commit\n   *   point, it will not copy all the needed buffered updates for the replay and it will miss\n   *   some operations.\n   * </p>\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      LOG.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   * the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   * if the copy fails.\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    // reset the update log before copying the new tlog directory, it will be reinitialized\n    // during the core reload\n    ((CdcrUpdateLog) ulog).reset();\n    // try to move the temp tlog files to the tlog directory\n    if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","sourceNew":"  /**\n   * <p>\n   *   Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   *   the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   *   if the copy fails.\n   * </p>\n   * <p>\n   *   This assumes that the tlog files transferred from the leader are in synch with the\n   *   index files transferred from the leader. The reset of the update log relies on the version\n   *   of the latest operations found in the tlog files. If the tlogs are ahead of the latest commit\n   *   point, it will not copy all the needed buffered updates for the replay and it will miss\n   *   some operations.\n   * </p>\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      log.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   *   the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   *   if the copy fails.\n   * </p>\n   * <p>\n   *   This assumes that the tlog files transferred from the leader are in synch with the\n   *   index files transferred from the leader. The reset of the update log relies on the version\n   *   of the latest operations found in the tlog files. If the tlogs are ahead of the latest commit\n   *   point, it will not copy all the needed buffered updates for the replay and it will miss\n   *   some operations.\n   * </p>\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      LOG.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#moveTlogFiles(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   *   Copy all the tlog files from the temp tlog dir to the actual tlog dir, and reset\n   *   the {@link UpdateLog}. The copy will try to preserve the original tlog directory\n   *   if the copy fails.\n   * </p>\n   * <p>\n   *   This assumes that the tlog files transferred from the leader are in synch with the\n   *   index files transferred from the leader. The reset of the update log relies on the version\n   *   of the latest operations found in the tlog files. If the tlogs are ahead of the latest commit\n   *   point, it will not copy all the needed buffered updates for the replay and it will miss\n   *   some operations.\n   * </p>\n   */\n  private boolean moveTlogFiles(File tmpTlogDir) {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    VersionInfo vinfo = ulog.getVersionInfo();\n    vinfo.blockUpdates(); // block updates until the new update log is initialised\n    try {\n      // reset the update log before copying the new tlog directory\n      CdcrUpdateLog.BufferedUpdates bufferedUpdates = ((CdcrUpdateLog) ulog).resetForRecovery();\n      // try to move the temp tlog files to the tlog directory\n      if (!copyTmpTlogFiles2Tlog(tmpTlogDir)) return false;\n      // reinitialise the update log and copy the buffered updates\n      if (bufferedUpdates.tlog != null) {\n        // map file path to its new backup location\n        File parentDir = FileSystems.getDefault().getPath(solrCore.getUpdateHandler().getUpdateLog().getLogDir()).getParent().toFile();\n        File backupTlogDir = new File(parentDir, tmpTlogDir.getName());\n        bufferedUpdates.tlog = new File(backupTlogDir, bufferedUpdates.tlog.getName());\n      }\n      // init the update log with the new set of tlog files, and copy the buffered updates\n      ((CdcrUpdateLog) ulog).initForRecovery(bufferedUpdates.tlog, bufferedUpdates.offset);\n    }\n    catch (Exception e) {\n      log.error(\"Unable to copy tlog files\", e);\n      return false;\n    }\n    finally {\n      vinfo.unblockUpdates();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77cae179618908dcb534af567cdf3019505ada6c":["cfa6bab72dc1ef7209657e6685f9204e2e49bac8"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfa6bab72dc1ef7209657e6685f9204e2e49bac8":["6776c9bdacef00ce712b87d1c8e999ae61c1c6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["77cae179618908dcb534af567cdf3019505ada6c"]},"commit2Childs":{"77cae179618908dcb534af567cdf3019505ada6c":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["6776c9bdacef00ce712b87d1c8e999ae61c1c6a1"],"cfa6bab72dc1ef7209657e6685f9204e2e49bac8":["77cae179618908dcb534af567cdf3019505ada6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1":["cfa6bab72dc1ef7209657e6685f9204e2e49bac8"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}