{"path":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (delay > 0) {\n      log.info(\"Sleeping for {}ms before sending callback\", delay);\n      try {\n        Thread.sleep(delay);\n      } catch (InterruptedException e) {\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    out.flush();\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4212f4601c03a66e0b324597a3bfe0f51b9f5b65","date":1556832376,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","sourceNew":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (delay > 0) {\n      log.info(\"Sleeping for {}ms before sending callback\", delay);\n      try {\n        Thread.sleep(delay);\n      } catch (InterruptedException e) {\n        log.warn(\"audit() interrupted while waiting to send callback, should not happen\");\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    out.flush();\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","sourceOld":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (delay > 0) {\n      log.info(\"Sleeping for {}ms before sending callback\", delay);\n      try {\n        Thread.sleep(delay);\n      } catch (InterruptedException e) {\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    out.flush();\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","sourceNew":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (null != semaphore) {\n      log.info(\"Waiting to acquire ticket from semaphore\");\n      try {\n        semaphore.acquire();\n      } catch (InterruptedException e) {\n        log.warn(\"audit() interrupted while waiting for ticket, probably due to shutdown, aborting\");\n        return;\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    if (! out.checkError()) {\n      log.error(\"Output stream has an ERROR!\");\n    }\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","sourceOld":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (delay > 0) {\n      log.info(\"Sleeping for {}ms before sending callback\", delay);\n      try {\n        Thread.sleep(delay);\n      } catch (InterruptedException e) {\n        log.warn(\"audit() interrupted while waiting to send callback, should not happen\");\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    out.flush();\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/CallbackAuditLoggerPlugin#audit(AuditEvent).mjava","sourceNew":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (null != semaphore) {\n      log.info(\"Waiting to acquire ticket from semaphore\");\n      try {\n        semaphore.acquire();\n      } catch (InterruptedException e) {\n        log.warn(\"audit() interrupted while waiting for ticket, probably due to shutdown, aborting\");\n        return;\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    if (! out.checkError()) {\n      log.error(\"Output stream has an ERROR!\");\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens a socket to send a callback, e.g. to a running test client\n   * @param event the audit event\n   */\n  @Override\n  public void audit(AuditEvent event) {\n    if (null != semaphore) {\n      log.info(\"Waiting to acquire ticket from semaphore\");\n      try {\n        semaphore.acquire();\n      } catch (InterruptedException e) {\n        log.warn(\"audit() interrupted while waiting for ticket, probably due to shutdown, aborting\");\n        return;\n      }\n    }\n    out.write(formatter.formatEvent(event) + \"\\n\");\n    if (! out.checkError()) {\n      log.error(\"Output stream has an ERROR!\");\n    }\n    log.info(\"Sent audit callback {} to localhost:{}\", formatter.formatEvent(event), callbackPort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d5482e225fe64e9f868c423923d1144adc88142":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5d5482e225fe64e9f868c423923d1144adc88142"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"4212f4601c03a66e0b324597a3bfe0f51b9f5b65":["5d5482e225fe64e9f868c423923d1144adc88142"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["4212f4601c03a66e0b324597a3bfe0f51b9f5b65"],"5d5482e225fe64e9f868c423923d1144adc88142":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}