{"path":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","commits":[{"id":"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7","date":1283030744,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseString(String).mjava","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"c26f00b574427b55127e869b935845554afde1fa":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}