{"path":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","commits":[{"id":"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d","date":1461702806,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n        final Fields fields = context.reader().fields();\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n          final Terms terms = fields.terms(term.field());\n          if (terms == null) {\n            // field does not exist\n            continue;\n          }\n          termsEnum = terms.iterator();\n          assert termsEnum != null;\n\n          if (termsEnum == TermsEnum.EMPTY) continue;\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"305f5b5835d67140809ca8fbcc030d012ddf71b0","date":1461942010,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n        final Fields fields = context.reader().fields();\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n          final Terms terms = fields.terms(term.field());\n          if (terms == null) {\n            // field does not exist\n            continue;\n          }\n          termsEnum = terms.iterator();\n          assert termsEnum != null;\n\n          if (termsEnum == TermsEnum.EMPTY) continue;\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n        final Fields fields = context.reader().fields();\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n          final Terms terms = fields.terms(term.field());\n          if (terms == null) {\n            // field does not exist\n            continue;\n          }\n          termsEnum = terms.iterator();\n          assert termsEnum != null;\n\n          if (termsEnum == TermsEnum.EMPTY) continue;\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n        final Fields fields = context.reader().fields();\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n          final Terms terms = fields.terms(term.field());\n          if (terms == null) {\n            // field does not exist\n            continue;\n          }\n          termsEnum = terms.iterator();\n          assert termsEnum != null;\n\n          if (termsEnum == TermsEnum.EMPTY) continue;\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermStates(IndexReader,List[LeafReaderContext],TermStates[],Term[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"    private void collectTermStates(IndexReader reader,\n                                   List<LeafReaderContext> leaves,\n                                   TermStates[] contextArray,\n                                   Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermStates termStates = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termStates == null) {\n              contextArray[i] = new TermStates(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termStates.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":null,"sourceOld":"    private void collectTermContext(IndexReader reader,\n                                    List<LeafReaderContext> leaves,\n                                    TermContext[] contextArray,\n                                    Term[] queryTerms) throws IOException {\n      TermsEnum termsEnum = null;\n      for (LeafReaderContext context : leaves) {\n\n        Terms terms = context.reader().terms(this.field);\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n\n        termsEnum = terms.iterator();\n\n        if (termsEnum == TermsEnum.EMPTY) continue;\n\n        for (int i = 0; i < queryTerms.length; i++) {\n          Term term = queryTerms[i];\n          TermContext termContext = contextArray[i];\n\n          if (termsEnum.seekExact(term.bytes())) {\n            if (termContext == null) {\n              contextArray[i] = new TermContext(reader.getContext(),\n                  termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                  termsEnum.totalTermFreq());\n            } else {\n              termContext.register(termsEnum.termState(), context.ord,\n                  termsEnum.docFreq(), termsEnum.totalTermFreq());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8e8d5955830d712186a4beb716e797d505af7981","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d","305f5b5835d67140809ca8fbcc030d012ddf71b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"305f5b5835d67140809ca8fbcc030d012ddf71b0":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"8e8d5955830d712186a4beb716e797d505af7981":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["8e8d5955830d712186a4beb716e797d505af7981","305f5b5835d67140809ca8fbcc030d012ddf71b0","55b50463286869f584cf849d1587a0fcd54d1dfa"],"305f5b5835d67140809ca8fbcc030d012ddf71b0":["8e8d5955830d712186a4beb716e797d505af7981"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}