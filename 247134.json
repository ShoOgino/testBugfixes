{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws IOException {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2a178a9ebfcc61e832755cd47b30712b308e91","date":1352137170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd45d359393ce293fc33bb4770a2fa8582298ee4","date":1356134855,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94df854a0d36420ddbf7a4a21330bd00c2354017","date":1384538000,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9","date":1384729182,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ROOT) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: {} [{}]\", adminFile.getName(), adminFile.getAbsolutePath());\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: {} [{}]\", adminFile.getName(), adminFile.getAbsolutePath());\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Return the file indicated (or the directory listing) from the local file system.\n  private void showFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = getAdminFileFromFileSystem(req, rsp, hiddenFiles);\n\n    if (adminFile == null) { // exception already recorded\n      return;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      log.error(\"Can not find: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not find: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      log.error(\"Can not show: \"+adminFile.getName() + \" [\"+adminFile.getAbsolutePath()+\"]\");\n      rsp.setException(new SolrException\n                       ( ErrorCode.NOT_FOUND, \"Can not show: \"+adminFile.getName() \n                         + \" [\"+adminFile.getAbsolutePath()+\"]\" ));\n      return;\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      // it's really a directory, just go for it.\n      int basePath = adminFile.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n\n        if (isHiddenFile(req, rsp, f.getName().replace('\\\\', '/'), false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fe2a178a9ebfcc61e832755cd47b30712b308e91","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["fd45d359393ce293fc33bb4770a2fa8582298ee4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["fe2a178a9ebfcc61e832755cd47b30712b308e91"],"575e66bd4b2349209027f6801184da7fc3cba13f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2acf500f78aa12b92e371fd89c719291986b6b90":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","2acf500f78aa12b92e371fd89c719291986b6b90"],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["fd45d359393ce293fc33bb4770a2fa8582298ee4","7455ee5c847b2ee7e44656e4218141f62dacb572"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["575e66bd4b2349209027f6801184da7fc3cba13f"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","94df854a0d36420ddbf7a4a21330bd00c2354017","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","fe2a178a9ebfcc61e832755cd47b30712b308e91","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","46d8ada1fff8d18cb197c38c7983225162599948","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}