{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ListCacheEvaluator#doWork(Object...).mjava","commits":[{"id":"a5cb8a7015ea492deb84f661910c6c5eb6908624","date":1535327336,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ListCacheEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    List list = new ArrayList();\n\n    if(values.length == 0) {\n      ConcurrentHashMap m = (ConcurrentHashMap)objectCache;\n      Enumeration en = m.keys();\n      while(en.hasMoreElements()) {\n        list.add(en.nextElement());\n      }\n      return list;\n    } else if(values.length == 1) {\n      String space = (String)values[0];\n      space = space.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n      if(spaceCache != null) {\n        ConcurrentHashMap spaceMap = (ConcurrentHashMap)objectCache.get(space);\n        Enumeration en = spaceMap.keys();\n        while(en.hasMoreElements()) {\n          list.add(en.nextElement());\n        }\n        return list;\n      } else {\n        return list;\n      }\n    } else {\n      throw new IOException(\"The listCache function requires two parameters: workspace and key\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ListCacheEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ListCacheEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    @SuppressWarnings({\"rawtypes\"})\n    List list = new ArrayList();\n\n    if(values.length == 0) {\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentHashMap m = (ConcurrentHashMap)objectCache;\n      @SuppressWarnings({\"rawtypes\"})\n      Enumeration en = m.keys();\n      while(en.hasMoreElements()) {\n        list.add(en.nextElement());\n      }\n      return list;\n    } else if(values.length == 1) {\n      String space = (String)values[0];\n      space = space.replace(\"\\\"\", \"\");\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n      if(spaceCache != null) {\n        @SuppressWarnings({\"rawtypes\"})\n        ConcurrentHashMap spaceMap = (ConcurrentHashMap)objectCache.get(space);\n        @SuppressWarnings({\"rawtypes\"})\n        Enumeration en = spaceMap.keys();\n        while(en.hasMoreElements()) {\n          list.add(en.nextElement());\n        }\n        return list;\n      } else {\n        return list;\n      }\n    } else {\n      throw new IOException(\"The listCache function requires two parameters: workspace and key\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    List list = new ArrayList();\n\n    if(values.length == 0) {\n      ConcurrentHashMap m = (ConcurrentHashMap)objectCache;\n      Enumeration en = m.keys();\n      while(en.hasMoreElements()) {\n        list.add(en.nextElement());\n      }\n      return list;\n    } else if(values.length == 1) {\n      String space = (String)values[0];\n      space = space.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n      if(spaceCache != null) {\n        ConcurrentHashMap spaceMap = (ConcurrentHashMap)objectCache.get(space);\n        Enumeration en = spaceMap.keys();\n        while(en.hasMoreElements()) {\n          list.add(en.nextElement());\n        }\n        return list;\n      } else {\n        return list;\n      }\n    } else {\n      throw new IOException(\"The listCache function requires two parameters: workspace and key\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5cb8a7015ea492deb84f661910c6c5eb6908624"],"a5cb8a7015ea492deb84f661910c6c5eb6908624":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}