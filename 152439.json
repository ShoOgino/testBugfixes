{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState).mjava","commits":[{"id":"06abfb156bd728a6e70948c4583bef937c47bc79","date":1354311317,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(SegmentReadState state) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"dat\"), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n      maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761b207f161726214a84533bf56a78f6c21ff56","date":1354384027,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState,String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(SegmentReadState).mjava","sourceNew":"    SimpleTextDocValuesReader(SegmentReadState state, String ext) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, ext), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(SegmentReadState state) throws IOException {\n      //System.out.println(\"dir=\" + dir + \" seg=\" + si.name);\n      data = state.directory.openInput(IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, \"dat\"), state.context);\n      maxDoc = state.segmentInfo.getDocCount();\n      while(true) {\n        readLine();\n        //System.out.println(\"READ field=\" + scratch.utf8ToString());\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD) : scratch.utf8ToString();\n        String fieldName = stripPrefix(FIELD);\n        //System.out.println(\"  field=\" + fieldName);\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        if (DocValues.isNumber(dvType) || DocValues.isFloat(dvType)) {\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Long.parseLong(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(MAXVALUE);\n          field.maxValue = Long.parseLong(stripPrefix(MAXVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n        } else if (DocValues.isBytes(dvType)) {\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n        } else if (DocValues.isSortedBytes(dvType)) {\n          readLine();\n          assert startsWith(NUMVALUES);\n          field.numValues = Integer.parseInt(stripPrefix(NUMVALUES));\n          readLine();\n          assert startsWith(FIXEDLENGTH);\n          field.fixedLength = Boolean.parseBoolean(stripPrefix(FIXEDLENGTH));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          readLine();\n          assert startsWith(ORDPATTERN);\n          field.ordPattern = stripPrefix(ORDPATTERN);\n          field.dataStartFilePointer = data.getFilePointer();\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * field.numValues + (1+field.ordPattern.length())*maxDoc);\n        } else {\n          throw new AssertionError();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a761b207f161726214a84533bf56a78f6c21ff56":["06abfb156bd728a6e70948c4583bef937c47bc79"],"06abfb156bd728a6e70948c4583bef937c47bc79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a761b207f161726214a84533bf56a78f6c21ff56":[],"06abfb156bd728a6e70948c4583bef937c47bc79":["a761b207f161726214a84533bf56a78f6c21ff56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06abfb156bd728a6e70948c4583bef937c47bc79","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a761b207f161726214a84533bf56a78f6c21ff56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}