{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas: files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replicas to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n              }\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","sourceNew":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas: files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas: files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replicas to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n              }\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d0d2e502d016d967c45c0c972ace4d02885e07","date":1454976917,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","sourceNew":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas; tcpPort=\" + tcpPort + \": files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas: files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b6213064c76adb293e52f03a3eb1528c5b1858","date":1454977105,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","sourceNew":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas; tcpPort=\" + tcpPort + \": files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas: files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#preCopyMergedSegmentFiles(SegmentCommitInfo,Map[String,FileMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void preCopyMergedSegmentFiles(SegmentCommitInfo info, Map<String,FileMetaData> files) throws IOException {\n    int[] replicaTCPPorts = this.replicaTCPPorts;\n    if (replicaTCPPorts == null) {\n      message(\"no replicas; skip warming \" + info);\n      return;\n    }\n\n    message(\"top: warm merge \" + info + \" to \" + replicaTCPPorts.length + \" replicas; tcpPort=\" + tcpPort + \": files=\" + files.keySet());\n\n    MergePreCopy preCopy = new MergePreCopy(files);\n    warmingSegments.add(preCopy);\n\n    try {\n\n      Set<String> fileNames = files.keySet();\n\n      // Ask all currently known replicas to pre-copy this newly merged segment's files:\n      for (int replicaTCPPort : replicaTCPPorts) {\n        try {\n          Connection c = new Connection(replicaTCPPort);\n          c.out.writeByte(SimpleReplicaNode.CMD_PRE_COPY_MERGE);\n          c.out.writeVLong(primaryGen);\n          c.out.writeVInt(tcpPort);\n          SimpleServer.writeFilesMetaData(c.out, files);\n          c.flush();\n          c.s.shutdownOutput();\n          message(\"warm connection \" + c.s);\n          preCopy.connections.add(c);\n        } catch (Throwable t) {\n          message(\"top: ignore exception trying to warm to replica port \" + replicaTCPPort + \": \" + t);\n          //t.printStackTrace(System.out);\n        }\n      }\n\n      long startNS = System.nanoTime();\n      long lastWarnNS = startNS;\n\n      // TODO: maybe ... place some sort of time limit on how long we are willing to wait for slow replica(s) to finish copying?\n      while (preCopy.finished() == false) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n\n        if (isClosed()) {\n          message(\"top: primary is closing: now cancel segment warming\");\n          synchronized(preCopy.connections) {\n            IOUtils.closeWhileHandlingException(preCopy.connections);\n          }\n          return;\n        }\n\n        long ns = System.nanoTime();\n        if (ns - lastWarnNS > 1000000000L) {\n          message(String.format(Locale.ROOT, \"top: warning: still warming merge \" + info + \" to \" + preCopy.connections.size() + \" replicas for %.1f sec...\", (ns - startNS)/1000000000.0));\n          lastWarnNS = ns;\n        }\n\n        // Process keep-alives:\n        synchronized(preCopy.connections) {\n          Iterator<Connection> it = preCopy.connections.iterator();\n          while (it.hasNext()) {\n            Connection c = it.next();\n            try {\n              long nowNS = System.nanoTime();\n              boolean done = false;\n              while (c.sockIn.available() > 0) {\n                byte b = c.in.readByte();\n                if (b == 0) {\n                  // keep-alive\n                  c.lastKeepAliveNS = nowNS;\n                  message(\"keep-alive for socket=\" + c.s + \" merge files=\" + files.keySet());\n                } else {\n                  // merge is done pre-copying to this node\n                  if (b != 1) {\n                    throw new IllegalArgumentException();\n                  }\n                  message(\"connection socket=\" + c.s + \" is done warming its merge \" + info + \" files=\" + files.keySet());\n                  IOUtils.closeWhileHandlingException(c);\n                  it.remove();\n                  done = true;\n                  break;\n                }\n              }\n\n              // If > 2 sec since we saw a keep-alive, assume this replica is dead:\n              if (done == false && nowNS - c.lastKeepAliveNS > 2000000000L) {\n                message(\"top: warning: replica socket=\" + c.s + \" for segment=\" + info + \" seems to be dead; closing files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n              if (done == false && random.nextInt(1000) == 17) {\n                message(\"top: warning: now randomly dropping replica from merge warming; files=\" + files.keySet());\n                IOUtils.closeWhileHandlingException(c);\n                it.remove();\n                done = true;\n              }\n\n            } catch (Throwable t) {\n              message(\"top: ignore exception trying to read byte during warm for segment=\" + info + \" to replica socket=\" + c.s + \": \" + t + \" files=\" + files.keySet());\n              IOUtils.closeWhileHandlingException(c);\n              it.remove();\n            }\n          }\n        }\n      }\n    } finally {\n      warmingSegments.remove(preCopy);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b6213064c76adb293e52f03a3eb1528c5b1858"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","c3d0d2e502d016d967c45c0c972ace4d02885e07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["c3d0d2e502d016d967c45c0c972ace4d02885e07","33b6213064c76adb293e52f03a3eb1528c5b1858"],"c3d0d2e502d016d967c45c0c972ace4d02885e07":["33b6213064c76adb293e52f03a3eb1528c5b1858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33b6213064c76adb293e52f03a3eb1528c5b1858":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}