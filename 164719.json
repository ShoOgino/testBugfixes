{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"yak_i\", \"32\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    // if exists() is false, no pseudo-field should be added\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  \n             , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,bog_i),b:mul(yak_i,bog_i),c:min(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'c':32.0 }\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,def(bog_i,42)), b:max(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'a': 74.0, 'b':32.0 }\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"yak_i\", \"32\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    // if exists() is false, no pseudo-field should be added\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  \n             , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,bog_i),b:mul(yak_i,bog_i),c:min(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'c':32.0 }\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,def(bog_i,42)), b:max(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'a': 74.0, 'b':32.0 }\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  // if exists() is false, no pseudo-field should be added\n        , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPseudoFieldFunctions().mjava","sourceNew":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"yak_i\", \"32\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    // if exists() is false, no pseudo-field should be added\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  \n             , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,bog_i),b:mul(yak_i,bog_i),c:min(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'c':32.0 }\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,def(bog_i,42)), b:max(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'a': 74.0, 'b':32.0 }\");\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFieldFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"yak_i\", \"32\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(commit());\n\n    // if exists() is false, no pseudo-field should be added\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:1,b:2.0,c:'X',d:{!func}foo_s,e:{!func}bar_s\")  \n             , \"/response/docs/[0]=={'a':1, 'b':2.0,'c':'X','d':'A'}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,bog_i),b:mul(yak_i,bog_i),c:min(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'c':32.0 }\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:sum(yak_i,def(bog_i,42)), b:max(yak_i,bog_i)\")  \n             , \"/response/docs/[0]=={ 'a': 74.0, 'b':32.0 }\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["19275ba31e621f6da1b83bf13af75233876fd3d4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0141f86b1794b911ab8e3eac773bf583e5cf784"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a701a7aab388afa1412a3dc23b4115c321f478c4":["f0141f86b1794b911ab8e3eac773bf583e5cf784","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0a22eafe3f72a4c2945eaad9547e6c78816978f4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}