{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","commits":[{"id":"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","date":1374000182,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","pathOld":"/dev/null","sourceNew":"  public void testCachability() throws Exception {\n    TermFilter a = termFilter(\"field1\", \"a\");\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    assertTrue(\"Must be cached\", cachedFilters.contains(termFilter(\"field1\", \"a\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field1\", \"b\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field2\", \"a\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","pathOld":"/dev/null","sourceNew":"  public void testCachability() throws Exception {\n    TermFilter a = termFilter(\"field1\", \"a\");\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    assertTrue(\"Must be cached\", cachedFilters.contains(termFilter(\"field1\", \"a\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field1\", \"b\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field2\", \"a\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermFilter a = termFilter(\"field1\", \"a\");\n    HashSet<Filter> cachedFilters = new HashSet<>();\n    cachedFilters.add(a);\n    assertTrue(\"Must be cached\", cachedFilters.contains(termFilter(\"field1\", \"a\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field1\", \"b\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field2\", \"a\")));\n  }\n\n","sourceOld":"  public void testCachability() throws Exception {\n    TermFilter a = termFilter(\"field1\", \"a\");\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    assertTrue(\"Must be cached\", cachedFilters.contains(termFilter(\"field1\", \"a\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field1\", \"b\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field2\", \"a\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"589f939c50213ffd758060ded12e334c85ef6a87","date":1423239999,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testCachability().mjava","sourceNew":null,"sourceOld":"  public void testCachability() throws Exception {\n    TermFilter a = termFilter(\"field1\", \"a\");\n    HashSet<Filter> cachedFilters = new HashSet<>();\n    cachedFilters.add(a);\n    assertTrue(\"Must be cached\", cachedFilters.contains(termFilter(\"field1\", \"a\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field1\", \"b\")));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(termFilter(\"field2\", \"a\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70"],"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"589f939c50213ffd758060ded12e334c85ef6a87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["589f939c50213ffd758060ded12e334c85ef6a87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["589f939c50213ffd758060ded12e334c85ef6a87"],"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"589f939c50213ffd758060ded12e334c85ef6a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}