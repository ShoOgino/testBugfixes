{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IFFTEvaluator#doWork(Object).mjava","commits":[{"id":"80935b1b8e196d1a1ef6f00a9f32d41160be71ee","date":1524620119,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IFFTEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object v) throws IOException {\n\n    if(v instanceof Matrix) {\n\n      Matrix matrix = (Matrix)v;\n      double[][] data = matrix.getData();\n      double[] real = data[0];\n      double[] imaginary = data[1];\n      Complex[] complex = new Complex[real.length];\n\n      for (int i = 0; i < real.length; ++i) {\n       complex[i] = new Complex(real[i], imaginary[i]);\n      }\n\n      FastFourierTransformer fastFourierTransformer = new FastFourierTransformer(DftNormalization.STANDARD);\n      Complex[] result  = fastFourierTransformer.transform(complex, TransformType.INVERSE);\n\n      List<Number> realResult = new ArrayList();\n      for (int i = 0; i < result.length; ++i) {\n        realResult.add(result[i].getReal());\n      }\n\n      return realResult;\n    } else {\n      throw new IOException(\"ifft function requires a matrix as a parameter\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IFFTEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IFFTEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object v) throws IOException {\n\n    if(v instanceof Matrix) {\n\n      Matrix matrix = (Matrix)v;\n      double[][] data = matrix.getData();\n      double[] real = data[0];\n      double[] imaginary = data[1];\n      Complex[] complex = new Complex[real.length];\n\n      for (int i = 0; i < real.length; ++i) {\n       complex[i] = new Complex(real[i], imaginary[i]);\n      }\n\n      FastFourierTransformer fastFourierTransformer = new FastFourierTransformer(DftNormalization.STANDARD);\n      Complex[] result  = fastFourierTransformer.transform(complex, TransformType.INVERSE);\n\n      List<Number> realResult = new ArrayList<>();\n      for (int i = 0; i < result.length; ++i) {\n        realResult.add(result[i].getReal());\n      }\n\n      return realResult;\n    } else {\n      throw new IOException(\"ifft function requires a matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object v) throws IOException {\n\n    if(v instanceof Matrix) {\n\n      Matrix matrix = (Matrix)v;\n      double[][] data = matrix.getData();\n      double[] real = data[0];\n      double[] imaginary = data[1];\n      Complex[] complex = new Complex[real.length];\n\n      for (int i = 0; i < real.length; ++i) {\n       complex[i] = new Complex(real[i], imaginary[i]);\n      }\n\n      FastFourierTransformer fastFourierTransformer = new FastFourierTransformer(DftNormalization.STANDARD);\n      Complex[] result  = fastFourierTransformer.transform(complex, TransformType.INVERSE);\n\n      List<Number> realResult = new ArrayList();\n      for (int i = 0; i < result.length; ++i) {\n        realResult.add(result[i].getReal());\n      }\n\n      return realResult;\n    } else {\n      throw new IOException(\"ifft function requires a matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["80935b1b8e196d1a1ef6f00a9f32d41160be71ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80935b1b8e196d1a1ef6f00a9f32d41160be71ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80935b1b8e196d1a1ef6f00a9f32d41160be71ee"],"80935b1b8e196d1a1ef6f00a9f32d41160be71ee":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}