{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Polygon,Node,List[Triangle],State,boolean).mjava","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Object polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Polygon polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Object polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Compute if edges belong to the polygon\n          boolean abFromPolygon = prevNode.isNextEdgeFromPolygon;\n          boolean bcFromPolygon = currEar.isNextEdgeFromPolygon;\n          boolean caFromPolygon =  isEdgeFromPolygon(prevNode, nextNode, mortonOptimized);\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, abFromPolygon, currEar, bcFromPolygon, nextNode, caFromPolygon));\n          // Remove the ear node.\n          removeNode(currEar, caFromPolygon);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation, mortonOptimized);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Object polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Object,Node,List[Triangle],State,boolean).mjava","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Object polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Compute if edges belong to the polygon\n          boolean abFromPolygon = prevNode.isNextEdgeFromPolygon;\n          boolean bcFromPolygon = currEar.isNextEdgeFromPolygon;\n          boolean caFromPolygon =  isEdgeFromPolygon(prevNode, nextNode, mortonOptimized);\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, abFromPolygon, currEar, bcFromPolygon, nextNode, caFromPolygon));\n          // Remove the ear node.\n          removeNode(currEar, caFromPolygon);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation, mortonOptimized);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Object polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Compute if edges belong to the polygon\n          boolean abFromPolygon = prevNode.isNextEdgeFromPolygon;\n          boolean bcFromPolygon = currEar.isNextEdgeFromPolygon;\n          boolean caFromPolygon =  isEdgeFromPolygon(prevNode, nextNode, mortonOptimized);\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, abFromPolygon, currEar, bcFromPolygon, nextNode, caFromPolygon));\n          // Remove the ear node.\n          removeNode(currEar, caFromPolygon);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation, mortonOptimized);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}