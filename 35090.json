{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/PagedBytes#finish().mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary. */\n  public void finish() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    currentBlock = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9069c2e665572658f846820b6cb8ad53de19df0","date":1276611358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze().mjava","sourceNew":null,"sourceOld":"  /** Commits final byte[], trimming it if necessary. */\n  public Reader freeze() {\n    if (upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87697f76828e4cfc6dc898262de8898e5010703f":["e9069c2e665572658f846820b6cb8ad53de19df0"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","87697f76828e4cfc6dc898262de8898e5010703f"],"e9069c2e665572658f846820b6cb8ad53de19df0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87697f76828e4cfc6dc898262de8898e5010703f"]},"commit2Childs":{"87697f76828e4cfc6dc898262de8898e5010703f":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["5f4e87790277826a2aea119328600dfb07761f32","e9069c2e665572658f846820b6cb8ad53de19df0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e9069c2e665572658f846820b6cb8ad53de19df0":["87697f76828e4cfc6dc898262de8898e5010703f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}