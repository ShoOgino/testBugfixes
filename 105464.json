{"path":"lucene/core/src/java/org/apache/lucene/document/LongRange#newCrossesQuery(String,long[],long[]).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongRange#newCrossesQuery(String,long[],long[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LongRangeField#newCrossesQuery(String,long[],long[]).mjava","sourceNew":"  /**\n   * Create a query for matching indexed ranges that cross the defined range.\n   * A CROSSES is defined as any set of ranges that are not disjoint and not wholly contained by\n   * the query. Effectively, its the complement of union(WITHIN, DISJOINT).\n   * @param field field name. must not be null.\n   * @param min array of min values. (accepts {@code Long.MIN_VALUE})\n   * @param max array of max values. (accepts {@code Long.MAX_VALUE})\n   * @return query for matching ranges within the defined range\n   * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid\n   */\n  public static Query newCrossesQuery(String field, final long[] min, final long[] max) {\n    return newRelationQuery(field, min, max, QueryType.CROSSES);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching indexed ranges that cross the defined range.\n   * A CROSSES is defined as any set of ranges that are not disjoint and not wholly contained by\n   * the query. Effectively, its the complement of union(WITHIN, DISJOINT).\n   * @param field field name. must not be null.\n   * @param min array of min values. (accepts {@code Long.MIN_VALUE})\n   * @param max array of max values. (accepts {@code Long.MAX_VALUE})\n   * @return query for matching ranges within the defined range\n   * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid\n   */\n  public static Query newCrossesQuery(String field, final long[] min, final long[] max) {\n    checkArgs(min, max);\n    return new RangeFieldQuery(field, encode(min, max), min.length, QueryType.CROSSES) {\n      @Override\n      protected String toString(byte[] ranges, int dimension) {\n        return LongRangeField.toString(ranges, dimension);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}