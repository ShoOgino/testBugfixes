{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}