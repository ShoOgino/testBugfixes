{"path":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   * @deprecated use {@link IndexWriterConfig#setMergeScheduler(MergeScheduler)} instead\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMergeScheduler(mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   * @deprecated use {@link IndexWriterConfig#setMergeScheduler(MergeScheduler)} instead\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMergeScheduler(mergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   * @deprecated use {@link IndexWriterConfig#setMergeScheduler(MergeScheduler)} instead\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMergeScheduler(mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeScheduler(MergeScheduler).mjava","sourceNew":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   * @deprecated use {@link IndexWriterConfig#setMergeScheduler(MergeScheduler)} instead\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMergeScheduler(mergeScheduler);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the merge scheduler used by this writer.\n   * @deprecated use {@link IndexWriterConfig#setMergeScheduler(MergeScheduler)} instead\n   */\n  synchronized public void setMergeScheduler(MergeScheduler mergeScheduler) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (mergeScheduler == null)\n      throw new NullPointerException(\"MergeScheduler must be non-null\");\n\n    if (this.mergeScheduler != mergeScheduler) {\n      finishMerges(true);\n      this.mergeScheduler.close();\n    }\n    this.mergeScheduler = mergeScheduler;\n    if (infoStream != null)\n      message(\"setMergeScheduler \" + mergeScheduler);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMergeScheduler(mergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"67006a60923e2124212d3baa0d29b444bcbd8373":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["2586f96f60332eb97ecd2934b0763791462568b2"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2586f96f60332eb97ecd2934b0763791462568b2":["67006a60923e2124212d3baa0d29b444bcbd8373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["67006a60923e2124212d3baa0d29b444bcbd8373"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"67006a60923e2124212d3baa0d29b444bcbd8373":["2586f96f60332eb97ecd2934b0763791462568b2"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"2586f96f60332eb97ecd2934b0763791462568b2":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}