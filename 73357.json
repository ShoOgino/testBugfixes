{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","commits":[{"id":"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab","date":1495627141,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34baf73cdd1bea04fd3629715a17f5bf3f424c17","date":1495670683,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    String k = params.get(\"k\");\n\n    if(k != null) {\n      params.add(ROWS, k);\n      params.remove(k);\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    String k = params.get(\"k\");\n\n    if(k != null) {\n      params.add(ROWS, k);\n      params.remove(k);\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    String k = params.get(\"k\");\n\n    if(k != null) {\n      params.add(ROWS, k);\n      params.remove(k);\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/KnnStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(' ').append(key).append('=').append(params.get(key));\n        params.remove(key);\n      }\n    }\n\n    String k = params.get(\"k\");\n\n    if(k != null) {\n      params.add(ROWS, k);\n      params.remove(k);\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = getParams(this.props);\n\n    StringBuilder builder = new StringBuilder();\n\n    for(String key : mltParams) {\n      if(params.get(key) != null) {\n        builder.append(\" \" + key + \"=\" + params.get(key));\n        params.remove(key);\n      }\n    }\n\n    String k = params.get(\"k\");\n\n    if(k != null) {\n      params.add(ROWS, k);\n      params.remove(k);\n    }\n\n    params.add(Q, \"{!mlt\"+builder.toString()+\"}\"+id);\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      QueryResponse response = request.process(cloudSolrClient, collection);\n      SolrDocumentList docs = response.getResults();\n      documentIterator = docs.iterator();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34baf73cdd1bea04fd3629715a17f5bf3f424c17"],"2ffe681f212e5073c69955b4ad22946794c84940":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34baf73cdd1bea04fd3629715a17f5bf3f424c17":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab","34baf73cdd1bea04fd3629715a17f5bf3f424c17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["34baf73cdd1bea04fd3629715a17f5bf3f424c17","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"34baf73cdd1bea04fd3629715a17f5bf3f424c17":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}