{"path":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#reopenOutputStream().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#reopenOutputStream().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Re-open the output stream of the tlog and position\n   * the file pointer at the end of the file. It assumes\n   * that the tlog is non-empty and that the tlog's header\n   * has been already read.\n   */\n  synchronized void reopenOutputStream() {\n    try {\n      if (debug) {\n        log.debug(\"Re-opening tlog's output stream: \" + this);\n      }\n\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      channel = raf.getChannel();\n      long start = raf.length();\n      raf.seek(start);\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      fos.setWritten(start);    // reflect that we aren't starting at the beginning\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#reopenOutputStream().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#reopenOutputStream().mjava","sourceNew":"  /**\n   * Re-open the output stream of the tlog and position\n   * the file pointer at the end of the file. It assumes\n   * that the tlog is non-empty and that the tlog's header\n   * has been already read.\n   */\n  synchronized void reopenOutputStream() {\n    try {\n      if (debug) {\n        log.debug(\"Re-opening tlog's output stream: {}\", this);\n      }\n\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      channel = raf.getChannel();\n      long start = raf.length();\n      raf.seek(start);\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      fos.setWritten(start);    // reflect that we aren't starting at the beginning\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Re-open the output stream of the tlog and position\n   * the file pointer at the end of the file. It assumes\n   * that the tlog is non-empty and that the tlog's header\n   * has been already read.\n   */\n  synchronized void reopenOutputStream() {\n    try {\n      if (debug) {\n        log.debug(\"Re-opening tlog's output stream: \" + this);\n      }\n\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      channel = raf.getChannel();\n      long start = raf.length();\n      raf.seek(start);\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      fos.setWritten(start);    // reflect that we aren't starting at the beginning\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#reopenOutputStream().mjava","sourceNew":null,"sourceOld":"  /**\n   * Re-open the output stream of the tlog and position\n   * the file pointer at the end of the file. It assumes\n   * that the tlog is non-empty and that the tlog's header\n   * has been already read.\n   */\n  synchronized void reopenOutputStream() {\n    try {\n      if (debug) {\n        log.debug(\"Re-opening tlog's output stream: {}\", this);\n      }\n\n      raf = new RandomAccessFile(this.tlogFile, \"rw\");\n      channel = raf.getChannel();\n      long start = raf.length();\n      raf.seek(start);\n      os = Channels.newOutputStream(channel);\n      fos = new FastOutputStream(os, new byte[65536], 0);\n      fos.setWritten(start);    // reflect that we aren't starting at the beginning\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"740d649f013f07efbeb73ca854f106c60166e7c0":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["740d649f013f07efbeb73ca854f106c60166e7c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}