{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#intervals(BytesRef,TermsEnum).mjava","commits":[{"id":"e3c9188b2bff41b228f06f721e7da193b96f895b","date":1548164162,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#intervals(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  static IntervalIterator intervals(BytesRef term, TermsEnum te) throws IOException {\n    PostingsEnum pe = te.postings(null, PostingsEnum.POSITIONS);\n    float cost = termPositionsCost(te);\n    return new IntervalIterator() {\n\n      @Override\n      public int docID() {\n        return pe.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        int doc = pe.nextDoc();\n        reset();\n        return doc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        int doc = pe.advance(target);\n        reset();\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return pe.cost();\n      }\n\n      int pos = -1, upto;\n\n      @Override\n      public int start() {\n        return pos;\n      }\n\n      @Override\n      public int end() {\n        return pos;\n      }\n\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        if (upto <= 0)\n          return pos = NO_MORE_INTERVALS;\n        upto--;\n        return pos = pe.nextPosition();\n      }\n\n      @Override\n      public float matchCost() {\n        return cost;\n      }\n\n      private void reset() throws IOException {\n        if (pe.docID() == NO_MORE_DOCS) {\n          upto = -1;\n          pos = NO_MORE_INTERVALS;\n        }\n        else {\n          upto = pe.freq();\n          pos = -1;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return term.utf8ToString() + \":\" + super.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#intervals(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  static IntervalIterator intervals(BytesRef term, TermsEnum te) throws IOException {\n    PostingsEnum pe = te.postings(null, PostingsEnum.POSITIONS);\n    float cost = termPositionsCost(te);\n    return new IntervalIterator() {\n\n      @Override\n      public int docID() {\n        return pe.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        int doc = pe.nextDoc();\n        reset();\n        return doc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        int doc = pe.advance(target);\n        reset();\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return pe.cost();\n      }\n\n      int pos = -1, upto;\n\n      @Override\n      public int start() {\n        return pos;\n      }\n\n      @Override\n      public int end() {\n        return pos;\n      }\n\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        if (upto <= 0)\n          return pos = NO_MORE_INTERVALS;\n        upto--;\n        return pos = pe.nextPosition();\n      }\n\n      @Override\n      public float matchCost() {\n        return cost;\n      }\n\n      private void reset() throws IOException {\n        if (pe.docID() == NO_MORE_DOCS) {\n          upto = -1;\n          pos = NO_MORE_INTERVALS;\n        }\n        else {\n          upto = pe.freq();\n          pos = -1;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return term.utf8ToString() + \":\" + super.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/TermIntervalsSource#intervals(BytesRef,TermsEnum).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/TermIntervalsSource#intervals(BytesRef,TermsEnum).mjava","sourceNew":"  static IntervalIterator intervals(BytesRef term, TermsEnum te) throws IOException {\n    PostingsEnum pe = te.postings(null, PostingsEnum.POSITIONS);\n    float cost = termPositionsCost(te);\n    return new IntervalIterator() {\n\n      @Override\n      public int docID() {\n        return pe.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        int doc = pe.nextDoc();\n        reset();\n        return doc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        int doc = pe.advance(target);\n        reset();\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return pe.cost();\n      }\n\n      int pos = -1, upto;\n\n      @Override\n      public int start() {\n        return pos;\n      }\n\n      @Override\n      public int end() {\n        return pos;\n      }\n\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        if (upto <= 0)\n          return pos = NO_MORE_INTERVALS;\n        upto--;\n        return pos = pe.nextPosition();\n      }\n\n      @Override\n      public float matchCost() {\n        return cost;\n      }\n\n      private void reset() throws IOException {\n        if (pe.docID() == NO_MORE_DOCS) {\n          upto = -1;\n          pos = NO_MORE_INTERVALS;\n        }\n        else {\n          upto = pe.freq();\n          pos = -1;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return term.utf8ToString() + \":\" + super.toString();\n      }\n    };\n  }\n\n","sourceOld":"  static IntervalIterator intervals(BytesRef term, TermsEnum te) throws IOException {\n    PostingsEnum pe = te.postings(null, PostingsEnum.POSITIONS);\n    float cost = termPositionsCost(te);\n    return new IntervalIterator() {\n\n      @Override\n      public int docID() {\n        return pe.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        int doc = pe.nextDoc();\n        reset();\n        return doc;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        int doc = pe.advance(target);\n        reset();\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        return pe.cost();\n      }\n\n      int pos = -1, upto;\n\n      @Override\n      public int start() {\n        return pos;\n      }\n\n      @Override\n      public int end() {\n        return pos;\n      }\n\n      @Override\n      public int gaps() {\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        if (upto <= 0)\n          return pos = NO_MORE_INTERVALS;\n        upto--;\n        return pos = pe.nextPosition();\n      }\n\n      @Override\n      public float matchCost() {\n        return cost;\n      }\n\n      private void reset() throws IOException {\n        if (pe.docID() == NO_MORE_DOCS) {\n          upto = -1;\n          pos = NO_MORE_INTERVALS;\n        }\n        else {\n          upto = pe.freq();\n          pos = -1;\n        }\n      }\n\n      @Override\n      public String toString() {\n        return term.utf8ToString() + \":\" + super.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["e3c9188b2bff41b228f06f721e7da193b96f895b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3c9188b2bff41b228f06f721e7da193b96f895b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c9188b2bff41b228f06f721e7da193b96f895b"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c9188b2bff41b228f06f721e7da193b96f895b","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e3c9188b2bff41b228f06f721e7da193b96f895b":["97ee2282ff806e9bc9d705f389cf40451ab81c3e","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}