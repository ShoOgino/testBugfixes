{"path":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","commits":[{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#register(TermState,int,int).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#register(TermState,int,int).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#register(TermState,int,int).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link ReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0f3cee3d20b0c786e6fca20539454262e29edcab","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["8493985e6883b3fa8231d172694d2aa3a85cb182","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","5cab9a86bd67202d20b6adc463008c8e982b070a"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}