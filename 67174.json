{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":null,"sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}