{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#waitAddPendingCoreOps(String).mjava","commits":[{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#waitPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // We get here when we're being loaded, and the presumption is that we're not in the list yet.\n  protected SolrCore waitPendingCoreOps(String name) {\n\n    // Keep multiple threads from opening or closing a core at one time.\n    SolrCore ret = null;\n\n    synchronized (locker) {\n      boolean pending;\n      do { // We're either loading or unloading this core,\n        pending = pendingDynamicLoads.contains(name); // wait for the core to be loaded\n        if (! pending) {\n          // Check pending closes. This is a linear search is inefficient, but maps don't work without a lot of complexity,\n          // we'll live with it unless it proves to be a bottleneck. In the \"usual\" case, this list shouldn't be\n          // very long. In the stress test associated with SOLR-4196, this hovered around 0-3, occasionally spiking\n          // very briefly to around 30.\n          for (SolrCore core : pendingDynamicCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n\n      if (!container.isShutDown()) {\n        ret = getCoreFromAnyList(name); // we might have been _unloading_ the core, so check.\n        if (ret == null) {\n          pendingDynamicLoads.add(name); // the caller is going to load us. If we happen to be shutting down, we don't care.\n        }\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}