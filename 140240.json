{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","commits":[{"id":"2284ec7b7c73174ca051dd51acdba799c2b5860c","date":1402649660,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"/dev/null","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, null, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"/dev/null","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, null, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, null, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, CheckHits.explainToleranceDelta(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDollarVariable().mjava","sourceNew":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"$0\", DoubleValuesSource.SCORES);\n    bindings.add(\"$score\", DoubleValuesSource.SCORES);\n\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","sourceOld":"  /** Uses variables with $ */\n  public void testDollarVariable() throws Exception {\n    Expression expr = JavascriptCompiler.compile(\"$0+$score\");\n    \n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"$0\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"$score\", SortField.Type.SCORE));\n    \n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    TopFieldDocs td = searcher.search(query, 3, sort, true);\n    for (int i = 0; i < 3; i++) {\n      FieldDoc d = (FieldDoc) td.scoreDocs[i];\n      float expected = 2*d.score;\n      float actual = ((Double)d.fields[0]).floatValue();\n      assertEquals(expected, actual, 0d);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"27d4663d3f6f21a687874d174b49d55645ce99db":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["2284ec7b7c73174ca051dd51acdba799c2b5860c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27d4663d3f6f21a687874d174b49d55645ce99db"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}