{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","commits":[{"id":"3c7c5f2319949ba567dd867f78f86ea8ff0f1476","date":1375469665,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","pathOld":"/dev/null","sourceNew":"  public void readRootArcs(Arc<T>[] arcs) throws IOException {\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","pathOld":"/dev/null","sourceNew":"  public void readRootArcs(Arc<T>[] arcs) throws IOException {\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","sourceNew":"  public void readRootArcs(Arc<T>[] arcs) throws IOException {\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  public void readRootArcs(Arc<T>[] arcs) throws IOException {\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f32ed90e12610550e1363aea43afe3d6e292cf9","date":1418230105,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readRootArcs(Arc[T][]).mjava","sourceNew":null,"sourceOld":"  public void readRootArcs(Arc<T>[] arcs) throws IOException {\n    final Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader();\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          arcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}