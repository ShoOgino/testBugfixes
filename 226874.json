{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","commits":[{"id":"ae46d105c94ea6ceb5201189bf9611bdef91b1b4","date":1310997409,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      addTermFrequencies(r, words, fieldName);\n    }\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}