{"path":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","commits":[{"id":"3620d9ae0597bc9732d139dc0a9dcab381e998e7","date":1483825160,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in \n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString(), 1.0f);\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in \n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString(), 1.0f);\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","sourceNew":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in \n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString());\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","sourceOld":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in \n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString(), 1.0f);\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"980f4ef5a16664be88d82c37e6af5c49a3d57c9c","date":1557969027,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestSchemalessBufferedUpdates#processAdd(SolrInputDocument).mjava","sourceNew":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in\n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString());\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","sourceOld":"  private SolrInputDocument processAdd(final SolrInputDocument docIn) throws IOException {\n    UpdateRequestProcessorChain processorChain = h.getCore().getUpdateProcessingChain(UPDATE_CHAIN);\n    assertNotNull(\"Undefined URP chain '\" + UPDATE_CHAIN + \"'\", processorChain);\n    List <UpdateRequestProcessorFactory> factoriesUpToDUP = new ArrayList<>();\n    for (UpdateRequestProcessorFactory urpFactory : processorChain.getProcessors()) {\n      factoriesUpToDUP.add(urpFactory);\n      if (urpFactory.getClass().equals(DistributedUpdateProcessorFactory.class)) \n        break;\n    }\n    UpdateRequestProcessorChain chainUpToDUP = new UpdateRequestProcessorChain(factoriesUpToDUP, h.getCore());\n    assertNotNull(\"URP chain '\" + UPDATE_CHAIN + \"'\", chainUpToDUP);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequest req = req();\n    try {\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = docIn;\n      UpdateRequestProcessor processor = chainUpToDUP.createProcessor(req, rsp);\n      processor.processAdd(cmd);\n      if (cmd.solrDoc.get(\"f_dt\").getValue() instanceof Date) {\n        // Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in \n        // https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(), \n        // Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString\n        cmd.solrDoc.get(\"f_dt\").setValue(((Date) cmd.solrDoc.get(\"f_dt\").getValue()).toInstant().toString());\n      }\n      return cmd.solrDoc;\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3620d9ae0597bc9732d139dc0a9dcab381e998e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3620d9ae0597bc9732d139dc0a9dcab381e998e7"],"acd9883560fd89e6448b2b447302fe543040cd4f":["3620d9ae0597bc9732d139dc0a9dcab381e998e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"]},"commit2Childs":{"980f4ef5a16664be88d82c37e6af5c49a3d57c9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3620d9ae0597bc9732d139dc0a9dcab381e998e7","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"3620d9ae0597bc9732d139dc0a9dcab381e998e7":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","acd9883560fd89e6448b2b447302fe543040cd4f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["980f4ef5a16664be88d82c37e6af5c49a3d57c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}