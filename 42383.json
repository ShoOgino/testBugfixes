{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.getType();\n    assertEquals(info, leftType, right.getType());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","sourceNew":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.getType();\n    assertEquals(info, leftType, right.getType());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.type();\n    assertEquals(info, leftType, right.type());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.getType();\n    assertEquals(info, leftType, right.getType());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValuesSource(DocValues.Source,DocValues.Source).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks source API\n   */\n  public void assertDocValuesSource(DocValues.Source left, DocValues.Source right) throws Exception {\n    DocValues.Type leftType = left.getType();\n    assertEquals(info, leftType, right.getType());\n    switch(leftType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getInt(i), right.getInt(i));\n        }\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          assertEquals(info, left.getFloat(i), right.getFloat(i), 0F);\n        }\n        break;\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        BytesRef b1 = new BytesRef();\n        BytesRef b2 = new BytesRef();\n        for (int i = 0; i < leftReader.maxDoc(); i++) {\n          left.getBytes(i, b1);\n          right.getBytes(i, b2);\n          assertEquals(info, b1, b2);\n        }\n        break;\n      // TODO: can we test these?\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}