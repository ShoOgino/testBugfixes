{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n\t  new SimpleTerm.MatchingTermVisitor() {\n\t    public void visitMatchingTerm(Term term) throws IOException {\n\t      luceneSubQueries.add(qf.newTermQuery(term));\n\t    }\n\t  });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n\t  : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n\t  : SrndBooleanQuery.makeBooleanQuery(\n\t    /* luceneSubQueries all have default weight */\n\t    luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n\t  new SimpleTerm.MatchingTermVisitor() {\n\t    public void visitMatchingTerm(Term term) throws IOException {\n\t      luceneSubQueries.add(qf.newTermQuery(term));\n\t    }\n\t  });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n\t  : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n\t  : SrndBooleanQuery.makeBooleanQuery(\n\t    /* luceneSubQueries all have default weight */\n\t    luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n\t  new SimpleTerm.MatchingTermVisitor() {\n\t    public void visitMatchingTerm(Term term) throws IOException {\n\t      luceneSubQueries.add(qf.newTermQuery(term));\n\t    }\n\t  });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n\t  : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n\t  : SrndBooleanQuery.makeBooleanQuery(\n\t    /* luceneSubQueries all have default weight */\n\t    luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<Query>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? new MatchNoDocsQuery()\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final List<Query> luceneSubQueries = new ArrayList<>();\n    srndQuery.visitMatchingTerms(reader, fieldName,\n    new SimpleTerm.MatchingTermVisitor() {\n      @Override\n      public void visitMatchingTerm(Term term) throws IOException {\n        luceneSubQueries.add(qf.newTermQuery(term));\n      }\n    });\n    return  (luceneSubQueries.size() == 0) ? SrndQuery.theEmptyLcnQuery\n    : (luceneSubQueries.size() == 1) ? luceneSubQueries.get(0)\n    : SrndBooleanQuery.makeBooleanQuery(\n      /* luceneSubQueries all have default weight */\n      luceneSubQueries, BooleanClause.Occur.SHOULD); /* OR the subquery terms */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7530de27b87b961b51f01bd1299b7004d46e8823"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}