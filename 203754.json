{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["441e4370677ea6e64691231510de2a90b67dd2fb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9308f62fa74f41b5550acff64ae6a38aba6d97e","date":1341665282,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\"), Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<String>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, \"UTF-8\"));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.shutdown();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.shutdown();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.shutdown();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.shutdown();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          Collection<byte[]> payloads = spans.getPayload();\n  \n          for (final byte [] payload : payloads) {\n            payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          Collection<byte[]> payloads = spans.getPayload();\n  \n          for (final byte [] payload : payloads) {\n            payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.next()) {\n        Collection<byte[]> payloads = spans.getPayload();\n        for (final byte[] payload : payloads) {\n          payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testShrinkToAfterShortestMatch2().mjava","sourceNew":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          Collection<byte[]> payloads = spans.getPayload();\n  \n          for (final byte [] payload : payloads) {\n            payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testShrinkToAfterShortestMatch2() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new TestPayloadAnalyzer()));\n\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\"a b a d k f a h i k a k\")));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    IndexSearcher is = newSearcher(reader);\n    writer.close();\n\n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);\n    Spans spans =  MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n\n    TopDocs topDocs = is.search(snq, 1);\n    Set<String> payloadSet = new HashSet<>();\n    for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n      while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n        while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n          Collection<byte[]> payloads = spans.getPayload();\n  \n          for (final byte [] payload : payloads) {\n            payloadSet.add(new String(payload, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertEquals(2, payloadSet.size());\n    assertTrue(payloadSet.contains(\"a:Noise:10\"));\n    assertTrue(payloadSet.contains(\"k:Noise:11\"));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a3635dad24b0681f0088f2ef680456482cdb451"],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b9308f62fa74f41b5550acff64ae6a38aba6d97e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3a3635dad24b0681f0088f2ef680456482cdb451"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a3635dad24b0681f0088f2ef680456482cdb451":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","2acf500f78aa12b92e371fd89c719291986b6b90"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["46d8ada1fff8d18cb197c38c7983225162599948","3a3635dad24b0681f0088f2ef680456482cdb451"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fab172655716b96f7e42376116235017a922de3a":["d0ef034a4f10871667ae75181537775ddcf8ade4","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a3635dad24b0681f0088f2ef680456482cdb451","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a3635dad24b0681f0088f2ef680456482cdb451":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"46d8ada1fff8d18cb197c38c7983225162599948":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b9308f62fa74f41b5550acff64ae6a38aba6d97e","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}