{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","commits":[{"id":"b9f70b31079ec002469ee49df3b8f9bd8d10df23","date":1447755747,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    for(int dim=0;dim<numDims;dim++) {\n      int prefix = in.readVInt();\n      commonPrefixLengths[dim] = prefix;\n      if (prefix > 0) {\n        in.readBytes(scratchPackedValue, dim*bytesPerDim, prefix);\n      }\n      //System.out.println(\"R: \" + dim + \" of \" + numDims + \" prefix=\" + prefix);\n    }\n    for(int i=0;i<count;i++) {\n      for(int dim=0;dim<numDims;dim++) {\n        int prefix = commonPrefixLengths[dim];\n        in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n      }\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    for(int dim=0;dim<numDims;dim++) {\n      int prefix = in.readVInt();\n      commonPrefixLengths[dim] = prefix;\n      if (prefix > 0) {\n        in.readBytes(scratchPackedValue, dim*bytesPerDim, prefix);\n      }\n      //System.out.println(\"R: \" + dim + \" of \" + numDims + \" prefix=\" + prefix);\n    }\n    for(int i=0;i<count;i++) {\n      for(int dim=0;dim<numDims;dim++) {\n        int prefix = commonPrefixLengths[dim];\n        in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n      }\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n    for(int dim=0;dim<numDims;dim++) {\n      int prefix = in.readVInt();\n      commonPrefixLengths[dim] = prefix;\n      if (prefix > 0) {\n        in.readBytes(scratchPackedValue, dim*bytesPerDim, prefix);\n      }\n      //System.out.println(\"R: \" + dim + \" of \" + numDims + \" prefix=\" + prefix);\n    }\n    for(int i=0;i<count;i++) {\n      for(int dim=0;dim<numDims;dim++) {\n        int prefix = commonPrefixLengths[dim];\n        in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n      }\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","sourceOld":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = version < BKDWriter.VERSION_COMPRESSED_VALUES\n        ? -1\n        : readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":null,"sourceOld":"  void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    visitor.grow(count);\n\n    readCommonPrefixes(commonPrefixLengths, scratchPackedValue, in);\n\n    int compressedDim = readCompressedDim(in);\n\n    if (compressedDim == -1) {\n      visitRawDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor);\n    } else {\n      visitCompressedDocValues(commonPrefixLengths, scratchPackedValue, in, docIDs, count, visitor, compressedDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["c0e7448656541edc407546460641f47950451b16"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b9f70b31079ec002469ee49df3b8f9bd8d10df23","3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c0e7448656541edc407546460641f47950451b16","9856095f7afb5a607bf5e65077615ed91273508c"],"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}