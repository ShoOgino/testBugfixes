{"path":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#nextValidUTF16String(UTF16Result).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#nextValidUTF16String(UTF16Result).mjava","pathOld":"/dev/null","sourceNew":"  public static void nextValidUTF16String(UTF16Result s) {\n    final int size = s.length;\n    for (int i = 0; i < size; i++) {\n      char ch = s.result[i];\n      if (ch >= UnicodeUtil.UNI_SUR_HIGH_START\n          && ch <= UnicodeUtil.UNI_SUR_HIGH_END) {\n        if (i < size - 1) {\n          i++;\n          char nextCH = s.result[i];\n          if (nextCH >= UnicodeUtil.UNI_SUR_LOW_START\n              && nextCH <= UnicodeUtil.UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n          // Unmatched high surrogate\n            if (nextCH < UnicodeUtil.UNI_SUR_LOW_START) { // SMP not enumerated\n              s.setLength(i + 1);\n              s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;             \n              return;\n            } else { // SMP already enumerated\n              if (s.result[i - 1] == UnicodeUtil.UNI_SUR_HIGH_END) {\n                s.result[i - 1] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n                s.setLength(i);               \n              } else {\n                s.result[i - 1]++;\n                s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n                s.setLength(i + 1);\n              }            \n              return;\n            }\n        } else {\n        // Unmatched high surrogate in final position, SMP not yet enumerated\n          s.setLength(i + 2);\n          s.result[i + 1] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n          return;\n        }\n      } else if (ch >= UnicodeUtil.UNI_SUR_LOW_START\n          && ch <= UnicodeUtil.UNI_SUR_LOW_END) {\n      // Unmatched low surrogate, SMP already enumerated\n        s.setLength(i + 1);\n        s.result[i] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#nextValidUTF16String(UTF16Result).mjava","sourceNew":null,"sourceOld":"  public static void nextValidUTF16String(UTF16Result s) {\n    final int size = s.length;\n    for (int i = 0; i < size; i++) {\n      char ch = s.result[i];\n      if (ch >= UnicodeUtil.UNI_SUR_HIGH_START\n          && ch <= UnicodeUtil.UNI_SUR_HIGH_END) {\n        if (i < size - 1) {\n          i++;\n          char nextCH = s.result[i];\n          if (nextCH >= UnicodeUtil.UNI_SUR_LOW_START\n              && nextCH <= UnicodeUtil.UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n          // Unmatched high surrogate\n            if (nextCH < UnicodeUtil.UNI_SUR_LOW_START) { // SMP not enumerated\n              s.setLength(i + 1);\n              s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;             \n              return;\n            } else { // SMP already enumerated\n              if (s.result[i - 1] == UnicodeUtil.UNI_SUR_HIGH_END) {\n                s.result[i - 1] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n                s.setLength(i);               \n              } else {\n                s.result[i - 1]++;\n                s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n                s.setLength(i + 1);\n              }            \n              return;\n            }\n        } else {\n        // Unmatched high surrogate in final position, SMP not yet enumerated\n          s.setLength(i + 2);\n          s.result[i + 1] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n          return;\n        }\n      } else if (ch >= UnicodeUtil.UNI_SUR_LOW_START\n          && ch <= UnicodeUtil.UNI_SUR_LOW_END) {\n      // Unmatched low surrogate, SMP already enumerated\n        s.setLength(i + 1);\n        s.result[i] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#nextValidUTF16String(UTF16Result).mjava","sourceNew":null,"sourceOld":"  public static void nextValidUTF16String(UTF16Result s) {\n    final int size = s.length;\n    for (int i = 0; i < size; i++) {\n      char ch = s.result[i];\n      if (ch >= UnicodeUtil.UNI_SUR_HIGH_START\n          && ch <= UnicodeUtil.UNI_SUR_HIGH_END) {\n        if (i < size - 1) {\n          i++;\n          char nextCH = s.result[i];\n          if (nextCH >= UnicodeUtil.UNI_SUR_LOW_START\n              && nextCH <= UnicodeUtil.UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n          // Unmatched high surrogate\n            if (nextCH < UnicodeUtil.UNI_SUR_LOW_START) { // SMP not enumerated\n              s.setLength(i + 1);\n              s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;             \n              return;\n            } else { // SMP already enumerated\n              if (s.result[i - 1] == UnicodeUtil.UNI_SUR_HIGH_END) {\n                s.result[i - 1] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n                s.setLength(i);               \n              } else {\n                s.result[i - 1]++;\n                s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n                s.setLength(i + 1);\n              }            \n              return;\n            }\n        } else {\n        // Unmatched high surrogate in final position, SMP not yet enumerated\n          s.setLength(i + 2);\n          s.result[i + 1] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n          return;\n        }\n      } else if (ch >= UnicodeUtil.UNI_SUR_LOW_START\n          && ch <= UnicodeUtil.UNI_SUR_LOW_END) {\n      // Unmatched low surrogate, SMP already enumerated\n        s.setLength(i + 1);\n        s.result[i] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#nextValidUTF16String(UTF16Result).mjava","sourceNew":null,"sourceOld":"  public static void nextValidUTF16String(UTF16Result s) {\n    final int size = s.length;\n    for (int i = 0; i < size; i++) {\n      char ch = s.result[i];\n      if (ch >= UnicodeUtil.UNI_SUR_HIGH_START\n          && ch <= UnicodeUtil.UNI_SUR_HIGH_END) {\n        if (i < size - 1) {\n          i++;\n          char nextCH = s.result[i];\n          if (nextCH >= UnicodeUtil.UNI_SUR_LOW_START\n              && nextCH <= UnicodeUtil.UNI_SUR_LOW_END) {\n            // Valid surrogate pair\n          } else\n          // Unmatched high surrogate\n            if (nextCH < UnicodeUtil.UNI_SUR_LOW_START) { // SMP not enumerated\n              s.setLength(i + 1);\n              s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;             \n              return;\n            } else { // SMP already enumerated\n              if (s.result[i - 1] == UnicodeUtil.UNI_SUR_HIGH_END) {\n                s.result[i - 1] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n                s.setLength(i);               \n              } else {\n                s.result[i - 1]++;\n                s.result[i] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n                s.setLength(i + 1);\n              }            \n              return;\n            }\n        } else {\n        // Unmatched high surrogate in final position, SMP not yet enumerated\n          s.setLength(i + 2);\n          s.result[i + 1] = (char) UnicodeUtil.UNI_SUR_LOW_START;\n          return;\n        }\n      } else if (ch >= UnicodeUtil.UNI_SUR_LOW_START\n          && ch <= UnicodeUtil.UNI_SUR_LOW_END) {\n      // Unmatched low surrogate, SMP already enumerated\n        s.setLength(i + 1);\n        s.result[i] = (char) (UnicodeUtil.UNI_SUR_LOW_END + 1);\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}