{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","commits":[{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object]).mjava","sourceNew":"  public Replica(String name, Map<String,Object> propMap, String collection, String slice) {\n    super(propMap);\n    this.collection = collection;\n    this.slice = slice;\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n  }\n\n","sourceOld":"  public Replica(String name, Map<String,Object> propMap) {\n    super(propMap);\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object]).mjava","sourceNew":"  public Replica(String name, Map<String,Object> propMap, String collection, String slice) {\n    super(propMap);\n    this.collection = collection;\n    this.slice = slice;\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n  }\n\n","sourceOld":"  public Replica(String name, Map<String,Object> propMap) {\n    super(propMap);\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","sourceNew":"  public Replica(String name, Map<String,Object> propMap, String collection, String slice) {\n    super(propMap);\n    this.collection = collection;\n    this.slice = slice;\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    this.core = (String) propMap.get(ZkStateReader.CORE_NAME_PROP);\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n    Objects.requireNonNull(this.collection, \"'collection' must not be null\");\n    Objects.requireNonNull(this.slice, \"'slice' must not be null\");\n    Objects.requireNonNull(this.name, \"'name' must not be null\");\n    Objects.requireNonNull(this.nodeName, \"'node_name' must not be null\");\n    Objects.requireNonNull(this.core, \"'core' must not be null\");\n    Objects.requireNonNull(this.type, \"'type' must not be null\");\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n  }\n\n","sourceOld":"  public Replica(String name, Map<String,Object> propMap, String collection, String slice) {\n    super(propMap);\n    this.collection = collection;\n    this.slice = slice;\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#Replica(String,Map[String,Object],String,String).mjava","sourceNew":"  public Replica(String name, Map<String,Object> map, String collection, String shard) {\n    super(new HashMap<>());\n    propMap.putAll(map);\n    this.collection = collection;\n    this.shard = shard;\n    this.name = name;\n    this.node = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    this.core = (String) propMap.get(ZkStateReader.CORE_NAME_PROP);\n    this.type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n    // default to ACTIVE\n    this.state = State.getState(String.valueOf(propMap.getOrDefault(ZkStateReader.STATE_PROP, State.ACTIVE.toString())));\n    validate();\n  }\n\n","sourceOld":"  public Replica(String name, Map<String,Object> propMap, String collection, String slice) {\n    super(propMap);\n    this.collection = collection;\n    this.slice = slice;\n    this.name = name;\n    this.nodeName = (String) propMap.get(ZkStateReader.NODE_NAME_PROP);\n    this.core = (String) propMap.get(ZkStateReader.CORE_NAME_PROP);\n    type = Type.get((String) propMap.get(ZkStateReader.REPLICA_TYPE));\n    Objects.requireNonNull(this.collection, \"'collection' must not be null\");\n    Objects.requireNonNull(this.slice, \"'slice' must not be null\");\n    Objects.requireNonNull(this.name, \"'name' must not be null\");\n    Objects.requireNonNull(this.nodeName, \"'node_name' must not be null\");\n    Objects.requireNonNull(this.core, \"'core' must not be null\");\n    Objects.requireNonNull(this.type, \"'type' must not be null\");\n    if (propMap.get(ZkStateReader.STATE_PROP) != null) {\n      this.state = State.getState((String) propMap.get(ZkStateReader.STATE_PROP));\n    } else {\n      this.state = State.ACTIVE;                         //Default to ACTIVE\n      propMap.put(ZkStateReader.STATE_PROP, state.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6681d02f2302c363be938426e68f8dfd090cc1bf"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}