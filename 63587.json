{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#firstChild(boolean,boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws Exception {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws Exception {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws Exception {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}