{"path":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","pathOld":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":null,"sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}