{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.docCount + si2.docCount, -1, merged,\n                                               false, null, false, 0, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63caed6eb28209e181e97822c4c8fdf808884c3b","date":1337712793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00f06a4178989089b29a77d6dce7c86dfb8b6931","date":1337729247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               merged, MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e84d639980c2b2eb5d41330d5ff68d143239495","date":1337729749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.Builder(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f6a6419266ce0a74e9f1501938a86a4c94d5af7","date":1337731230,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(), -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.docCount + si2.info.docCount, -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16cbef32b882ec68df422af3f08845ec82620335","date":1337802266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(), -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, 10000, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(), -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a917aca07a305ab70118a83e84d931503441271","date":1337826487,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, -1, merged, false, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(), -1, merged,\n                                               false, null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, null, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               null, false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, null, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n                                               MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentCommitInfo,SegmentCommitInfo,String,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfoPerCommit,SegmentInfoPerCommit,String,boolean).mjava","sourceNew":"   private SegmentCommitInfo merge(Directory dir, SegmentCommitInfo si1, SegmentCommitInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentCommitInfo(info, 0, -1L, -1L);\n   }\n\n","sourceOld":"   private SegmentInfoPerCommit merge(Directory dir, SegmentInfoPerCommit si1, SegmentInfoPerCommit si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random());\n      SegmentReader r1 = new SegmentReader(si1, context);\n      SegmentReader r2 = new SegmentReader(si2, context);\n\n      final Codec codec = Codec.getDefault();\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(si1.info.dir);\n      final SegmentInfo si = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged, -1, false, codec, null);\n\n      SegmentMerger merger = new SegmentMerger(Arrays.<AtomicReader>asList(r1, r2),\n          si, InfoStream.getDefault(), trackingDir,\n          MergeState.CheckAbort.NONE, new FieldInfos.FieldNumbers(), context);\n\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final SegmentInfo info = new SegmentInfo(si1.info.dir, Constants.LUCENE_MAIN_VERSION, merged,\n                                               si1.info.getDocCount() + si2.info.getDocCount(),\n                                               false, codec, null);\n      info.setFiles(new HashSet<String>(trackingDir.getCreatedFiles()));\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(InfoStream.getDefault(), dir, MergeState.CheckAbort.NONE, info, newIOContext(random()));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) {\n          si1.info.dir.deleteFile(fileToDelete);\n        }\n      }\n\n      return new SegmentInfoPerCommit(info, 0, -1L, -1L);\n   }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a45bec74b98f6fc05f52770cfb425739e6563960"],"00f06a4178989089b29a77d6dce7c86dfb8b6931":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["77f264c55cbf75404f8601ae7290d69157273a56"],"0f6a6419266ce0a74e9f1501938a86a4c94d5af7":["4e84d639980c2b2eb5d41330d5ff68d143239495"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"6a917aca07a305ab70118a83e84d931503441271":["16cbef32b882ec68df422af3f08845ec82620335"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"a45bec74b98f6fc05f52770cfb425739e6563960":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["6a917aca07a305ab70118a83e84d931503441271"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"16cbef32b882ec68df422af3f08845ec82620335":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["bc124b3b129ef11a255212f3af482b771c5b3a6c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","764b942fd30efcae6e532c19771f32eeeb0037b2"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"77f264c55cbf75404f8601ae7290d69157273a56":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4e84d639980c2b2eb5d41330d5ff68d143239495":["00f06a4178989089b29a77d6dce7c86dfb8b6931"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["0f6a6419266ce0a74e9f1501938a86a4c94d5af7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["77f264c55cbf75404f8601ae7290d69157273a56"],"00f06a4178989089b29a77d6dce7c86dfb8b6931":["4e84d639980c2b2eb5d41330d5ff68d143239495"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f6a6419266ce0a74e9f1501938a86a4c94d5af7":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"6a917aca07a305ab70118a83e84d931503441271":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a45bec74b98f6fc05f52770cfb425739e6563960":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"16cbef32b882ec68df422af3f08845ec82620335":["6a917aca07a305ab70118a83e84d931503441271"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["00f06a4178989089b29a77d6dce7c86dfb8b6931"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"77f264c55cbf75404f8601ae7290d69157273a56":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"4e84d639980c2b2eb5d41330d5ff68d143239495":["0f6a6419266ce0a74e9f1501938a86a4c94d5af7"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["16cbef32b882ec68df422af3f08845ec82620335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}