{"path":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","commits":[{"id":"781849b9287fb55f17208578ce7509cdb0d10fec","date":1101244069,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","pathOld":"/dev/null","sourceNew":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b8e7beed03e44332d4a604c53962e7d34ea17","date":1255278355,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","pathOld":"/dev/null","sourceNew":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestNumberTools#subtestTwoLongs(long,long).mjava","sourceNew":null,"sourceOld":"    private static void subtestTwoLongs(long i, long j) {\n        // convert to strings\n        String a = NumberTools.longToString(i);\n        String b = NumberTools.longToString(j);\n\n        // are they the right length?\n        assertEquals(NumberTools.STR_SIZE, a.length());\n        assertEquals(NumberTools.STR_SIZE, b.length());\n\n        // are they the right order?\n        if (i < j) {\n            assertTrue(a.compareTo(b) < 0);\n        } else if (i > j) {\n            assertTrue(a.compareTo(b) > 0);\n        } else {\n            assertEquals(a, b);\n        }\n\n        // can we convert them back to longs?\n        long i2 = NumberTools.stringToLong(a);\n        long j2 = NumberTools.stringToLong(b);\n\n        assertEquals(i, i2);\n        assertEquals(j, j2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["781849b9287fb55f17208578ce7509cdb0d10fec"],"781849b9287fb55f17208578ce7509cdb0d10fec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["781849b9287fb55f17208578ce7509cdb0d10fec","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a61b8e7beed03e44332d4a604c53962e7d34ea17"]},"commit2Childs":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"781849b9287fb55f17208578ce7509cdb0d10fec":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781849b9287fb55f17208578ce7509cdb0d10fec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}