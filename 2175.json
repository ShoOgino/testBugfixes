{"path":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","commits":[{"id":"46dfcd540005e76a7db876d494ac74e82c476523","date":1229095104,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eecdad1988b0b00f74f945528b689ef1eebf763d","date":1247586785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        //TODO: error or log?\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#transformValue(String,SchemaField).mjava","sourceNew":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}\n   * <p/>\n   * This implementation only formats dates using the {@link org.apache.solr.common.util.DateUtil}.\n   *\n   * @param val    The value to transform\n   * @param schFld The {@link org.apache.solr.schema.SchemaField}\n   * @return The potentially new value.\n   */\n  protected String transformValue(String val, SchemaField schFld) {\n    String result = val;\n    if (schFld != null && schFld.getType() instanceof DateField) {\n      //try to transform the date\n      try {\n        Date date = DateUtil.parseDate(val, dateFormats);\n        DateFormat df = DateUtil.getThreadLocalDateFormat();\n        result = df.format(date);\n\n      } catch (Exception e) {\n        // Let the specific fieldType handle errors\n        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid value: \" + val + \" for field: \" + schFld, e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eecdad1988b0b00f74f945528b689ef1eebf763d":["46dfcd540005e76a7db876d494ac74e82c476523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"46dfcd540005e76a7db876d494ac74e82c476523":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eecdad1988b0b00f74f945528b689ef1eebf763d":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["46dfcd540005e76a7db876d494ac74e82c476523"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"46dfcd540005e76a7db876d494ac74e82c476523":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}