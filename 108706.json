{"path":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","commits":[{"id":"9d9916984e99244c407152f6cfc2c3bf89a30bc8","date":1284760018,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[MultiCollector]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f4ffb7cadeccbb9cb8b5eb75cec5b3d480497f","date":1288298299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // Doing this before ValueFiller and HashMap are executed\n    // This allows us to exit this method asap when a doc is not competitive\n    // As it turns out this happens most of the times.\n    if (groupsFull) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // These next two statements are expensive\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        groupsFull = true;\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dacaa3370b72aee45853c48094aca3a6352f65a","date":1288355806,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // Doing this before ValueFiller and HashMap are executed\n    // This allows us to exit this method asap when a doc is not competitive\n    // As it turns out this happens most of the times.\n    if (groupsFull) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // These next two statements are expensive\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        groupsFull = true;\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a","date":1288363353,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5","date":1289793427,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e368cad6a1cc3992f44375801ea528f49b542e","date":1290206535,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      assert orderedGroups.size() == nGroups -1;\n\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n      assert orderedGroups.size() == nGroups;\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == nGroups-1;\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == nGroups;\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      assert orderedGroups.size() == nGroups -1;\n\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n      assert orderedGroups.size() == nGroups;\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == nGroups-1;\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == nGroups;\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      assert orderedGroups.size() == nGroups -1;\n\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n      assert orderedGroups.size() == nGroups;\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == nGroups-1;\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == nGroups;\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      assert orderedGroups.size() == nGroups -1;\n\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n      assert orderedGroups.size() == nGroups;\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == nGroups-1;\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == nGroups;\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#collect(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n\n    // if orderedGroups != null, then we already have collected N groups and\n    // can short circuit by comparing this document to the smallest group\n    // without having to even find what group this document belongs to.\n    // Even if this document belongs to a group in the top N, we know that\n    // we don't have to update that group.\n    //\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        groupMap.put(sg.groupValue, sg);\n        if (groupMap.size() == nGroups) {\n          buildSet();\n        }\n        return;\n      }\n\n      // we already tested that the document is competitive, so replace\n      // the smallest group with this new group.\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      assert orderedGroups.size() == nGroups -1;\n\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n      assert orderedGroups.size() == nGroups;\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = comparators[i];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[i] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j=i+1; j<comparators.length; j++)\n          comparators[j].copy(spareSlot, doc);\n        break;\n      } else if (i == comparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    SearchGroup prevLast = null;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == nGroups-1;\n    }\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == nGroups;\n      SearchGroup newLast = orderedGroups.last();\n      // if we changed the value of the last group, or changed which group was last, then update bottom\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators)\n          fc.setBottom(newLast.comparatorSlot);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a":["4dacaa3370b72aee45853c48094aca3a6352f65a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43e368cad6a1cc3992f44375801ea528f49b542e"],"c8f4ffb7cadeccbb9cb8b5eb75cec5b3d480497f":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43e368cad6a1cc3992f44375801ea528f49b542e":["d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5"],"d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5":["61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["43e368cad6a1cc3992f44375801ea528f49b542e","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["43e368cad6a1cc3992f44375801ea528f49b542e"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["9d9916984e99244c407152f6cfc2c3bf89a30bc8","61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a"],"4dacaa3370b72aee45853c48094aca3a6352f65a":["c8f4ffb7cadeccbb9cb8b5eb75cec5b3d480497f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","43e368cad6a1cc3992f44375801ea528f49b542e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"]},"commit2Childs":{"61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a":["d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c8f4ffb7cadeccbb9cb8b5eb75cec5b3d480497f":["4dacaa3370b72aee45853c48094aca3a6352f65a"],"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["c8f4ffb7cadeccbb9cb8b5eb75cec5b3d480497f","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"d0a5b8bd6b679a8e5eea1efd58a0d08152b0dea5":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","43e368cad6a1cc3992f44375801ea528f49b542e"],"43e368cad6a1cc3992f44375801ea528f49b542e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7edfc3f7caa7b49a18fe367692768b33b018e9db","9c7cdfe5a1ea9db97faa404b251fa644faa73597","3bb13258feba31ab676502787ab2e1779f129b7a"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"4dacaa3370b72aee45853c48094aca3a6352f65a":["61a8b9d6de8725e580bd3ee1cf5e47adb322cd1a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7edfc3f7caa7b49a18fe367692768b33b018e9db","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}