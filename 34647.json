{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","commits":[{"id":"b102459ba40f8bc6d609b2058019db7485f7ed67","date":1291773722,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.optimize(); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    IndexReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    IndexReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir, iwc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    DirectoryReader nrtReader = writer.getReader();\n    assertTrue(nrtReader.isCurrent());\n    writer.addDocument(doc);\n    assertFalse(nrtReader.isCurrent()); // should see the changes\n    writer.forceMerge(1); // make sure we don't have a merge going on\n    assertFalse(nrtReader.isCurrent());\n    nrtReader.close();\n    \n    DirectoryReader dirReader = IndexReader.open(dir);\n    nrtReader = writer.getReader();\n    \n    assertTrue(dirReader.isCurrent());\n    assertTrue(nrtReader.isCurrent()); // nothing was committed yet so we are still current\n    assertEquals(2, nrtReader.maxDoc()); // sees the actual document added\n    assertEquals(1, dirReader.maxDoc());\n    writer.close(); // close is actually a commit both should see the changes\n    assertTrue(nrtReader.isCurrent()); \n    assertFalse(dirReader.isCurrent()); // this reader has been opened before the writer was closed / committed\n    \n    dirReader.close();\n    nrtReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b102459ba40f8bc6d609b2058019db7485f7ed67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b102459ba40f8bc6d609b2058019db7485f7ed67"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b102459ba40f8bc6d609b2058019db7485f7ed67"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b102459ba40f8bc6d609b2058019db7485f7ed67","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b102459ba40f8bc6d609b2058019db7485f7ed67":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b102459ba40f8bc6d609b2058019db7485f7ed67","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}