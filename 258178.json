{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testDenseWithGap() throws Exception {\n    //words.addAll(Arrays.asList(\"apple\", \"berry\", \"cherry\", \"damson\", \"fig\", \"grape\"));\n    words.addAll(Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\"));\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(words, true));\n    for (String word : words) {\n      assertNotNull(word + \" not found\", fstEnum.seekExact(new BytesRef(word)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a1204a92958bea883656169000a87a6c55c2d0","date":1562106073,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    //words.addAll(Arrays.asList(\"apple\", \"berry\", \"cherry\", \"damson\", \"fig\", \"grape\"));\n    words.addAll(Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\"));\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(words));\n    for (String word : words) {\n      assertNotNull(word + \" not found\", fstEnum.seekExact(new BytesRef(word)));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    //words.addAll(Arrays.asList(\"apple\", \"berry\", \"cherry\", \"damson\", \"fig\", \"grape\"));\n    words.addAll(Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\"));\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(words, true));\n    for (String word : words) {\n      assertNotNull(word + \" not found\", fstEnum.seekExact(new BytesRef(word)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd2f2532659e458b6f27a7635d90f1977e99c89","date":1564491376,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(\"ascii\")));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    //words.addAll(Arrays.asList(\"apple\", \"berry\", \"cherry\", \"damson\", \"fig\", \"grape\"));\n    words.addAll(Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\"));\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(words));\n    for (String word : words) {\n      assertNotNull(word + \" not found\", fstEnum.seekExact(new BytesRef(word)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(\"ascii\")));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    //words.addAll(Arrays.asList(\"apple\", \"berry\", \"cherry\", \"damson\", \"fig\", \"grape\"));\n    words.addAll(Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\"));\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(words));\n    for (String word : words) {\n      assertNotNull(word + \" not found\", fstEnum.seekExact(new BytesRef(word)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(StandardCharsets.US_ASCII)));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(\"ascii\")));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59a1204a92958bea883656169000a87a6c55c2d0":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["9cd2f2532659e458b6f27a7635d90f1977e99c89"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9cd2f2532659e458b6f27a7635d90f1977e99c89":["59a1204a92958bea883656169000a87a6c55c2d0"],"f8061ddd97f3352007d927dae445884a6f3d857b":["59a1204a92958bea883656169000a87a6c55c2d0","9cd2f2532659e458b6f27a7635d90f1977e99c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"59a1204a92958bea883656169000a87a6c55c2d0":["9cd2f2532659e458b6f27a7635d90f1977e99c89","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["59a1204a92958bea883656169000a87a6c55c2d0"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9cd2f2532659e458b6f27a7635d90f1977e99c89":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}