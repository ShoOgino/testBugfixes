{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","commits":[{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d08eb5e0605b54669b5498a5a5db3502fc932b","date":1511883595,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      if (log.isWarnEnabled()) {\n        log.warn(\"Not initializing shard reporter for non-cloud core {}\", core.getName());\n      }\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period={}, not starting shard reporter \", period);\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core {}, not starting the reporter...\", core);\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core {}\", core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period={}, not starting shard reporter \", period);\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core {}, not starting the reporter...\", core);\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      if (log.isWarnEnabled()) {\n        log.warn(\"Not initializing shard reporter for non-cloud core {}\", core.getName());\n      }\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period={}, not starting shard reporter \", period);\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core {}, not starting the reporter...\", core);\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core {}\", core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period={}, not starting shard reporter \", period);\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core {}, not starting the reporter...\", core);\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getSolrClientCache(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo, core);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core {}\", core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period={}, not starting shard reporter \", period);\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core {}, not starting the reporter...\", core);\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f90f26c648df8320685eb76fec8bb9972e1994c4","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["575e66bd4b2349209027f6801184da7fc3cba13f"],"3646ead588297558973dbd1162e69791e822b944":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"9df8125ba9193a2e2e285ed92157810b1952a244":["3646ead588297558973dbd1162e69791e822b944"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["3646ead588297558973dbd1162e69791e822b944"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3646ead588297558973dbd1162e69791e822b944":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"575e66bd4b2349209027f6801184da7fc3cba13f":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["1aad05eeff7818b0833c02ac6b743aa72054963b","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}