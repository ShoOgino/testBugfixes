{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","commits":[{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  final Automaton toLevenshteinAutomata(Automaton automaton) {\n    // nocommit: how slow can this be :)\n    Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // nocommit: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","date":1350576194,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  final Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","sourceOld":"  final Automaton toLevenshteinAutomata(Automaton automaton) {\n    // nocommit: how slow can this be :)\n    Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // nocommit: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e70d31b054fdad6f9d128fd421df6506f724b91","date":1350995421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","sourceOld":"  final Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"673d1479bcc124ba45b876b686d19f67435bca90","date":1351013999,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        // nocommit i think we should pass 254 max?  ie\n        // exclude 0xff ... this way we can't 'edit away'\n        // the sep?  or ... maybe we want to allow that to\n        // be edited away?\n        // nocommit also the 0 byte ... we use that as\n        // trailer ... we probably shouldn't allow that byte\n        // to be edited (we could add alphaMin?)\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    // nocommit maybe we should reduce the LevN?  the added\n    // arcs add cost during intersect (extra FST arc\n    // lookups...).  could be net win...\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 256, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba222c174ec1943d8d14d012d1d6e24a1cc4972","date":1351522220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, allowSepEdit ? 255 : 254, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      // Does not seem to help (and hurt maybe a bit: 6-9\n      // prefix went from 19 to 18 kQPS):\n      // a.reduce();\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= minPrefix) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, minPrefix);\n        int ints[] = new int[path.length-minPrefix];\n        System.arraycopy(path.ints, path.offset+minPrefix, ints, 0, ints.length);\n        // nocommit i think we should pass 254 max?  ie\n        // exclude 0xff ... this way we can't 'edit away'\n        // the sep?  or ... maybe we want to allow that to\n        // be edited away?\n        // nocommit also the 0 byte ... we use that as\n        // trailer ... we probably shouldn't allow that byte\n        // to be edited (we could add alphaMin?)\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    // nocommit maybe we should reduce the LevN?  the added\n    // arcs add cost during intersect (extra FST arc\n    // lookups...).  could be net win...\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b5edc7f41e0c481513ce8881696e3e042ff493","date":1351528983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      // Does not seem to help (and hurt maybe a bit: 6-9\n      // prefix went from 19 to 18 kQPS):\n      // a.reduce();\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, allowSepEdit ? 255 : 254, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      // Does not seem to help (and hurt maybe a bit: 6-9\n      // prefix went from 19 to 18 kQPS):\n      // a.reduce();\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      // Does not seem to help (and hurt maybe a bit: 6-9\n      // prefix went from 19 to 18 kQPS):\n      // a.reduce();\n      return a;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92b24fa85ce6cf9517f477a455c560bdb6fcfddd","date":1351956024,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      // Does not seem to help (and hurt maybe a bit: 6-9\n      // prefix went from 19 to 18 kQPS):\n      // a.reduce();\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"281940c6c83f172f9d70f4d0c0f9cdd9dc85c634","date":1351957404,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      return subs[0];\n    } else {\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","date":1374158194,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        LightAutomaton prefix = BasicAutomata.makeStringLight(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        LightAutomaton levAutomaton = lev.toLightAutomaton(maxEdits);\n        LightAutomaton combined = BasicOperations.concatenateLight(prefix, levAutomaton);\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a);\n    }\n  }\n\n","sourceOld":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a);\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    List<Automaton> subs = new ArrayList<>();\n    FiniteStringsIterator finiteStrings = new FiniteStringsIterator(automaton);\n    for (IntsRef string; (string = finiteStrings.next()) != null;) {\n      if (string.length <= nonFuzzyPrefix || string.length < minFuzzyLength) {\n        subs.add(Automata.makeString(string.ints, string.offset, string.length));\n      } else {\n        int ints[] = new int[string.length-nonFuzzyPrefix];\n        System.arraycopy(string.ints, string.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs.add(lev.toAutomaton(maxEdits, UnicodeUtil.newString(string.ints, string.offset, nonFuzzyPrefix)));\n      }\n    }\n\n    if (subs.isEmpty()) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.size() == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs.get(0);\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(subs);\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"],"92b24fa85ce6cf9517f477a455c560bdb6fcfddd":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["281940c6c83f172f9d70f4d0c0f9cdd9dc85c634"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"673d1479bcc124ba45b876b686d19f67435bca90":["1e70d31b054fdad6f9d128fd421df6506f724b91"],"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"281940c6c83f172f9d70f4d0c0f9cdd9dc85c634":["92b24fa85ce6cf9517f477a455c560bdb6fcfddd"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","31b5edc7f41e0c481513ce8881696e3e042ff493"],"cc41b743423981e7ec17a024ce7e107096e472fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["673d1479bcc124ba45b876b686d19f67435bca90"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["75ac8571c2d82c574e446c3729251b994c69a55c"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["281940c6c83f172f9d70f4d0c0f9cdd9dc85c634"],"1e70d31b054fdad6f9d128fd421df6506f724b91":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"5c84485629d80d203608e8975a1139de9933cc38":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["cc41b743423981e7ec17a024ce7e107096e472fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"92b24fa85ce6cf9517f477a455c560bdb6fcfddd":["281940c6c83f172f9d70f4d0c0f9cdd9dc85c634"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["75ac8571c2d82c574e446c3729251b994c69a55c","5c84485629d80d203608e8975a1139de9933cc38"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"673d1479bcc124ba45b876b686d19f67435bca90":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"281940c6c83f172f9d70f4d0c0f9cdd9dc85c634":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["92b24fa85ce6cf9517f477a455c560bdb6fcfddd"],"cc41b743423981e7ec17a024ce7e107096e472fe":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"1e70d31b054fdad6f9d128fd421df6506f724b91":["673d1479bcc124ba45b876b686d19f67435bca90"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["1e70d31b054fdad6f9d128fd421df6506f724b91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}