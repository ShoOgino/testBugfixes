{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    \n    SolrParams required = params.required();\n    String path = required.get(\"path\");\n    String shard = params.get(\"shard\");\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    if (shard != null) {\n      List<ZkCoreNodeProps> replicas = zkController.getZkStateReader().getReplicaProps(\n          collection, shard, zkController.getNodeName(), core.getName());\n      \n      for (ZkCoreNodeProps node : replicas) {\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.getCoreUrl() + path);\n        QueryRequest qr = new QueryRequest();\n        server.request(qr);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    \n    SolrParams required = params.required();\n    String path = required.get(\"path\");\n    String shard = params.get(\"shard\");\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    if (shard != null) {\n      List<ZkCoreNodeProps> replicas = zkController.getZkStateReader().getReplicaProps(\n          collection, shard, zkController.getNodeName(), core.getName());\n      \n      for (ZkCoreNodeProps node : replicas) {\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.getCoreUrl() + path);\n        QueryRequest qr = new QueryRequest();\n        server.request(qr);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    \n    SolrParams required = params.required();\n    String path = required.get(\"path\");\n    String shard = params.get(\"shard\");\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    if (shard != null) {\n      List<ZkCoreNodeProps> replicas = zkController.getZkStateReader().getReplicaProps(\n          collection, shard, zkController.getNodeName(), core.getName());\n      \n      for (ZkCoreNodeProps node : replicas) {\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.getCoreUrl() + path);\n        QueryRequest qr = new QueryRequest();\n        server.request(qr);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c3e002fb4f86b6970ff23bcecc7c537f48cb358","date":1330406779,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.get(ZkStateReader.BASE_URL_PROP));\n\n          server.request(new CoreAdminRequest() {\n            {\n              action = CoreAdminAction.valueOf(subAction);\n              setCoreName(node.get(ZkStateReader.CORE_NAME_PROP));\n            }\n            \n            @Override\n            public SolrParams getParams() {\n              SolrParams superParams = super.getParams();\n              newParams.add(superParams);\n              return newParams;\n            }\n          });\n        }\n      }\n    }\n \n\n    \n  }\n\n","sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    \n    SolrParams required = params.required();\n    String path = required.get(\"path\");\n    String shard = params.get(\"shard\");\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    if (shard != null) {\n      List<ZkCoreNodeProps> replicas = zkController.getZkStateReader().getReplicaProps(\n          collection, shard, zkController.getNodeName(), core.getName());\n      \n      for (ZkCoreNodeProps node : replicas) {\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.getCoreUrl() + path);\n        QueryRequest qr = new QueryRequest();\n        server.request(qr);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a079bf6d30b695544032d2db1bbdad8da1a5c36","date":1330464594,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP) + \"/admin/cores\";\n          ShardRequest sreq = new ShardRequest();\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      Throwable e = srsp.getException();\n      if (e != null) {\n        log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n      }\n    } while(srsp != null);\n    \n  }\n\n","sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.get(ZkStateReader.BASE_URL_PROP));\n\n          server.request(new CoreAdminRequest() {\n            {\n              action = CoreAdminAction.valueOf(subAction);\n              setCoreName(node.get(ZkStateReader.CORE_NAME_PROP));\n            }\n            \n            @Override\n            public SolrParams getParams() {\n              SolrParams superParams = super.getParams();\n              newParams.add(superParams);\n              return newParams;\n            }\n          });\n        }\n      }\n    }\n \n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8670692cde56a40cc41cc076fb7464fd5d071297","date":1330467929,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          newParams.set(\"qt\", \"/admin/cores\");\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while(srsp != null);\n    \n  }\n\n","sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP) + \"/admin/cores\";\n          ShardRequest sreq = new ShardRequest();\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      Throwable e = srsp.getException();\n      if (e != null) {\n        log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n      }\n    } while(srsp != null);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          newParams.set(\"qt\", \"/admin/cores\");\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while(srsp != null);\n    \n  }\n\n","sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    \n    SolrParams required = params.required();\n    String path = required.get(\"path\");\n    String shard = params.get(\"shard\");\n    String collection = required.get(\"collection\");\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    if (shard != null) {\n      List<ZkCoreNodeProps> replicas = zkController.getZkStateReader().getReplicaProps(\n          collection, shard, zkController.getNodeName(), core.getName());\n      \n      for (ZkCoreNodeProps node : replicas) {\n        CommonsHttpSolrServer server = new CommonsHttpSolrServer(node.getCoreUrl() + path);\n        QueryRequest qr = new QueryRequest();\n        server.request(qr);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#deleteCollection(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private boolean deleteCollection(CloudState cloudState, ZkNodeProps message) {\n    \n    String name = message.get(\"name\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n    \n    Map<String,Slice> slices = cloudState.getCollectionStates().get(name);\n    \n    if (slices == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Could not find collection:\" + name);\n    }\n    \n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          params.set(CoreAdminParams.CORE, name);\n          params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n\n          String replica = node.get(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          // yes, they must use same admin handler path everywhere...\n          params.set(\"qt\", adminPath);\n\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = params;\n          \n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    int failed = 0;\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          // should we retry?\n          // TODO: we should return errors to the client\n          // TODO: what if one fails and others succeed?\n          failed++;\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while (srsp != null);\n\n    \n    // if all calls succeeded, return true\n    if (failed > 0) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          newParams.set(\"qt\", \"/admin/cores\");\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while(srsp != null);\n    \n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleDistribUrlAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  protected void handleDistribUrlAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    // TODO: finish this and tests\n    SolrParams params = req.getParams();\n    final ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n    newParams.remove(\"action\");\n    \n    SolrParams required = params.required();\n    final String subAction = required.get(\"subAction\");\n\n    String collection = required.get(\"collection\");\n    \n    newParams.set(CoreAdminParams.ACTION, subAction);\n\n    \n    SolrCore core = req.getCore();\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer()\n        .getZkController();\n    \n    CloudState cloudState = zkController.getCloudState();\n    Map<String,Slice> slices = cloudState.getCollectionStates().get(collection);\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,ZkNodeProps> shards = slice.getShards();\n      Set<Map.Entry<String,ZkNodeProps>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,ZkNodeProps> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (cloudState.liveNodesContain(node.get(ZkStateReader.NODE_NAME_PROP))) {\n          newParams.set(CoreAdminParams.CORE, node.get(ZkStateReader.CORE_NAME_PROP));\n          String replica = node.get(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          newParams.set(\"qt\", \"/admin/cores\");\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\"))\n            replica = replica.substring(7);\n          sreq.shards = new String[]{replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = newParams;\n\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while(srsp != null);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33d0ed80b7b47e34ad3ff033a77544563aba3085":["8670692cde56a40cc41cc076fb7464fd5d071297"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","8670692cde56a40cc41cc076fb7464fd5d071297"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8670692cde56a40cc41cc076fb7464fd5d071297","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8670692cde56a40cc41cc076fb7464fd5d071297":["7a079bf6d30b695544032d2db1bbdad8da1a5c36"],"7a079bf6d30b695544032d2db1bbdad8da1a5c36":["5c3e002fb4f86b6970ff23bcecc7c537f48cb358"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"5c3e002fb4f86b6970ff23bcecc7c537f48cb358":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"33d0ed80b7b47e34ad3ff033a77544563aba3085":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5c3e002fb4f86b6970ff23bcecc7c537f48cb358"],"8670692cde56a40cc41cc076fb7464fd5d071297":["33d0ed80b7b47e34ad3ff033a77544563aba3085","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7a079bf6d30b695544032d2db1bbdad8da1a5c36":["8670692cde56a40cc41cc076fb7464fd5d071297"],"5c3e002fb4f86b6970ff23bcecc7c537f48cb358":["7a079bf6d30b695544032d2db1bbdad8da1a5c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}