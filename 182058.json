{"path":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","commits":[{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location, using the\n   * provided LockFactory implementation.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @param lockFactory instance of  {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create,\n                                         LockFactory lockFactory, boolean doRemoveOldFiles)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, create, lockFactory, doRemoveOldFiles);\n        DIRECTORIES.put(file, dir);\n      } else {\n\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n\n        if (create) {\n          dir.create(doRemoveOldFiles);\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.  If null, the default\n   *        {@link SimpleFSLockFactory} is used.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n      throws IOException {\n    return getDirectory(file, lockFactory, DEFAULT_DO_SYNC);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.  If null, the default\n   *        {@link SimpleFSLockFactory} is used.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n      throws IOException {\n    return getDirectory(file, lockFactory, DEFAULT_DO_SYNC);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b8a0757fe4354bdc64c82f90886a9284b57833","date":1226690542,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #FSDirectory(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = createCanonicalDir(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = new File(file.getCanonicalPath());\n\n    if (file.exists() && !file.isDirectory())\n      throw new IOException(file + \" not a directory\");\n\n    if (!file.exists())\n      if (!file.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18c35aec8cd0e819e1904c0147e05f7aea15bc4","date":1227961014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #FSDirectory(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = getCanonicalPath(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n        dir.checked = false;\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #FSDirectory(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = createCanonicalDir(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #open(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = getCanonicalPath(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n        dir.checked = false;\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #FSDirectory(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = getCanonicalPath(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n        dir.checked = false;\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,LockFactory).mjava","sourceNew":null,"sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use {@link #open(File, LockFactory)}\n   *\n   * @param file the path to the directory.\n   * @param lockFactory instance of {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, LockFactory lockFactory)\n    throws IOException\n  {\n    file = getCanonicalPath(file);\n\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n        dir.checked = false;\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"b583d3621fe173e7296abcf62f82fb707c901234":["66b12ba4967665216eeb706b58d424c51fb3641a"],"66b12ba4967665216eeb706b58d424c51fb3641a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89b8a0757fe4354bdc64c82f90886a9284b57833":["a015c55424dd37249054283bedc90388bd45358f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["89b8a0757fe4354bdc64c82f90886a9284b57833"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"66b12ba4967665216eeb706b58d424c51fb3641a":["b583d3621fe173e7296abcf62f82fb707c901234"],"a015c55424dd37249054283bedc90388bd45358f":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b12ba4967665216eeb706b58d424c51fb3641a"],"89b8a0757fe4354bdc64c82f90886a9284b57833":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}