{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomAdvance(FieldCreator fieldCreator) throws IOException {\n\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), directory, conf);\n    int numChunks = atLeast(10);\n    int id = 0;\n    Set<Integer> missingSet = new HashSet<>();\n    for(int i=0;i<numChunks;i++) {\n      // change sparseness for each chunk\n      double sparseChance = random().nextDouble();\n      int docCount = atLeast(1000);\n      for(int j=0;j<docCount;j++) {\n        Document doc = new Document();\n        doc.add(new StoredField(\"id\", id));\n        if (random().nextDouble() > sparseChance) {\n          doc.add(fieldCreator.next());\n        } else {\n          missingSet.add(id);\n        }\n        id++;\n        w.addDocument(doc);\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    // Now search the index:\n    IndexReader r = w.getReader();\n    BitSet missing = new FixedBitSet(r.maxDoc());\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      Document doc = r.document(docID);\n      if (missingSet.contains(doc.getField(\"id\").numericValue())) {\n        missing.set(docID);\n      }\n    }\n    \n    for(int iter=0;iter<100;iter++) {\n      DocIdSetIterator values = fieldCreator.iterator(r);\n      assertEquals(-1, values.docID());\n\n      while (true) {\n        int docID;\n        if (random().nextBoolean()) {\n          docID = values.nextDoc();\n        } else {\n          int range;\n          if (random().nextInt(10) == 7) {\n            // big jump\n            range = r.maxDoc()-values.docID();\n          } else {\n            // small jump\n            range = 25;\n          }\n          int inc = TestUtil.nextInt(random(), 1, range);\n          docID = values.advance(values.docID() + inc);\n        }\n        if (docID == NO_MORE_DOCS) {\n          break;\n        }\n        assertFalse(missing.get(docID));\n      }\n    }\n\n    IOUtils.close(r, w, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomAdvance(FieldCreator fieldCreator) throws IOException {\n\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), directory, conf);\n    int numChunks = atLeast(10);\n    int id = 0;\n    Set<Integer> missingSet = new HashSet<>();\n    for(int i=0;i<numChunks;i++) {\n      // change sparseness for each chunk\n      double sparseChance = random().nextDouble();\n      int docCount = atLeast(1000);\n      for(int j=0;j<docCount;j++) {\n        Document doc = new Document();\n        doc.add(new StoredField(\"id\", id));\n        if (random().nextDouble() > sparseChance) {\n          doc.add(fieldCreator.next());\n        } else {\n          missingSet.add(id);\n        }\n        id++;\n        w.addDocument(doc);\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    // Now search the index:\n    IndexReader r = w.getReader();\n    BitSet missing = new FixedBitSet(r.maxDoc());\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      Document doc = r.document(docID);\n      if (missingSet.contains(doc.getField(\"id\").numericValue())) {\n        missing.set(docID);\n      }\n    }\n    \n    for(int iter=0;iter<100;iter++) {\n      DocIdSetIterator values = fieldCreator.iterator(r);\n      assertEquals(-1, values.docID());\n\n      while (true) {\n        int docID;\n        if (random().nextBoolean()) {\n          docID = values.nextDoc();\n        } else {\n          int range;\n          if (random().nextInt(10) == 7) {\n            // big jump\n            range = r.maxDoc()-values.docID();\n          } else {\n            // small jump\n            range = 25;\n          }\n          int inc = TestUtil.nextInt(random(), 1, range);\n          docID = values.advance(values.docID() + inc);\n        }\n        if (docID == NO_MORE_DOCS) {\n          break;\n        }\n        assertFalse(missing.get(docID));\n      }\n    }\n\n    IOUtils.close(r, w, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomAdvance(FieldCreator fieldCreator) throws IOException {\n\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), directory, conf);\n    int numChunks = atLeast(10);\n    int id = 0;\n    Set<Integer> missingSet = new HashSet<>();\n    for(int i=0;i<numChunks;i++) {\n      // change sparseness for each chunk\n      double sparseChance = random().nextDouble();\n      int docCount = atLeast(1000);\n      for(int j=0;j<docCount;j++) {\n        Document doc = new Document();\n        doc.add(new StoredField(\"id\", id));\n        if (random().nextDouble() > sparseChance) {\n          doc.add(fieldCreator.next());\n        } else {\n          missingSet.add(id);\n        }\n        id++;\n        w.addDocument(doc);\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    // Now search the index:\n    IndexReader r = w.getReader();\n    BitSet missing = new FixedBitSet(r.maxDoc());\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      Document doc = r.document(docID);\n      if (missingSet.contains(doc.getField(\"id\").numericValue())) {\n        missing.set(docID);\n      }\n    }\n    \n    for(int iter=0;iter<100;iter++) {\n      DocIdSetIterator values = fieldCreator.iterator(r);\n      assertEquals(-1, values.docID());\n\n      while (true) {\n        int docID;\n        if (random().nextBoolean()) {\n          docID = values.nextDoc();\n        } else {\n          int range;\n          if (random().nextInt(10) == 7) {\n            // big jump\n            range = r.maxDoc()-values.docID();\n          } else {\n            // small jump\n            range = 25;\n          }\n          int inc = TestUtil.nextInt(random(), 1, range);\n          docID = values.advance(values.docID() + inc);\n        }\n        if (docID == NO_MORE_DOCS) {\n          break;\n        }\n        assertFalse(missing.get(docID));\n      }\n    }\n\n    IOUtils.close(r, w, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestRandomAdvance(FieldCreator).mjava","sourceNew":"  private void doTestRandomAdvance(FieldCreator fieldCreator) throws IOException {\n\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), directory, conf);\n    int numChunks = atLeast(10);\n    int id = 0;\n    Set<Integer> missingSet = new HashSet<>();\n    for(int i=0;i<numChunks;i++) {\n      // change sparseness for each chunk\n      double sparseChance = random().nextDouble();\n      int docCount = atLeast(1000);\n      for(int j=0;j<docCount;j++) {\n        Document doc = new Document();\n        doc.add(new StoredField(\"id\", id));\n        if (random().nextDouble() > sparseChance) {\n          doc.add(fieldCreator.next());\n        } else {\n          missingSet.add(id);\n        }\n        id++;\n        w.addDocument(doc);\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    // Now search the index:\n    IndexReader r = w.getReader();\n    BitSet missing = new FixedBitSet(r.maxDoc());\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      Document doc = r.document(docID);\n      if (missingSet.contains(doc.getField(\"id\").numericValue())) {\n        missing.set(docID);\n      }\n    }\n    \n    int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      DocIdSetIterator values = fieldCreator.iterator(r);\n      assertEquals(-1, values.docID());\n\n      while (true) {\n        int docID;\n        if (random().nextBoolean()) {\n          docID = values.nextDoc();\n        } else {\n          int range;\n          if (random().nextInt(10) == 7) {\n            // big jump\n            range = r.maxDoc()-values.docID();\n          } else {\n            // small jump\n            range = 25;\n          }\n          int inc = TestUtil.nextInt(random(), 1, range);\n          docID = values.advance(values.docID() + inc);\n        }\n        if (docID == NO_MORE_DOCS) {\n          break;\n        }\n        assertFalse(missing.get(docID));\n      }\n    }\n\n    IOUtils.close(r, w, directory);\n  }\n\n","sourceOld":"  private void doTestRandomAdvance(FieldCreator fieldCreator) throws IOException {\n\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n    conf.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter w = new RandomIndexWriter(random(), directory, conf);\n    int numChunks = atLeast(10);\n    int id = 0;\n    Set<Integer> missingSet = new HashSet<>();\n    for(int i=0;i<numChunks;i++) {\n      // change sparseness for each chunk\n      double sparseChance = random().nextDouble();\n      int docCount = atLeast(1000);\n      for(int j=0;j<docCount;j++) {\n        Document doc = new Document();\n        doc.add(new StoredField(\"id\", id));\n        if (random().nextDouble() > sparseChance) {\n          doc.add(fieldCreator.next());\n        } else {\n          missingSet.add(id);\n        }\n        id++;\n        w.addDocument(doc);\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    // Now search the index:\n    IndexReader r = w.getReader();\n    BitSet missing = new FixedBitSet(r.maxDoc());\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      Document doc = r.document(docID);\n      if (missingSet.contains(doc.getField(\"id\").numericValue())) {\n        missing.set(docID);\n      }\n    }\n    \n    for(int iter=0;iter<100;iter++) {\n      DocIdSetIterator values = fieldCreator.iterator(r);\n      assertEquals(-1, values.docID());\n\n      while (true) {\n        int docID;\n        if (random().nextBoolean()) {\n          docID = values.nextDoc();\n        } else {\n          int range;\n          if (random().nextInt(10) == 7) {\n            // big jump\n            range = r.maxDoc()-values.docID();\n          } else {\n            // small jump\n            range = 25;\n          }\n          int inc = TestUtil.nextInt(random(), 1, range);\n          docID = values.advance(values.docID() + inc);\n        }\n        if (docID == NO_MORE_DOCS) {\n          break;\n        }\n        assertFalse(missing.get(docID));\n      }\n    }\n\n    IOUtils.close(r, w, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}