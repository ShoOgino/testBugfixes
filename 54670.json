{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","commits":[{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // disabled coords -> term scorer\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .setDisableCoord(true)\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // enabled coords -> BoostedBulkScorer\n    searcher.setSimilarity(new ClassicSimilarity());\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof BooleanTopLevelScorers.BoostedBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // disabled coords -> term scorer\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .setDisableCoord(true)\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // enabled coords -> BoostedBulkScorer\n    searcher.setSimilarity(new ClassicSimilarity());\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof BooleanTopLevelScorers.BoostedBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // disabled coords -> term scorer\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .setDisableCoord(true)\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // enabled coords -> BoostedBulkScorer\n    searcher.setSimilarity(new ClassicSimilarity());\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof BooleanTopLevelScorers.BoostedBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeTopLevelClauseOrNull().mjava","sourceNew":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeTopLevelClauseOrNull() throws IOException {\n    // When there is a single non-null scorer, this scorer should be used\n    // directly\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n\n    // no scores -> term scorer\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    // scores -> term scorer too\n    query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD) // existing term\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD) // missing term\n      .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof DefaultBulkScorer); // term scorer\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["c8a0e442f7b61f811680273b25da95994a724466","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"c8a0e442f7b61f811680273b25da95994a724466":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}