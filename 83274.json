{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT)),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT))\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT)),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT))\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT)),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT))\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT)),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.singletonMap(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT))\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Replica(\"core_node1\", \"127.0.0.1:60089_solr\", \"compute_plan_action_test\", \"shard1\", \"core_node1\",\n            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap()),\n        new Replica(\"core_node2\", \"127.0.0.1:60089_solr\", \"compute_plan_action_test\", \"shard1\", \"core_node2\",\n            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap())));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<Replica>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, \"127.0.0.1:60089_solr\", Collections.emptyMap())));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n    if(useNodeset){\n      autoscaleJson = \"{\" +\n          \"      'cluster-policy':[\" +\n          \"      {'cores':'<10','node':'#ANY'},\" +\n          \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n          \"      {nodeset: {'nodeRole':'overseer'},'replica':'0'}],\" +\n          \"      'cluster-preferences':[\" +\n          \"      {'minimize':'cores', 'precision':3},\" +\n          \"      {'maximize':'freedisk','precision':100}]}\";\n\n    }\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Replica(\"core_node1\", \"127.0.0.1:60089_solr\", \"compute_plan_action_test\", \"shard1\", \"core_node1\",\n            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap()),\n        new Replica(\"core_node2\", \"127.0.0.1:60089_solr\", \"compute_plan_action_test\", \"shard1\", \"core_node2\",\n            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap())));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}\");\n\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return replicaInfoMap.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return tagsMap.get(node);\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<Replica>>>) replicaInfoMap.get(node);\n          }\n        };\n      }\n    });\n    Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(\"expect a non null operation\", op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["9ba1b632c041956c93c41aa1143d16a567014891"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}