{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","sourceOld":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7acd6e5de6e90bdcc824956530d05c06fa4970d7","date":1515666782,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=2.723861]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","sourceOld":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","bugFix":null,"bugIntro":["dbac88a6e1a523e354f1fba167160a36ee8e0d9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbac88a6e1a523e354f1fba167160a36ee8e0d9f","date":1515671120,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","sourceOld":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=2.723861]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","bugFix":["7acd6e5de6e90bdcc824956530d05c06fa4970d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","sourceOld":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testSubPhrases().mjava","sourceNew":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    dupMatchAllowed.set(false); // We don't want duplicates from both PhraseQuery\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    if (highlighter.getFlags(\"body\").contains(HighlightFlag.WEIGHT_MATCHES)) {\n      assertArrayEquals(new String[]{\"<b>alpha bravo charlie</b> - charlie bravo alpha\"}, snippets);\n    } else {\n      assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n    }\n  }\n\n","sourceOld":"  public void testSubPhrases() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(newPhraseQuery(\"body\", \"alpha bravo charlie\"), BooleanClause.Occur.MUST)\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n\n    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery\n    highlighter.setFormatter(new PassageFormatter() {\n      @Override\n      public Object format(Passage[] passages, String content) {\n        return Arrays.toString(passages);\n      }\n    });\n    assertArrayEquals(new String[]{\"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]\"},\n        highlighter.highlight(\"body\", query, topDocs));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","dbac88a6e1a523e354f1fba167160a36ee8e0d9f"],"dbac88a6e1a523e354f1fba167160a36ee8e0d9f":["7acd6e5de6e90bdcc824956530d05c06fa4970d7"],"7acd6e5de6e90bdcc824956530d05c06fa4970d7":["eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"dbac88a6e1a523e354f1fba167160a36ee8e0d9f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7acd6e5de6e90bdcc824956530d05c06fa4970d7":["dbac88a6e1a523e354f1fba167160a36ee8e0d9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["7acd6e5de6e90bdcc824956530d05c06fa4970d7"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}