{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs(), true);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs(), true);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, PostingsEnum.FLAG_FREQS);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, PostingsEnum.FLAG_FREQS);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, ScoreMode.COMPLETE);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, ScoreMode.COMPLETE);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, true);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createWeight(s.rewrite(dq), ScoreMode.COMPLETE, 1);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, ScoreMode.COMPLETE);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createWeight(s.rewrite(dq), ScoreMode.COMPLETE, 1);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(\n        Arrays.asList(tq(\"id\", \"d1\"), tq(\"dek\", \"DOES_NOT_EXIST\")), 0.0f);\n\n    QueryUtils.check(random(), dq, s);\n    assertTrue(s.getTopReaderContext() instanceof LeafReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq, ScoreMode.COMPLETE);\n    LeafReaderContext context = (LeafReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context);\n    final boolean skipOk = ds.iterator().advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7dd748bb245633a8195281556bb0e68a6ea97d18","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}