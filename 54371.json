{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}