{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getFlagParsingStrategy(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["b89678825b68eccaf09e6ab71675fc0b0af1e099","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}