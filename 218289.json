{"path":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"469904587e47b677b125b4bb303304e1ef04e961","date":1393861559,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"/dev/null","sourceNew":"        @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if(!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      Map expanded = (Map)req.getContext().get(\"expanded\");\n      if(expanded == null) {\n        expanded = new HashMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        Map ex = (Map)response.get(\"expanded\");\n        Iterator<Map.Entry<String,SolrDocumentList>>it = ex.entrySet().iterator();\n        while(it.hasNext()) {\n          Map.Entry<String, SolrDocumentList> entry = it.next();\n          String name = entry.getKey();\n          SolrDocumentList val = entry.getValue();\n          expanded.put(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53c4b316b8c254e1bdf99a58a6b30856012f995d","date":1401311743,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      Map expanded = (Map) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new HashMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        Map ex = (Map) response.get(\"expanded\");\n        for (Map.Entry<String, SolrDocumentList> entry : (Iterable<Map.Entry<String, SolrDocumentList>>) ex.entrySet()) {\n          String name = entry.getKey();\n          SolrDocumentList val = entry.getValue();\n          expanded.put(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"        @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if(!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      Map expanded = (Map)req.getContext().get(\"expanded\");\n      if(expanded == null) {\n        expanded = new HashMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        Map ex = (Map)response.get(\"expanded\");\n        Iterator<Map.Entry<String,SolrDocumentList>>it = ex.entrySet().iterator();\n        while(it.hasNext()) {\n          Map.Entry<String, SolrDocumentList> entry = it.next();\n          String name = entry.getKey();\n          SolrDocumentList val = entry.getValue();\n          expanded.put(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84bc0ab6faa849a8e6667f3bce45874b858d44c9","date":1427871306,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      Map expanded = (Map) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new HashMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        Map ex = (Map) response.get(\"expanded\");\n        for (Map.Entry<String, SolrDocumentList> entry : (Iterable<Map.Entry<String, SolrDocumentList>>) ex.entrySet()) {\n          String name = entry.getKey();\n          SolrDocumentList val = entry.getValue();\n          expanded.put(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      Map expanded = (Map) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new HashMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        Map ex = (Map) response.get(\"expanded\");\n        for (Map.Entry<String, SolrDocumentList> entry : (Iterable<Map.Entry<String, SolrDocumentList>>) ex.entrySet()) {\n          String name = entry.getKey();\n          SolrDocumentList val = entry.getValue();\n          expanded.put(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n\n    if (!rb.doExpand) {\n      return;\n    }\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      SolrQueryRequest req = rb.req;\n      NamedList expanded = (NamedList) req.getContext().get(\"expanded\");\n      if (expanded == null) {\n        expanded = new SimpleOrderedMap();\n        req.getContext().put(\"expanded\", expanded);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList response = srsp.getSolrResponse().getResponse();\n        NamedList ex = (NamedList) response.get(\"expanded\");\n        for (int i=0; i<ex.size(); i++) {\n          String name = ex.getName(i);\n          SolrDocumentList val = (SolrDocumentList) ex.getVal(i);\n          expanded.add(name, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84bc0ab6faa849a8e6667f3bce45874b858d44c9":["53c4b316b8c254e1bdf99a58a6b30856012f995d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["84bc0ab6faa849a8e6667f3bce45874b858d44c9","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["84bc0ab6faa849a8e6667f3bce45874b858d44c9"],"53c4b316b8c254e1bdf99a58a6b30856012f995d":["469904587e47b677b125b4bb303304e1ef04e961"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["84bc0ab6faa849a8e6667f3bce45874b858d44c9","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"469904587e47b677b125b4bb303304e1ef04e961":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c924d4069ef5a5bc479a493befe0121aada6896":["53c4b316b8c254e1bdf99a58a6b30856012f995d","84bc0ab6faa849a8e6667f3bce45874b858d44c9"]},"commit2Childs":{"84bc0ab6faa849a8e6667f3bce45874b858d44c9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["469904587e47b677b125b4bb303304e1ef04e961"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"53c4b316b8c254e1bdf99a58a6b30856012f995d":["84bc0ab6faa849a8e6667f3bce45874b858d44c9","0c924d4069ef5a5bc479a493befe0121aada6896"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"469904587e47b677b125b4bb303304e1ef04e961":["53c4b316b8c254e1bdf99a58a6b30856012f995d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}