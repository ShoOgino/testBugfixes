{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#read(DataInput).mjava","sourceNew":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  @Override\n  public TempTermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TempTermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#read(DataInput).mjava","sourceNew":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bytesSize = (bits >>> 2);\n    if (bit0 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit1 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(bytes, docFreq, totalTermFreq);\n  }\n\n","sourceOld":"  @Override\n  public TermData read(DataInput in) throws IOException {\n    long[] longs = new long[longsSize];\n    byte[] bytes = null;\n    int docFreq = 0;\n    long totalTermFreq = -1;\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        longs[pos] = in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      bytes = new byte[bytesSize];\n      in.readBytes(bytes, 0, bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos) {\n        totalTermFreq = docFreq = code >>> 1;\n        if ((code & 1) == 0) {\n          totalTermFreq += in.readVLong();\n        }\n      } else {\n        docFreq = code;\n      }\n    }\n    return new TermData(longs, bytes, docFreq, totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}