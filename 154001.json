{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context);\n      } else {\n        spans = spanQuery.getSpans(context);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context);\n      } else {\n        spans = spanQuery.getSpans(context);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context);\n      } else {\n        spans = spanQuery.getSpans(context);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context, acceptDocs);\n      } else {\n        spans = spanQuery.getSpans(context, acceptDocs);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context);\n      } else {\n        spans = spanQuery.getSpans(context);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      AtomicReaderContext context = getLeafContextForField(field);\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(context, acceptDocs);\n      } else {\n        spans = spanQuery.getSpans(context, acceptDocs);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a00afb46b1a8a7ee8772ebbd41076442006ce5e4","date":1325512163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7355c699afc4eb0400bbd33c1fc216fe31f5d009","date":1327855787,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader);\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader.getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  protected void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getLeafContextForField(field).reader());\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n      final SpanQuery q;\n      if (mustRewriteQuery) {\n        q = queries.get(field);\n      } else {\n        q = spanQuery;\n      }\n      AtomicReaderContext context = getLeafContextForField(field);\n      Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n      TreeSet<Term> extractedTerms = new TreeSet<Term>();\n      q.extractTerms(extractedTerms);\n      for (Term term : extractedTerms) {\n        termContexts.put(term, TermContext.build(context, term, true));\n      }\n      Bits acceptDocs = context.reader().getLiveDocs();\n      final Spans spans = q.getSpans(context, acceptDocs, termContexts);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c8323d210478d76a02372693d254b69aac614689":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c8323d210478d76a02372693d254b69aac614689"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7355c699afc4eb0400bbd33c1fc216fe31f5d009":["a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a00afb46b1a8a7ee8772ebbd41076442006ce5e4","7355c699afc4eb0400bbd33c1fc216fe31f5d009"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8323d210478d76a02372693d254b69aac614689":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7355c699afc4eb0400bbd33c1fc216fe31f5d009":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"a00afb46b1a8a7ee8772ebbd41076442006ce5e4":["7355c699afc4eb0400bbd33c1fc216fe31f5d009","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["a00afb46b1a8a7ee8772ebbd41076442006ce5e4"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}