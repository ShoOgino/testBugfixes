{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","commits":[{"id":"8a08695eb0e2c01d06dd662674e3136641f093be","date":1450145331,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","sourceNew":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","sourceNew":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b360a3d5b9d443b4e880d2c92724cffd7def8db","date":1490740768,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","sourceNew":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d81030ef9ff5ae6820e560c0833127181c7a2c","date":1490873946,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testDefaultOperatorWithMm().mjava","sourceNew":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  /**\n   * Test that the default operator and MM are interacting appropriately when both provided\n   */\n  public void testDefaultOperatorWithMm() throws Exception {\n    // Text we are searching\n    // \"line up and fly directly at the enemy death cannons, clogging them with wreckage!\"\n    assertQ(\"test default operator with mm (AND + 0% => 0 hits)\",\n        req(\"q\", \"(line notfound) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 0% => 1 hit)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 100% => 0 hits)\",\n        req(\"q\", \"line notfound OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"100%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (OR + 35% => 1 hit)\",\n        req(\"q\", \"line notfound notfound2 OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"35%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (OR + 75% => 0 hits)\",\n        req(\"q\", \"line notfound notfound2 OR notfound3\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"OR\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n    assertQ(\"test default operator with mm (AND + 0% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR notfound\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"0%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 50% => 1 hit)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"50%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=1]\");\n    assertQ(\"test default operator with mm (AND + 75% => 0 hits)\",\n        req(\"q\", \"(line enemy) OR (line notfound) OR (death cannons) OR (death notfound)\",\n            \"qf\", \"text_sw\",\n            \"q.op\", \"AND\",\n            \"mm\", \"75%\",\n            \"defType\", \"edismax\")\n        , \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["e55782fb51a6e9789542818eb2161a3247f39ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a08695eb0e2c01d06dd662674e3136641f093be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["c03778630c4604270d88c148afb8c7de35b51d3c"],"c03778630c4604270d88c148afb8c7de35b51d3c":["8a08695eb0e2c01d06dd662674e3136641f093be"],"e55782fb51a6e9789542818eb2161a3247f39ace":["8a08695eb0e2c01d06dd662674e3136641f093be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"]},"commit2Childs":{"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a08695eb0e2c01d06dd662674e3136641f093be"],"8a08695eb0e2c01d06dd662674e3136641f093be":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["36d81030ef9ff5ae6820e560c0833127181c7a2c"],"e55782fb51a6e9789542818eb2161a3247f39ace":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["36d81030ef9ff5ae6820e560c0833127181c7a2c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}