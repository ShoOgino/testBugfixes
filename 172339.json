{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          long searchAtMs = System.currentTimeMillis();\n          \n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          long tookMs = (System.currentTimeMillis() - searchAtMs);\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took \" + tookMs + \" (ms)\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          long searchAtMs = System.currentTimeMillis();\n          \n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          long tookMs = (System.currentTimeMillis() - searchAtMs);\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took \" + tookMs + \" (ms)\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          long searchAtMs = System.currentTimeMillis();\n          \n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          long tookMs = (System.currentTimeMillis() - searchAtMs);\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took \" + tookMs + \" (ms)\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        if (st != null) {\n          doBatching = false;\n          messagesInCurBatch = folder.search(st);\n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime());\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          long searchAtMs = System.currentTimeMillis();\n          \n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          long tookMs = (System.currentTimeMillis() - searchAtMs);\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took \" + tookMs + \" (ms)\");\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          log.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            log.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          log.info(\"Total messages : \" + totalInFolder);\n          log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime());\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        LOG.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          LOG.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            LOG.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            LOG.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          LOG.info(\"Total messages : \" + totalInFolder);\n          LOG.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime());\n        } else {\n          totalInFolder = folder.getMessageCount();\n          LOG.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm={}\", st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          if (log.isInfoEnabled()) {\n            log.info(\"Searching folder {} for messages\", folder.getName());\n          }\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: {}\", afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n\n            if (log.isInfoEnabled()) {\n              log.info(\"GMail server-side filter found {} messages received {} in folder \"\n                  , afterMessages.length, afterCrit, folder.getName());\n            }\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          if (log.isInfoEnabled()) {\n            log.info(\"Total messages : {}\", totalInFolder);\n            log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime()); // logOk\n          }\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : {}\", totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm=\" + st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          log.info(\"Searching folder \" + folder.getName() + \" for messages\");\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: \" + afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n            \n            log.info(\"GMail server-side filter found \" + afterMessages.length\n                + \" messages received \" + afterCrit + \" in folder \" + folder.getName());\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          log.info(\"Total messages : \" + totalInFolder);\n          log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime());\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : \" + totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm={}\", st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          if (log.isInfoEnabled()) {\n            log.info(\"Searching folder {} for messages\", folder.getName());\n          }\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: {}\", afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n\n            if (log.isInfoEnabled()) {\n              log.info(\"GMail server-side filter found {} messages received {} in folder {}\"\n                  , afterMessages.length, afterCrit, folder.getName());\n            }\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          if (log.isInfoEnabled()) {\n            log.info(\"Total messages : {}\", totalInFolder);\n            log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime()); // logOk\n          }\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : {}\", totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm={}\", st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          if (log.isInfoEnabled()) {\n            log.info(\"Searching folder {} for messages\", folder.getName());\n          }\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: {}\", afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n\n            if (log.isInfoEnabled()) {\n              log.info(\"GMail server-side filter found {} messages received {} in folder \"\n                  , afterMessages.length, afterCrit, folder.getName());\n            }\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          if (log.isInfoEnabled()) {\n            log.info(\"Total messages : {}\", totalInFolder);\n            log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime()); // logOk\n          }\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : {}\", totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MessageIterator#MessageIterator(Folder,int).mjava","sourceNew":null,"sourceOld":"    public MessageIterator(Folder folder, int batchSize) {\n      super();\n      \n      try {\n        this.folder = folder;\n        this.batchSize = batchSize;\n        SearchTerm st = getSearchTerm();\n        \n        log.info(\"SearchTerm={}\", st);\n        \n        if (st != null || folder instanceof GmailFolder) {\n          doBatching = false;\n          // Searching can still take a while even though we're only pulling\n          // envelopes; unless you're using gmail server-side filter, which is\n          // fast\n          if (log.isInfoEnabled()) {\n            log.info(\"Searching folder {} for messages\", folder.getName());\n          }\n          final RTimer searchTimer = new RTimer();\n\n          // If using GMail, speed up the envelope processing by doing a\n          // server-side\n          // search for messages occurring on or after the fetch date (at\n          // midnight),\n          // which reduces the number of envelopes we need to pull from the\n          // server\n          // to apply the precise DateTerm filter; GMail server-side search has\n          // date\n          // granularity only but the local filters are also applied\n                    \n          if (folder instanceof GmailFolder && fetchMailsSince != null) {\n            String afterCrit = \"after:\" + afterFmt.format(fetchMailsSince);\n            log.info(\"Added server-side gmail filter: {}\", afterCrit);\n            Message[] afterMessages = folder.search(new GmailRawSearchTerm(\n                afterCrit));\n\n            if (log.isInfoEnabled()) {\n              log.info(\"GMail server-side filter found {} messages received {} in folder {}\"\n                  , afterMessages.length, afterCrit, folder.getName());\n            }\n            \n            // now pass in the server-side filtered messages to the local filter\n            messagesInCurBatch = folder.search((st != null ? st : this), afterMessages);\n          } else {\n            messagesInCurBatch = folder.search(st);\n          }          \n          totalInFolder = messagesInCurBatch.length;\n          folder.fetch(messagesInCurBatch, fp);\n          current = 0;\n          if (log.isInfoEnabled()) {\n            log.info(\"Total messages : {}\", totalInFolder);\n            log.info(\"Search criteria applied. Batching disabled. Took {} (ms)\", searchTimer.getTime()); // logOk\n          }\n        } else {\n          totalInFolder = folder.getMessageCount();\n          log.info(\"Total messages : {}\", totalInFolder);\n          getNextBatch(batchSize, folder);\n        }\n      } catch (MessagingException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Message retreival failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}