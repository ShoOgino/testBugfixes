{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","commits":[{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    long deletedDocs = 0;\n    long totalNumDocs = merge.totalNumDocs();\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    long deletedDocs = 0;\n    long totalNumDocs = merge.totalNumDocs();\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","date":1487166948,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    if (!mergeTotals) {\n      super.merge(merge);\n      return;\n    }\n    long deletedDocs = 0;\n    long totalNumDocs = merge.totalNumDocs();\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","sourceOld":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    long deletedDocs = 0;\n    long totalNumDocs = merge.totalNumDocs();\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5","date":1552136881,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    String segString = merge.segString();\n    long totalNumDocs = merge.totalNumDocs();\n    runningMerges.put(segString, totalNumDocs);\n    if (!mergeTotals) {\n      try {\n        super.merge(merge);\n      } finally {\n        runningMerges.remove(segString);\n      }\n      return;\n    }\n    long deletedDocs = 0;\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      runningMerges.remove(segString);\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","sourceOld":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    if (!mergeTotals) {\n      super.merge(merge);\n      return;\n    }\n    long deletedDocs = 0;\n    long totalNumDocs = merge.totalNumDocs();\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  // we override this method to collect metrics for merges.\n  @Override\n  protected void merge(MergePolicy.OneMerge merge) throws IOException {\n    String segString = merge.segString();\n    long totalNumDocs = merge.totalNumDocs();\n    runningMerges.put(segString, totalNumDocs);\n    if (!mergeTotals) {\n      try {\n        super.merge(merge);\n      } finally {\n        runningMerges.remove(segString);\n      }\n      return;\n    }\n    long deletedDocs = 0;\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      runningMerges.remove(segString);\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","sourceOld":"  // we override this method to collect metrics for merges.\n  @Override\n  public void merge(MergePolicy.OneMerge merge) throws IOException {\n    String segString = merge.segString();\n    long totalNumDocs = merge.totalNumDocs();\n    runningMerges.put(segString, totalNumDocs);\n    if (!mergeTotals) {\n      try {\n        super.merge(merge);\n      } finally {\n        runningMerges.remove(segString);\n      }\n      return;\n    }\n    long deletedDocs = 0;\n    for (SegmentCommitInfo info : merge.segments) {\n      totalNumDocs -= info.getDelCount();\n      deletedDocs += info.getDelCount();\n    }\n    boolean major = totalNumDocs > majorMergeDocs;\n    int segmentsCount = merge.segments.size();\n    Timer.Context context;\n    if (major) {\n      runningMajorMerges.incrementAndGet();\n      runningMajorMergesDocs.addAndGet(totalNumDocs);\n      runningMajorMergesSegments.addAndGet(segmentsCount);\n      if (mergeDetails) {\n        majorMergedDocs.mark(totalNumDocs);\n        majorDeletedDocs.mark(deletedDocs);\n      }\n      context = majorMerge.time();\n    } else {\n      runningMinorMerges.incrementAndGet();\n      runningMinorMergesDocs.addAndGet(totalNumDocs);\n      runningMinorMergesSegments.addAndGet(segmentsCount);\n      context = minorMerge.time();\n    }\n    try {\n      super.merge(merge);\n    } catch (Throwable t) {\n      mergeErrors.inc();\n      throw t;\n    } finally {\n      runningMerges.remove(segString);\n      context.stop();\n      if (major) {\n        runningMajorMerges.decrementAndGet();\n        runningMajorMergesDocs.addAndGet(-totalNumDocs);\n        runningMajorMergesSegments.addAndGet(-segmentsCount);\n      } else {\n        runningMinorMerges.decrementAndGet();\n        runningMinorMergesDocs.addAndGet(-totalNumDocs);\n        runningMinorMergesSegments.addAndGet(-segmentsCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["89697e7abc9807639c384eecf5a2a6eef1080426"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}