{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ArrayEvaluatorTest#arrayStringUnsortedTest().mjava","commits":[{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ArrayEvaluatorTest#arrayStringUnsortedTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void arrayStringUnsortedTest() throws IOException{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"array(a,b,c)\");\n    StreamContext context = new StreamContext();\n    evaluator.setStreamContext(context);\n    Object result;\n    \n    values.put(\"a\", \"a\");\n    values.put(\"b\", \"c\");\n    values.put(\"c\", \"b\");\n    \n    result = evaluator.evaluate(new Tuple(values));\n    \n    Assert.assertTrue(result instanceof List<?>);\n    \n    Assert.assertEquals(3, ((List<?>)result).size());\n    Assert.assertEquals(\"a\", ((List<?>)result).get(0));\n    Assert.assertEquals(\"c\", ((List<?>)result).get(1));\n    Assert.assertEquals(\"b\", ((List<?>)result).get(2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ArrayEvaluatorTest#arrayStringUnsortedTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void arrayStringUnsortedTest() throws IOException{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"array(a,b,c)\");\n    StreamContext context = new StreamContext();\n    evaluator.setStreamContext(context);\n    Object result;\n    \n    values.put(\"a\", \"a\");\n    values.put(\"b\", \"c\");\n    values.put(\"c\", \"b\");\n    \n    result = evaluator.evaluate(new Tuple(values));\n    \n    Assert.assertTrue(result instanceof List<?>);\n    \n    Assert.assertEquals(3, ((List<?>)result).size());\n    Assert.assertEquals(\"a\", ((List<?>)result).get(0));\n    Assert.assertEquals(\"c\", ((List<?>)result).get(1));\n    Assert.assertEquals(\"b\", ((List<?>)result).get(2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ArrayEvaluatorTest#arrayStringUnsortedTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void arrayStringUnsortedTest() throws IOException{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"array(a,b,c)\");\n    StreamContext context = new StreamContext();\n    evaluator.setStreamContext(context);\n    Object result;\n    \n    values.put(\"a\", \"a\");\n    values.put(\"b\", \"c\");\n    values.put(\"c\", \"b\");\n    \n    result = evaluator.evaluate(new Tuple(values));\n    \n    Assert.assertTrue(result instanceof List<?>);\n    \n    Assert.assertEquals(3, ((List<?>)result).size());\n    Assert.assertEquals(\"a\", ((List<?>)result).get(0));\n    Assert.assertEquals(\"c\", ((List<?>)result).get(1));\n    Assert.assertEquals(\"b\", ((List<?>)result).get(2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}