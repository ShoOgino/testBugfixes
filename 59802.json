{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          //new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          //new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          //new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          //new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          //new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(40) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(40) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(40) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(20) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.MockIndexWriter#testPoint(String).mjava","sourceNew":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(40) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    boolean testPoint(String name) {\n      if (doFail.get() != null && !name.equals(\"startDoFlush\") && r.nextInt(40) == 17) {\n        if (VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": NOW FAIL: \" + name);\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new RuntimeException(Thread.currentThread().getName() + \": intentionally failing at \" + name);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}