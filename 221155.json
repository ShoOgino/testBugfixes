{"path":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","commits":[{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","date":1505775734,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> allSingleDVs = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (schemaField.hasDocValues() && !schemaField.multiValued()) {\n        allSingleDVs.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.allSingleDV = Collections.unmodifiableSet(allSingleDVs);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> allSingleDVs = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (schemaField.hasDocValues() && !schemaField.multiValued()) {\n        allSingleDVs.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.allSingleDV = Collections.unmodifiableSet(allSingleDVs);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ac9ae04c11f9e36330ee2448ef214c4fdbfc79","date":1509089658,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> allSingleDVs = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (schemaField.hasDocValues() && !schemaField.multiValued()) {\n        allSingleDVs.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.allSingleDV = Collections.unmodifiableSet(allSingleDVs);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053c4cbd30d228154839dc536ca5a15a5f0c48bf","date":1564559417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null :\n          solrConfig.documentCacheConfig.newInstance(searcher.getCore());\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null :\n          solrConfig.documentCacheConfig.newInstance(searcher.getCore());\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null :\n          solrConfig.documentCacheConfig.newInstance(searcher.getCore());\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null :\n          solrConfig.documentCacheConfig.newInstance(searcher.getCore());\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#SolrDocumentFetcher(SolrIndexSearcher,SolrConfig,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","sourceOld":"  SolrDocumentFetcher(SolrIndexSearcher searcher, SolrConfig solrConfig, boolean cachingEnabled) {\n    this.searcher = searcher;\n    this.enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    if (cachingEnabled) {\n      documentCache = solrConfig.documentCacheConfig == null ? null : solrConfig.documentCacheConfig.newInstance();\n    } else {\n      documentCache = null;\n    }\n\n    final Set<String> nonStoredDVsUsedAsStored = new HashSet<>();\n    final Set<String> allNonStoredDVs = new HashSet<>();\n    final Set<String> nonStoredDVsWithoutCopyTargets = new HashSet<>();\n    final Set<String> storedLargeFields = new HashSet<>();\n    final Set<String> dvsCanSubstituteStored = new HashSet<>();\n    final Set<String> allStoreds = new HashSet<>();\n\n    for (FieldInfo fieldInfo : searcher.getFieldInfos()) { // can find materialized dynamic fields, unlike using the Solr IndexSchema.\n      final SchemaField schemaField = searcher.getSchema().getFieldOrNull(fieldInfo.name);\n      if (schemaField == null) {\n        continue;\n      }\n      if (canSubstituteDvForStored(fieldInfo, schemaField)) {\n        dvsCanSubstituteStored.add(fieldInfo.name);\n      }\n      if (schemaField.stored()) {\n        allStoreds.add(fieldInfo.name);\n      }\n      if (!schemaField.stored() && schemaField.hasDocValues()) {\n        if (schemaField.useDocValuesAsStored()) {\n          nonStoredDVsUsedAsStored.add(fieldInfo.name);\n        }\n        allNonStoredDVs.add(fieldInfo.name);\n        if (!searcher.getSchema().isCopyFieldTarget(schemaField)) {\n          nonStoredDVsWithoutCopyTargets.add(fieldInfo.name);\n        }\n      }\n      if (schemaField.stored() && schemaField.isLarge()) {\n        storedLargeFields.add(schemaField.getName());\n      }\n    }\n\n    this.nonStoredDVsUsedAsStored = Collections.unmodifiableSet(nonStoredDVsUsedAsStored);\n    this.allNonStoredDVs = Collections.unmodifiableSet(allNonStoredDVs);\n    this.nonStoredDVsWithoutCopyTargets = Collections.unmodifiableSet(nonStoredDVsWithoutCopyTargets);\n    this.largeFields = Collections.unmodifiableSet(storedLargeFields);\n    this.dvsCanSubstituteStored = Collections.unmodifiableSet(dvsCanSubstituteStored);\n    this.allStored = Collections.unmodifiableSet(allStoreds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55ac9ae04c11f9e36330ee2448ef214c4fdbfc79":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["de548de3ce5405595899f548152d4b93ac9eb9cc","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["55ac9ae04c11f9e36330ee2448ef214c4fdbfc79"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["c44cc06c26e456fe9c215072b79fce30babe3975"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"f8061ddd97f3352007d927dae445884a6f3d857b":["55ac9ae04c11f9e36330ee2448ef214c4fdbfc79","053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"55ac9ae04c11f9e36330ee2448ef214c4fdbfc79":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","f8061ddd97f3352007d927dae445884a6f3d857b"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"de548de3ce5405595899f548152d4b93ac9eb9cc":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["c44cc06c26e456fe9c215072b79fce30babe3975","f8061ddd97f3352007d927dae445884a6f3d857b","b0b597c65628ca9e73913a07e81691f8229bae35"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["55ac9ae04c11f9e36330ee2448ef214c4fdbfc79","04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"c44cc06c26e456fe9c215072b79fce30babe3975":["50dfd19525c8d73e856dca6edb64b7aea074037f","b0b597c65628ca9e73913a07e81691f8229bae35"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}