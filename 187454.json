{"path":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.25811607'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fde37608cd70b4d772cda072953ab6e7aec60923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","sourceNew":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.25811607'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde37608cd70b4d772cda072953ab6e7aec60923","date":1502236361,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","sourceNew":"  @Test\n  public void test() {\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum}A B C\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A C\"), \"//float[@name='score']='4.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}foo\"), \"//result[@numFound='0']\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max operator=or}A C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min operator=or}A x\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average operator=or}A C\"), \"//float[@name='score']='2.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","bugFix":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","sourceNew":"  @Test\n  public void test() {\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum}A B C\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A C\"), \"//float[@name='score']='4.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}foo\"), \"//result[@numFound='0']\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max operator=or}A C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min operator=or}A x\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average operator=or}A C\"), \"//float[@name='score']='2.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","sourceNew":"  @Test\n  public void test() {\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum}A B C\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A C\"), \"//float[@name='score']='4.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}foo\"), \"//result[@numFound='0']\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max operator=or}A C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min operator=or}A x\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average operator=or}A C\"), \"//float[@name='score']='2.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n    clearIndex();\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da56d90379fbe988bf847d3482efa685803c5193","date":1544607230,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestPayloadScoreQParserPlugin#test().mjava","sourceNew":"  @Test\n  public void test() {\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum}A B C\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A C\"), \"//float[@name='score']='4.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}foo\"), \"//result[@numFound='0']\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max operator=or}A C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min operator=or}A x\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average operator=or}A C\"), \"//float[@name='score']='2.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.13076457'\");\n  }\n\n","sourceOld":"  @Test\n  public void test() {\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=B func=min}\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=min}\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=max}\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=mult func=average}\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}A B\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min}B C\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}B C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average}B C\"), \"//float[@name='score']='2.5'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max}A B C\"), \"//float[@name='score']='3.0'\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum}A B C\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A C\"), \"//float[@name='score']='4.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}A\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=sum operator=or}foo\"), \"//result[@numFound='0']\");\n\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=max operator=or}A C\"), \"//float[@name='score']='3.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=min operator=or}A x\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf func=average operator=or}A C\"), \"//float[@name='score']='2.0'\");\n\n    // TODO: fix this includeSpanScore test to be less brittle - score result is score of \"A\" (via BM25) multipled by 1.0 (payload value)\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min}\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!payload_score f=vals_dpf v=A func=min includeSpanScore=true}\"), \"//float[@name='score']='0.2876821'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["615370d2b876c3435773b5174df2e2242ad7981a","fde37608cd70b4d772cda072953ab6e7aec60923"],"fde37608cd70b4d772cda072953ab6e7aec60923":["615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["e9017cf144952056066919f1ebc7897ff9bd71b1","fde37608cd70b4d772cda072953ab6e7aec60923"],"da56d90379fbe988bf847d3482efa685803c5193":["fde37608cd70b4d772cda072953ab6e7aec60923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da56d90379fbe988bf847d3482efa685803c5193"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"fde37608cd70b4d772cda072953ab6e7aec60923":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","da56d90379fbe988bf847d3482efa685803c5193"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","58884af1f68e9d61c217c753fbd6266d86a63b14","fde37608cd70b4d772cda072953ab6e7aec60923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"da56d90379fbe988bf847d3482efa685803c5193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}