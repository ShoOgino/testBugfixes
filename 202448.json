{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#distanceQuerySortKey(double).mjava","commits":[{"id":"a62e86d7b9cc6dec3c09f771166aa2393fd95c99","date":1466437108,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#distanceQuerySortKey(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#sortKey(double).mjava","sourceNew":"  /**\n   * binary search to find the exact sortKey needed to match the specified radius\n   * any sort key lte this is a query match.\n   */\n  public static double distanceQuerySortKey(double radius) {\n    // effectively infinite\n    if (radius >= haversinMeters(Double.MAX_VALUE)) {\n      return haversinMeters(Double.MAX_VALUE);\n    }\n\n    // this is a search through non-negative long space only\n    long lo = 0;\n    long hi = Double.doubleToRawLongBits(Double.MAX_VALUE);\n    while (lo <= hi) {\n      long mid = (lo + hi) >>> 1;\n      double sortKey = Double.longBitsToDouble(mid);\n      double midRadius = haversinMeters(sortKey);\n      if (midRadius == radius) {\n        return sortKey;\n      } else if (midRadius > radius) {\n        hi = mid - 1;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    // not found: this is because a user can supply an arbitrary radius, one that we will never\n    // calculate exactly via our haversin method.\n    double ceil = Double.longBitsToDouble(lo);\n    assert haversinMeters(ceil) > radius;\n    return ceil;\n  }\n\n","sourceOld":"  /**\n   * binary search to find the exact sortKey needed to match the specified radius\n   * any sort key <= this is a query match.\n   */\n  static double sortKey(double radius) {\n    // effectively infinite\n    if (radius >= SloppyMath.haversinMeters(Double.MAX_VALUE)) {\n      return SloppyMath.haversinMeters(Double.MAX_VALUE);\n    }\n\n    // this is a search through non-negative long space only\n    long lo = 0;\n    long hi = Double.doubleToRawLongBits(Double.MAX_VALUE);\n    while (lo <= hi) {\n      long mid = (lo + hi) >>> 1;\n      double sortKey = Double.longBitsToDouble(mid);\n      double midRadius = SloppyMath.haversinMeters(sortKey);\n      if (midRadius == radius) {\n        return sortKey;\n      } else if (midRadius > radius) {\n        hi = mid - 1;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    // not found: this is because a user can supply an arbitrary radius, one that we will never\n    // calculate exactly via our haversin method.\n    double ceil = Double.longBitsToDouble(lo);\n    assert SloppyMath.haversinMeters(ceil) > radius;\n    return ceil;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#distanceQuerySortKey(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#sortKey(double).mjava","sourceNew":"  /**\n   * binary search to find the exact sortKey needed to match the specified radius\n   * any sort key lte this is a query match.\n   */\n  public static double distanceQuerySortKey(double radius) {\n    // effectively infinite\n    if (radius >= haversinMeters(Double.MAX_VALUE)) {\n      return haversinMeters(Double.MAX_VALUE);\n    }\n\n    // this is a search through non-negative long space only\n    long lo = 0;\n    long hi = Double.doubleToRawLongBits(Double.MAX_VALUE);\n    while (lo <= hi) {\n      long mid = (lo + hi) >>> 1;\n      double sortKey = Double.longBitsToDouble(mid);\n      double midRadius = haversinMeters(sortKey);\n      if (midRadius == radius) {\n        return sortKey;\n      } else if (midRadius > radius) {\n        hi = mid - 1;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    // not found: this is because a user can supply an arbitrary radius, one that we will never\n    // calculate exactly via our haversin method.\n    double ceil = Double.longBitsToDouble(lo);\n    assert haversinMeters(ceil) > radius;\n    return ceil;\n  }\n\n","sourceOld":"  /**\n   * binary search to find the exact sortKey needed to match the specified radius\n   * any sort key <= this is a query match.\n   */\n  static double sortKey(double radius) {\n    // effectively infinite\n    if (radius >= SloppyMath.haversinMeters(Double.MAX_VALUE)) {\n      return SloppyMath.haversinMeters(Double.MAX_VALUE);\n    }\n\n    // this is a search through non-negative long space only\n    long lo = 0;\n    long hi = Double.doubleToRawLongBits(Double.MAX_VALUE);\n    while (lo <= hi) {\n      long mid = (lo + hi) >>> 1;\n      double sortKey = Double.longBitsToDouble(mid);\n      double midRadius = SloppyMath.haversinMeters(sortKey);\n      if (midRadius == radius) {\n        return sortKey;\n      } else if (midRadius > radius) {\n        hi = mid - 1;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    // not found: this is because a user can supply an arbitrary radius, one that we will never\n    // calculate exactly via our haversin method.\n    double ceil = Double.longBitsToDouble(lo);\n    assert SloppyMath.haversinMeters(ceil) > radius;\n    return ceil;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#distanceQuerySortKey(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * binary search to find the exact sortKey needed to match the specified radius\n   * any sort key lte this is a query match.\n   */\n  public static double distanceQuerySortKey(double radius) {\n    // effectively infinite\n    if (radius >= haversinMeters(Double.MAX_VALUE)) {\n      return haversinMeters(Double.MAX_VALUE);\n    }\n\n    // this is a search through non-negative long space only\n    long lo = 0;\n    long hi = Double.doubleToRawLongBits(Double.MAX_VALUE);\n    while (lo <= hi) {\n      long mid = (lo + hi) >>> 1;\n      double sortKey = Double.longBitsToDouble(mid);\n      double midRadius = haversinMeters(sortKey);\n      if (midRadius == radius) {\n        return sortKey;\n      } else if (midRadius > radius) {\n        hi = mid - 1;\n      } else {\n        lo = mid + 1;\n      }\n    }\n\n    // not found: this is because a user can supply an arbitrary radius, one that we will never\n    // calculate exactly via our haversin method.\n    double ceil = Double.longBitsToDouble(lo);\n    assert haversinMeters(ceil) > radius;\n    return ceil;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a62e86d7b9cc6dec3c09f771166aa2393fd95c99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"a62e86d7b9cc6dec3c09f771166aa2393fd95c99":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62e86d7b9cc6dec3c09f771166aa2393fd95c99","6aaba221b22442bdf0ef28770c25fe259dfb3f55","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}