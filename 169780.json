{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","commits":[{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node,\n                                                                              @SuppressWarnings({\"rawtypes\"})Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","sourceNew":"  public static Map<String, Map<String, List<Replica>>> getReplicaDetails(String node,\n                                                                              @SuppressWarnings({\"rawtypes\"})Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<Replica>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Replica>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Replica> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Replica(replicaName, node, collName, shard, (String) r.get(\"core\"),\n              Replica.State.ACTIVE, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node,\n                                                                              @SuppressWarnings({\"rawtypes\"})Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","sourceNew":null,"sourceOld":"  public static Map<String, Map<String, List<Replica>>> getReplicaDetails(String node,\n                                                                              @SuppressWarnings({\"rawtypes\"})Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<Replica>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Replica>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<Replica> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new Replica(replicaName, node, collName, shard, (String) r.get(\"core\"),\n              Replica.State.ACTIVE, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}