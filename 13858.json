{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#calcBoxByDistFromPtDEG(double,double,double,SpatialContext).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#calcBoxByDistFromPtDEG(double,double,double,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  public static Rectangle calcBoxByDistFromPtDEG(double lat, double lon, double distance, SpatialContext ctx) {\n    //See http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates Section 3.1, 3.2 and 3.3\n\n    double radius = ctx.getUnits().earthRadius();\n    double dist_rad = distance / radius;\n    double dist_deg = Math.toDegrees(dist_rad);\n\n    if (dist_deg == 0)\n      return ctx.makeRect(lon,lon,lat,lat);\n\n    if (dist_deg >= 180)//distance is >= opposite side of the globe\n      return ctx.getWorldBounds();\n\n    //--calc latitude bounds\n    double latN_deg = lat + dist_deg;\n    double latS_deg = lat - dist_deg;\n\n    if (latN_deg >= 90 || latS_deg <= -90) {//touches either pole\n      //we have special logic for longitude\n      double lonW_deg = -180, lonE_deg = 180;//world wrap: 360 deg\n      if (latN_deg <= 90 && latS_deg >= -90) {//doesn't pass either pole: 180 deg\n        lonW_deg = lon -90;\n        lonE_deg = lon +90;\n      }\n      if (latN_deg > 90)\n        latN_deg = 90;\n      if (latS_deg < -90)\n        latS_deg = -90;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);\n    } else {\n      //--calc longitude bounds\n      double lon_delta_deg = calcBoxByDistFromPtVertAxisOffsetDEG(lat, lon, distance, radius);\n\n      double lonW_deg = lon -lon_delta_deg;\n      double lonE_deg = lon +lon_delta_deg;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);//ctx will normalize longitude\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#calcBoxByDistFromPtDEG(double,double,double,SpatialContext).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#calcBoxByDistFromPtDEG(double,double,double,SpatialContext).mjava","sourceNew":"  public static Rectangle calcBoxByDistFromPtDEG(double lat, double lon, double distance, SpatialContext ctx) {\n    //See http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates Section 3.1, 3.2 and 3.3\n\n    double radius = ctx.getUnits().earthRadius();\n    double dist_rad = distance / radius;\n    double dist_deg = Math.toDegrees(dist_rad);\n\n    if (dist_deg == 0)\n      return ctx.makeRect(lon,lon,lat,lat);\n\n    if (dist_deg >= 180)//distance is >= opposite side of the globe\n      return ctx.getWorldBounds();\n\n    //--calc latitude bounds\n    double latN_deg = lat + dist_deg;\n    double latS_deg = lat - dist_deg;\n\n    if (latN_deg >= 90 || latS_deg <= -90) {//touches either pole\n      //we have special logic for longitude\n      double lonW_deg = -180, lonE_deg = 180;//world wrap: 360 deg\n      if (latN_deg <= 90 && latS_deg >= -90) {//doesn't pass either pole: 180 deg\n        lonW_deg = lon -90;\n        lonE_deg = lon +90;\n      }\n      if (latN_deg > 90)\n        latN_deg = 90;\n      if (latS_deg < -90)\n        latS_deg = -90;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);\n    } else {\n      //--calc longitude bounds\n      double lon_delta_deg = calcBoxByDistFromPtVertAxisOffsetDEG(lat, lon, distance, radius);\n\n      double lonW_deg = lon -lon_delta_deg;\n      double lonE_deg = lon +lon_delta_deg;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);//ctx will normalize longitude\n    }\n  }\n\n","sourceOld":"  public static Rectangle calcBoxByDistFromPtDEG(double lat, double lon, double distance, SpatialContext ctx) {\n    //See http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates Section 3.1, 3.2 and 3.3\n\n    double radius = ctx.getUnits().earthRadius();\n    double dist_rad = distance / radius;\n    double dist_deg = Math.toDegrees(dist_rad);\n\n    if (dist_deg == 0)\n      return ctx.makeRect(lon,lon,lat,lat);\n\n    if (dist_deg >= 180)//distance is >= opposite side of the globe\n      return ctx.getWorldBounds();\n\n    //--calc latitude bounds\n    double latN_deg = lat + dist_deg;\n    double latS_deg = lat - dist_deg;\n\n    if (latN_deg >= 90 || latS_deg <= -90) {//touches either pole\n      //we have special logic for longitude\n      double lonW_deg = -180, lonE_deg = 180;//world wrap: 360 deg\n      if (latN_deg <= 90 && latS_deg >= -90) {//doesn't pass either pole: 180 deg\n        lonW_deg = lon -90;\n        lonE_deg = lon +90;\n      }\n      if (latN_deg > 90)\n        latN_deg = 90;\n      if (latS_deg < -90)\n        latS_deg = -90;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);\n    } else {\n      //--calc longitude bounds\n      double lon_delta_deg = calcBoxByDistFromPtVertAxisOffsetDEG(lat, lon, distance, radius);\n\n      double lonW_deg = lon -lon_delta_deg;\n      double lonE_deg = lon +lon_delta_deg;\n\n      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);//ctx will normalize longitude\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}