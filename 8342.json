{"path":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(TermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    //document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    document.add(new Field(\"a\", customType, i + \" Do you really want to go and live in that house all winter?\"));\n    if (i > 0) {\n      //document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b0\", customType, i + \" All work and no play makes Jack a dull boy\"));\n\n      //document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      document.add(new Field(\"b1\", customType2, i + \" All work and no play makes Jack a dull boy\"));\n      \n      //document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n      customType3.setTokenized(false);\n      document.add(new Field(\"b1\", customType3, i + \" All work and no play makes Jack a dull boy\"));\n      \n      //document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      FieldType customType4 = new FieldType(TextField.TYPE_STORED);\n      customType4.setIndexed(false);\n      customType4.setTokenized(false);\n      document.add(new Field(\"b1\", customType4, i + \" All work and no play makes Jack a dull boy\"));\n      if (i > 1) {\n        //document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        document.add(new Field(\"c\", customType, i + \" Redrum redrum\"));\n        if (i > 2) {\n          //document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          document.add(new Field(\"d\", customType, i + \" Hello Danny, come and play with us... forever and ever. and ever.\"));\n          if (i > 3) {\n            //Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            //f.setOmitNorms(true);\n            FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n            customType5.setOmitNorms(true);\n            Field f = new Field(\"e\", customType5, i + \" Heres Johnny!\");\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              //document.add(new Field(\"f\", ts));\n              document.add(new TextField(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    if (i > 0) {\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      if (i > 1) {\n        document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        if (i > 2) {\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          if (i > 3) {\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            f.setOmitNorms(true);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              document.add(new Field(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":"  private void assembleDocument(Document document, int i) {\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    //document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", customType));\n    if (i > 0) {\n      //document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", customType));\n\n      //document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType2));\n      \n      //document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n      customType3.setTokenized(false);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType3));\n      \n      //document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      FieldType customType4 = new FieldType(TextField.TYPE_STORED);\n      customType4.setIndexed(false);\n      customType4.setTokenized(false);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType4));\n      if (i > 1) {\n        //document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        document.add(new Field(\"c\", i + \" Redrum redrum\", customType));\n        if (i > 2) {\n          //document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", customType));\n          if (i > 3) {\n            //Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            //f.setOmitNorms(true);\n            FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n            customType5.setOmitNorms(true);\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", customType5);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              //document.add(new Field(\"f\", ts));\n              document.add(new TextField(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assembleDocument(Document document, int i) {\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    //document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    document.add(new Field(\"a\", customType, i + \" Do you really want to go and live in that house all winter?\"));\n    if (i > 0) {\n      //document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b0\", customType, i + \" All work and no play makes Jack a dull boy\"));\n\n      //document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      document.add(new Field(\"b1\", customType2, i + \" All work and no play makes Jack a dull boy\"));\n      \n      //document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n      customType3.setTokenized(false);\n      document.add(new Field(\"b1\", customType3, i + \" All work and no play makes Jack a dull boy\"));\n      \n      //document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      FieldType customType4 = new FieldType(TextField.TYPE_STORED);\n      customType4.setIndexed(false);\n      customType4.setTokenized(false);\n      document.add(new Field(\"b1\", customType4, i + \" All work and no play makes Jack a dull boy\"));\n      if (i > 1) {\n        //document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        document.add(new Field(\"c\", customType, i + \" Redrum redrum\"));\n        if (i > 2) {\n          //document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          document.add(new Field(\"d\", customType, i + \" Hello Danny, come and play with us... forever and ever. and ever.\"));\n          if (i > 3) {\n            //Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            //f.setOmitNorms(true);\n            FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n            customType5.setOmitNorms(true);\n            Field f = new Field(\"e\", customType5, i + \" Heres Johnny!\");\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              //document.add(new Field(\"f\", ts));\n              document.add(new TextField(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#assembleDocument(Document,int).mjava","sourceNew":null,"sourceOld":"  private void assembleDocument(Document document, int i) {\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    //document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    document.add(new Field(\"a\", i + \" Do you really want to go and live in that house all winter?\", customType));\n    if (i > 0) {\n      //document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      document.add(new Field(\"b0\", i + \" All work and no play makes Jack a dull boy\", customType));\n\n      //document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS, Field.TermVector.NO));\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType2));\n      \n      //document.add(new Field(\"b2\", i + \" All work and no play makes Jack a dull boy\", Field.Store.NO, Field.Index.NOT_ANALYZED, Field.TermVector.NO));\n      FieldType customType3 = new FieldType(TextField.TYPE_UNSTORED);\n      customType3.setTokenized(false);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType3));\n      \n      //document.add(new Field(\"b3\", i + \" All work and no play makes Jack a dull boy\", Field.Store.YES, Field.Index.NO, Field.TermVector.NO));\n      FieldType customType4 = new FieldType(TextField.TYPE_STORED);\n      customType4.setIndexed(false);\n      customType4.setTokenized(false);\n      document.add(new Field(\"b1\", i + \" All work and no play makes Jack a dull boy\", customType4));\n      if (i > 1) {\n        //document.add(new Field(\"c\", i + \" Redrum redrum\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        document.add(new Field(\"c\", i + \" Redrum redrum\", customType));\n        if (i > 2) {\n          //document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          document.add(new Field(\"d\", i + \" Hello Danny, come and play with us... forever and ever. and ever.\", customType));\n          if (i > 3) {\n            //Field f = new Field(\"e\", i + \" Heres Johnny!\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS);\n            //f.setOmitNorms(true);\n            FieldType customType5 = new FieldType(TextField.TYPE_UNSTORED);\n            customType5.setOmitNorms(true);\n            Field f = new Field(\"e\", i + \" Heres Johnny!\", customType5);\n            document.add(f);\n            if (i > 4) {\n              final List<Token> tokens = new ArrayList<Token>(2);\n              Token t = createToken(\"the\", 0, 2, \"text\");\n              t.setPayload(new Payload(new byte[]{1, 2, 3}));\n              tokens.add(t);\n              t = createToken(\"end\", 3, 5, \"text\");\n              t.setPayload(new Payload(new byte[]{2}));\n              tokens.add(t);\n              tokens.add(createToken(\"fin\", 7, 9));\n              TokenStream ts = new TokenStream(Token.TOKEN_ATTRIBUTE_FACTORY) {\n                final AttributeImpl reusableToken = (AttributeImpl) addAttribute(CharTermAttribute.class);\n                Iterator<Token> it = tokens.iterator();\n                \n                @Override\n                public final boolean incrementToken() throws IOException {\n                  if (!it.hasNext()) {\n                    return false;\n                  }\n                  clearAttributes();\n                  it.next().copyTo(reusableToken);\n                  return true;\n                }\n\n                @Override\n                public void reset() throws IOException {\n                  it = tokens.iterator();\n                }\n              };\n              \n              //document.add(new Field(\"f\", ts));\n              document.add(new TextField(\"f\", ts));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}