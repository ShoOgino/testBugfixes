{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.indexOptions;\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.storePayloads;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.indexOptions;\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.storePayloads;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.indexOptions;\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.storePayloads;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.indexOptions;\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.storePayloads;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6616b1fd222bb5a60f7f7856ace312252bc97890"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}