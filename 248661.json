{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldDoc().mjava","commits":[{"id":"18186b90a6780ae50b4d7164fe10e4b0baff9841","date":1360894495,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testDemo().mjava","sourceNew":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"2\", searcher.doc(td.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[1].doc).get(\"id\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testFieldDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldDoc().mjava","sourceNew":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldDoc().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testFieldDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldDoc().mjava","sourceNew":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on internal docid order */\n  public void testFieldDoc() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort(SortField.FIELD_DOC);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // docid 0, then docid 1\n    assertEquals(0, td.scoreDocs[0].doc);\n    assertEquals(1, td.scoreDocs[1].doc);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["18186b90a6780ae50b4d7164fe10e4b0baff9841"],"18186b90a6780ae50b4d7164fe10e4b0baff9841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","5f183729ece15402db94402d482f29ebac4f7f54"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18186b90a6780ae50b4d7164fe10e4b0baff9841"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18186b90a6780ae50b4d7164fe10e4b0baff9841":["5f183729ece15402db94402d482f29ebac4f7f54","3b41f996b22bd5518650f897d050088ff808ec03"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18186b90a6780ae50b4d7164fe10e4b0baff9841","3b41f996b22bd5518650f897d050088ff808ec03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}