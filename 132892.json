{"path":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","commits":[{"id":"1fc56848da7b3f927bb9840e8aedf09ee11cede1","date":1424871235,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = ((SolrDispatchFilter) runner.getDispatchFilter().getFilter()).getCores();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestTrackingShardHandlerFactory#testRequestTracking().mjava","sourceNew":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","sourceOld":"  @Test\n  @BaseDistributedSearchTestCase.ShardsFixed(num = 2)\n  public void testRequestTracking() throws Exception {\n    String collectionName = \"testTwoPhase\";\n\n    List<JettySolrRunner> runners = new ArrayList<>(jettys);\n    runners.add(controlJetty);\n\n    TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue = new TrackingShardHandlerFactory.RequestTrackingQueue();\n    TrackingShardHandlerFactory.setTrackingQueue(runners, trackingQueue);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertSame(trackingQueue, trackingShardHandlerFactory.getTrackingQueue());\n    }\n\n    createCollection(collectionName, \"conf1\", 2, 1, 1);\n\n    waitForRecoveriesToFinish(collectionName, true);\n\n    List<TrackingShardHandlerFactory.ShardRequestAndParams> coreAdminRequests = trackingQueue.getCoreAdminRequests();\n    assertNotNull(coreAdminRequests);\n    assertEquals(\"Unexpected number of core admin requests were found\", 2, coreAdminRequests.size());\n\n    CloudSolrClient client = cloudClient;\n\n    client.setDefaultCollection(collectionName);\n        /*\n        hash of b is 95de7e03 high bits=2 shard=shard1\n        hash of e is 656c4367 high bits=1 shard=shard2\n         */\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", (i % 2 == 0 ? \"b!\" : \"e!\") + i);\n      doc.addField(\"a_i\", i);\n      doc.addField(\"a_t\", \"text_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    client.query(new SolrQuery(\"*:*\"));\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n    getTopIdsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_TOP_IDS);\n    assertNotNull(getTopIdsRequest);\n\n    TrackingShardHandlerFactory.ShardRequestAndParams getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard1\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n    getFieldsRequest = trackingQueue.getShardRequestByPurpose(client.getZkStateReader(), collectionName, \"shard2\", ShardRequest.PURPOSE_GET_FIELDS);\n    assertNotNull(getFieldsRequest);\n\n    int numRequests = 0;\n    Map<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // 4 shard requests + 2 core admin requests (invoked by create collection API)\n    assertEquals(\"Total number of requests do not match expected\", 6, numRequests);\n\n    // reset\n    TrackingShardHandlerFactory.setTrackingQueue(runners, null);\n\n    for (JettySolrRunner runner : runners) {\n      CoreContainer container = runner.getCoreContainer();\n      ShardHandlerFactory factory = container.getShardHandlerFactory();\n      assert factory instanceof TrackingShardHandlerFactory;\n      @SuppressWarnings(\"resource\")\n      TrackingShardHandlerFactory trackingShardHandlerFactory = (TrackingShardHandlerFactory) factory;\n      assertFalse(trackingShardHandlerFactory.isTracking());\n    }\n\n    // make another request and verify\n    client.query(new SolrQuery(\"*:*\"));\n    numRequests = 0;\n    allRequests = trackingQueue.getAllRequests();\n    for (Map.Entry<String, List<TrackingShardHandlerFactory.ShardRequestAndParams>> entry : allRequests.entrySet()) {\n      numRequests += entry.getValue().size();\n    }\n    // should still be 6\n    assertEquals(\"Total number of shard requests do not match expected\", 6, numRequests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"197bbedf08450ade98a11f4a0001448059666bec":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"ba055e19afc289adcb5bedaf68513793a7254012":["28288370235ed02234a64753cdbf0c6ec096304a"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["1088b72b3b4cc45316b7595bd09023c859cd2327","197bbedf08450ade98a11f4a0001448059666bec"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["ba055e19afc289adcb5bedaf68513793a7254012"],"28288370235ed02234a64753cdbf0c6ec096304a":["1088b72b3b4cc45316b7595bd09023c859cd2327","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"ba055e19afc289adcb5bedaf68513793a7254012":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1088b72b3b4cc45316b7595bd09023c859cd2327"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"28288370235ed02234a64753cdbf0c6ec096304a":["ba055e19afc289adcb5bedaf68513793a7254012"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}