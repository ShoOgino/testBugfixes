{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","commits":[{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new TermsQuery(getFieldName(), terms);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new QueryWrapperFilter(new TermsQuery(getFieldName(), terms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new TermsQuery(getFieldName(), terms);\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new TermsQuery(getFieldName(), terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new TermsQuery(getFieldName(), terms);\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    //--get a List of BytesRef for each term we want (no parents, no leaf bytes))\n    final int GUESS_NUM_TERMS;\n    if (shape instanceof Point)\n      GUESS_NUM_TERMS = detailLevel;//perfect guess\n    else\n      GUESS_NUM_TERMS = 4096;//should this be a method on SpatialPrefixTree?\n\n    BytesRefBuilder masterBytes = new BytesRefBuilder();//shared byte array for all terms\n    List<BytesRef> terms = new ArrayList<>(GUESS_NUM_TERMS);\n\n    CellIterator cells = grid.getTreeCellIterator(shape, detailLevel);\n    while (cells.hasNext()) {\n      Cell cell = cells.next();\n      if (!cell.isLeaf())\n        continue;\n      BytesRef term = cell.getTokenBytesNoLeaf(null);//null because we want a new BytesRef\n      //We copy out the bytes because it may be re-used across the iteration. This also gives us the opportunity\n      // to use one contiguous block of memory for the bytes of all terms we need.\n      masterBytes.grow(masterBytes.length() + term.length);\n      masterBytes.append(term);\n      term.bytes = null;//don't need; will reset later\n      term.offset = masterBytes.length() - term.length;\n      terms.add(term);\n    }\n    //doing this now because if we did earlier, it's possible the bytes needed to grow()\n    for (BytesRef byteRef : terms) {\n      byteRef.bytes = masterBytes.bytes();\n    }\n    //unfortunately TermsQuery will needlessly sort & dedupe\n    //TODO an automatonQuery might be faster?\n    return new TermsQuery(getFieldName(), terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["672b198fc3dce868916c727917cae58c2906763d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}