{"path":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,LightAutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, LightAutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toLightAutomaton(provider));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,LightAutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, LightAutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toLightAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   * @param maxDeterminizedStates maximum number of states that compiling the\n   *  automaton for the regexp can result in.  Set higher to allow more complex\n   *  queries and lower to prevent memory exhaustion.\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider,\n      int maxDeterminizedStates) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(\n      provider, maxDeterminizedStates));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param maxDeterminizedStates maximum number of states that compiling the\n   *  automaton for the regexp can result in.  Set higher to allow more complex\n   *  queries and lower to prevent memory exhaustion.\n   */\n  public RegexpQuery(Term term, int flags, int maxDeterminizedStates) {\n    this(term, flags, defaultProvider, maxDeterminizedStates);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b316f82baae88f5e279893a9cb7eee51fd8902f","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}