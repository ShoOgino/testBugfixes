{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(nodeId);\n    if (replicas != null) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(nodeId);\n    if (replicas != null) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        if (state != Replica.State.ACTIVE) {\n          r.getVariables().remove(ZkStateReader.LEADER_PROP);\n        }\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(nodeId);\n    if (replicas != null) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (replicas) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        if (state != Replica.State.ACTIVE) {\n          r.getVariables().remove(ZkStateReader.LEADER_PROP);\n        }\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.get(nodeId);\n    if (replicas != null) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        if (state != Replica.State.ACTIVE) {\n          r.getVariables().remove(ZkStateReader.LEADER_PROP);\n        }\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#setReplicaStates(String,Replica.State,Set[String]).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (replicas) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        if (state != Replica.State.ACTIVE) {\n          r.getVariables().remove(ZkStateReader.LEADER_PROP);\n        }\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void setReplicaStates(String nodeId, Replica.State state, Set<String> changedCollections) {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (replicas) {\n      replicas.forEach(r -> {\n        r.getVariables().put(ZkStateReader.STATE_PROP, state.toString());\n        if (state != Replica.State.ACTIVE) {\n          r.getVariables().remove(ZkStateReader.LEADER_PROP);\n        }\n        changedCollections.add(r.getCollection());\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}