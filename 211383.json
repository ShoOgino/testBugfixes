{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#convertTlogEntryToAddUpdateCommand(SolrQueryRequest,List,int,long).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#convertTlogEntryToAddUpdateCommand(SolrQueryRequest,List,int,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a entry from the transaction log containing a document, return a new AddUpdateCommand that \n   * can be applied to ADD the document or do an UPDATE_INPLACE.\n   *\n   * @param req The request to use as the owner of the new AddUpdateCommand\n   * @param entry Entry from the transaction log that contains the document to be added\n   * @param operation The value of the operation flag; this must be either ADD or UPDATE_INPLACE -- \n   *        if it is UPDATE_INPLACE then the previous version will also be read from the entry\n   * @param version Version already obtained from the entry.\n   */\n  public static AddUpdateCommand convertTlogEntryToAddUpdateCommand(SolrQueryRequest req, List entry,\n                                                                    int operation, long version) {\n    assert operation == UpdateLog.ADD || operation == UpdateLog.UPDATE_INPLACE;\n    SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size()-1);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    cmd.solrDoc = sdoc;\n    cmd.setVersion(version);\n    \n    if (operation == UPDATE_INPLACE) {\n      long prevVersion = (Long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      cmd.prevVersion = prevVersion;\n    }\n    return cmd;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#convertTlogEntryToAddUpdateCommand(SolrQueryRequest,List,int,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a entry from the transaction log containing a document, return a new AddUpdateCommand that \n   * can be applied to ADD the document or do an UPDATE_INPLACE.\n   *\n   * @param req The request to use as the owner of the new AddUpdateCommand\n   * @param entry Entry from the transaction log that contains the document to be added\n   * @param operation The value of the operation flag; this must be either ADD or UPDATE_INPLACE -- \n   *        if it is UPDATE_INPLACE then the previous version will also be read from the entry\n   * @param version Version already obtained from the entry.\n   */\n  public static AddUpdateCommand convertTlogEntryToAddUpdateCommand(SolrQueryRequest req, List entry,\n                                                                    int operation, long version) {\n    assert operation == UpdateLog.ADD || operation == UpdateLog.UPDATE_INPLACE;\n    SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size()-1);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    cmd.solrDoc = sdoc;\n    cmd.setVersion(version);\n    \n    if (operation == UPDATE_INPLACE) {\n      long prevVersion = (Long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      cmd.prevVersion = prevVersion;\n    }\n    return cmd;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#convertTlogEntryToAddUpdateCommand(SolrQueryRequest,List,int,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#convertTlogEntryToAddUpdateCommand(SolrQueryRequest,List,int,long).mjava","sourceNew":"  /**\n   * Given a entry from the transaction log containing a document, return a new AddUpdateCommand that \n   * can be applied to ADD the document or do an UPDATE_INPLACE.\n   *\n   * @param req The request to use as the owner of the new AddUpdateCommand\n   * @param entry Entry from the transaction log that contains the document to be added\n   * @param operation The value of the operation flag; this must be either ADD or UPDATE_INPLACE -- \n   *        if it is UPDATE_INPLACE then the previous version will also be read from the entry\n   * @param version Version already obtained from the entry.\n   */\n  public static AddUpdateCommand convertTlogEntryToAddUpdateCommand(SolrQueryRequest req,\n                                                                    @SuppressWarnings({\"rawtypes\"})List entry,\n                                                                    int operation, long version) {\n    assert operation == UpdateLog.ADD || operation == UpdateLog.UPDATE_INPLACE;\n    SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size()-1);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    cmd.solrDoc = sdoc;\n    cmd.setVersion(version);\n    \n    if (operation == UPDATE_INPLACE) {\n      long prevVersion = (Long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      cmd.prevVersion = prevVersion;\n    }\n    return cmd;\n  }\n\n","sourceOld":"  /**\n   * Given a entry from the transaction log containing a document, return a new AddUpdateCommand that \n   * can be applied to ADD the document or do an UPDATE_INPLACE.\n   *\n   * @param req The request to use as the owner of the new AddUpdateCommand\n   * @param entry Entry from the transaction log that contains the document to be added\n   * @param operation The value of the operation flag; this must be either ADD or UPDATE_INPLACE -- \n   *        if it is UPDATE_INPLACE then the previous version will also be read from the entry\n   * @param version Version already obtained from the entry.\n   */\n  public static AddUpdateCommand convertTlogEntryToAddUpdateCommand(SolrQueryRequest req, List entry,\n                                                                    int operation, long version) {\n    assert operation == UpdateLog.ADD || operation == UpdateLog.UPDATE_INPLACE;\n    SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size()-1);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    cmd.solrDoc = sdoc;\n    cmd.setVersion(version);\n    \n    if (operation == UPDATE_INPLACE) {\n      long prevVersion = (Long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      cmd.prevVersion = prevVersion;\n    }\n    return cmd;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}