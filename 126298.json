{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","commits":[{"id":"defc703c2a146fe90a612765e6ca29b9187a8fec","date":1425369902,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","pathOld":"/dev/null","sourceNew":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery bq = new BooleanQuery();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq;\n      case 2:\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(randomTerm());\n        pq.add(randomTerm());\n        pq.setSlop(random().nextInt(2));\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","pathOld":"/dev/null","sourceNew":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery bq = new BooleanQuery();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq;\n      case 2:\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(randomTerm());\n        pq.add(randomTerm());\n        pq.setSlop(random().nextInt(2));\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","sourceNew":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery bq = new BooleanQuery();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq;\n      case 2:\n        Term t1 = randomTerm();\n        Term t2 = randomTerm();\n        PhraseQuery pq = new PhraseQuery(random().nextInt(2), t1.field(), t1.bytes(), t2.bytes());\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery bq = new BooleanQuery();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq;\n      case 2:\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(randomTerm());\n        pq.add(randomTerm());\n        pq.setSlop(random().nextInt(2));\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","sourceNew":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq.build();\n      case 2:\n        Term t1 = randomTerm();\n        Term t2 = randomTerm();\n        PhraseQuery pq = new PhraseQuery(random().nextInt(2), t1.field(), t1.bytes(), t2.bytes());\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery bq = new BooleanQuery();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq;\n      case 2:\n        Term t1 = randomTerm();\n        Term t2 = randomTerm();\n        PhraseQuery pq = new PhraseQuery(random().nextInt(2), t1.field(), t1.bytes(), t2.bytes());\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#buildRandomQuery(int).mjava","sourceNew":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq.build();\n      case 2:\n        Term t1 = randomTerm();\n        Term t2 = randomTerm();\n        PhraseQuery pq = new PhraseQuery(random().nextInt(2), t1.field(), t1.bytes(), t2.bytes());\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        List<Query> disjuncts = new ArrayList<>();\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          disjuncts.add(buildRandomQuery(level + 1));\n        }\n        return new DisjunctionMaxQuery(disjuncts, random().nextFloat());\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static Query buildRandomQuery(int level) {\n    if (level == 10) {\n      // at most 10 levels\n      return new MatchAllDocsQuery();\n    }\n    switch (random().nextInt(6)) {\n      case 0:\n        return new TermQuery(randomTerm());\n      case 1:\n        BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        final int numClauses = TestUtil.nextInt(random(), 1, 3);\n        int numShould = 0;\n        for (int i = 0; i < numClauses; ++i) {\n          final Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n          bq.add(buildRandomQuery(level + 1), occur);\n          if (occur == Occur.SHOULD) {\n            numShould++;\n          }\n        }\n        bq.setMinimumNumberShouldMatch(TestUtil.nextInt(random(), 0, numShould));\n        return bq.build();\n      case 2:\n        Term t1 = randomTerm();\n        Term t2 = randomTerm();\n        PhraseQuery pq = new PhraseQuery(random().nextInt(2), t1.field(), t1.bytes(), t2.bytes());\n        return pq;\n      case 3:\n        return new MatchAllDocsQuery();\n      case 4:\n        return new ConstantScoreQuery(buildRandomQuery(level + 1));\n      case 5:\n        DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(random().nextFloat());\n        final int numQueries = TestUtil.nextInt(random(), 1, 3);\n        for (int i = 0; i < numQueries; ++i) {\n          dmq.add(buildRandomQuery(level + 1));\n        }\n        return dmq;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","defc703c2a146fe90a612765e6ca29b9187a8fec"],"e9e1499c5d26c936238506df90a3c02c76707722":["defc703c2a146fe90a612765e6ca29b9187a8fec"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"defc703c2a146fe90a612765e6ca29b9187a8fec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","defc703c2a146fe90a612765e6ca29b9187a8fec"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"defc703c2a146fe90a612765e6ca29b9187a8fec":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}