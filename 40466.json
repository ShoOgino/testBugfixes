{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesLine(double,double,double,double).mjava","commits":[{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesLine(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Returns true if the line crosses any edge in this edge subtree */\n    boolean crossesLine(double a2x, double a2y, double b2x, double b2y) {\n      double minY = StrictMath.min(a2y, b2y);\n      double maxY = StrictMath.max(a2y, b2y);\n      if (minY <= max) {\n        double a1x = lon1;\n        double a1y = lat1;\n        double b1x = lon2;\n        double b1y = lat2;\n\n        double minX = StrictMath.min(a2x, b2x);\n        double maxX = StrictMath.max(a2x, b2x);\n\n        boolean outside = (a1y < minY && b1y < minY) ||\n            (a1y > maxY && b1y > maxY) ||\n            (a1x < minX && b1x < minX) ||\n            (a1x > maxX && b1x > maxX);\n        if (outside == false && lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n\n        if (left != null && left.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n        if (right != null && maxY >= low && right.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesLine(double,double,double,double).mjava","sourceNew":null,"sourceOld":"    /** Returns true if the line crosses any edge in this edge subtree */\n    boolean crossesLine(double a2x, double a2y, double b2x, double b2y) {\n      double minY = StrictMath.min(a2y, b2y);\n      double maxY = StrictMath.max(a2y, b2y);\n      if (minY <= max) {\n        double a1x = lon1;\n        double a1y = lat1;\n        double b1x = lon2;\n        double b1y = lat2;\n\n        double minX = StrictMath.min(a2x, b2x);\n        double maxX = StrictMath.max(a2x, b2x);\n\n        boolean outside = (a1y < minY && b1y < minY) ||\n            (a1y > maxY && b1y > maxY) ||\n            (a1x < minX && b1x < minX) ||\n            (a1x > maxX && b1x > maxX);\n        if (outside == false && lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n\n        if (left != null && left.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n        if (right != null && maxY >= low && right.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree.Edge#crossesLine(double,double,double,double).mjava","sourceNew":null,"sourceOld":"    /** Returns true if the line crosses any edge in this edge subtree */\n    boolean crossesLine(double a2x, double a2y, double b2x, double b2y) {\n      double minY = StrictMath.min(a2y, b2y);\n      double maxY = StrictMath.max(a2y, b2y);\n      if (minY <= max) {\n        double a1x = lon1;\n        double a1y = lat1;\n        double b1x = lon2;\n        double b1y = lat2;\n\n        double minX = StrictMath.min(a2x, b2x);\n        double maxX = StrictMath.max(a2x, b2x);\n\n        boolean outside = (a1y < minY && b1y < minY) ||\n            (a1y > maxY && b1y > maxY) ||\n            (a1x < minX && b1x < minX) ||\n            (a1x > maxX && b1x > maxX);\n        if (outside == false && lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n\n        if (left != null && left.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n        if (right != null && maxY >= low && right.crossesLine(a2x, a2y, b2x, b2y)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fc005279ab64cbf458ccef2ada610bc1a04b6139","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}