{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      } else {\n        LOG.info(\"Failed to unregister mbean: \" + key\n                + \" because it was not registered\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      // remove legacy name\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n      // remove new name\n      String beanName = createBeanName(infoBean, key);\n      name = nameFactory.createName(null, registryName, beanName);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      // remove legacy name\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n      // remove new name\n      String beanName = createBeanName(infoBean, key);\n      name = nameFactory.createName(null, registryName, beanName);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":null,"sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      // remove legacy name\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n      // remove new name\n      String beanName = createBeanName(infoBean, key);\n      name = nameFactory.createName(null, registryName, beanName);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#unregister(String,SolrInfoMBean).mjava","sourceNew":null,"sourceOld":"  private void unregister(String key, SolrInfoMBean infoBean) {\n    if (server == null)\n      return;\n\n    try {\n      // remove legacy name\n      ObjectName name = getObjectName(key, infoBean);\n      if (server.isRegistered(name) && coreHashCode.equals(server.getAttribute(name, \"coreHashCode\"))) {\n        server.unregisterMBean(name);\n      }\n      // remove new name\n      String beanName = createBeanName(infoBean, key);\n      name = nameFactory.createName(null, registryName, beanName);\n      if (server.isRegistered(name)) {\n        server.unregisterMBean(name);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to unregister info bean: \" + key, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["c26f00b574427b55127e869b935845554afde1fa"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["feb75c13cdf6b27b36407e4b15b35cf3142ab619","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}