{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(ID, id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(ID, id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    // collection\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["915201312eef398482b3dffe8a297e1809f3b29a"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["10b9c6c42133576daaccbd79bd04c88511b9caca","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["915201312eef398482b3dffe8a297e1809f3b29a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"10b9c6c42133576daaccbd79bd04c88511b9caca":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"915201312eef398482b3dffe8a297e1809f3b29a":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}