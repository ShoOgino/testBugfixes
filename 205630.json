{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        Similarity fieldSim = sim.get(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        SingleByteSource singleByteSource = new SingleByteSource(new byte[] {norm});\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!fieldName.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        Similarity fieldSim = sim.get(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        fieldSim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        Similarity fieldSim = sim.get(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        SingleByteSource singleByteSource = new SingleByteSource(new byte[] {norm});\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        Similarity fieldSim = sim.get(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        fieldSim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      Similarity sim = getSimilarity();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(field, 0, numTokens, numOverlapTokens, 0, boost);\n        Norm norm = new Norm();\n        sim.computeNorm(invertState, norm);\n        SingleValueSource singleByteSource = new SingleValueSource(norm);\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}