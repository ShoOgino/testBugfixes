{"path":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","commits":[{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      infoStream.println(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n                         deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n                         deletesFlushed.queries.size() + \" deleted queries on \" +\n                         + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.doCommit();\n          } finally {\n            reader.doClose();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84acdfa12c18361ff932244db20470fce117e52d","date":1206384355,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.doCommit();\n          } finally {\n            reader.doClose();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      infoStream.println(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n                         deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n                         deletesFlushed.queries.size() + \" deleted queries on \" +\n                         + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.doCommit();\n          } finally {\n            reader.doClose();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.commit();\n          } finally {\n            // Force reader to not have changes; if we hit\n            // an exception during commit, we don't want\n            // close to retry the commit:\n            reader.hasChanges = false;\n            reader.close();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.doCommit();\n          } finally {\n            reader.doClose();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n      IndexReader reader = SegmentReader.get(infos.info(i), false);\n      boolean success = false;\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n        success = true;\n      } finally {\n        if (reader != null) {\n          try {\n            if (success)\n              reader.commit();\n          } finally {\n            // Force reader to not have changes; if we hit\n            // an exception during commit, we don't want\n            // close to retry the commit:\n            reader.hasChanges = false;\n            reader.close();\n          }\n        }\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["84acdfa12c18361ff932244db20470fce117e52d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84acdfa12c18361ff932244db20470fce117e52d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["84acdfa12c18361ff932244db20470fce117e52d"],"84acdfa12c18361ff932244db20470fce117e52d":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}