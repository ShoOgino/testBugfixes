{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape();\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape();\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b","date":1503230479,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape();\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3051d6122751c8f6cc1e9cf24592658b59843ec2","date":1503298024,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape();\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc17dc53660d8859b336b5110d741adaf68686f6","date":1505134847,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#collection(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#collection(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated a GeoCompositeMembershipShape under given constraints. Returns\n   * NULL if it cannot build the GGeoCompositeMembershipShape under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoCompositeMembershipShape.\n   */\n  private GeoCompositeAreaShape collection(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_SHAPE_ITERATIONS) {\n      iterations++;\n      int numberShapes =  random().nextInt(3) + 2;\n      GeoCompositeAreaShape collection = new GeoCompositeAreaShape(planetModel);\n      for(int i=0; i<numberShapes;i++){\n        GeoPolygon member = convexPolygon(planetModel, constraints);\n        if (member != null){\n          collection.addShape(member);\n        }\n      }\n      if (collection.shapes.size() ==0){\n        continue;\n      }\n      return collection;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["3051d6122751c8f6cc1e9cf24592658b59843ec2","cc17dc53660d8859b336b5110d741adaf68686f6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc17dc53660d8859b336b5110d741adaf68686f6":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc17dc53660d8859b336b5110d741adaf68686f6"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b","cc17dc53660d8859b336b5110d741adaf68686f6"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"cc17dc53660d8859b336b5110d741adaf68686f6":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}