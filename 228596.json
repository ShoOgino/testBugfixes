{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","commits":[{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8657e27d6bdd6107b9d64da71c635e1f47b59e","date":1390524786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87bed47fd547f864e7fe055b2a3df19fa4b151dc","date":1478615788,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n    return readObject(dis);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readVal(DataInputInputStream).mjava","sourceNew":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n    return readObject(dis);\n  }\n\n","sourceOld":"  public Object readVal(DataInputInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch (tagByte >>> 5) {\n      case STR >>> 5:\n        return readStr(dis);\n      case SINT >>> 5:\n        return readSmallInt(dis);\n      case SLONG >>> 5:\n        return readSmallLong(dis);\n      case ARR >>> 5:\n        return readArray(dis);\n      case ORDERED_MAP >>> 5:\n        return readOrderedMap(dis);\n      case NAMED_LST >>> 5:\n        return readNamedList(dis);\n      case EXTERN_STRING >>> 5:\n        return readExternString(dis);\n    }\n\n    switch (tagByte) {\n      case NULL:\n        return null;\n      case DATE:\n        return new Date(dis.readLong());\n      case INT:\n        return dis.readInt();\n      case BOOL_TRUE:\n        return Boolean.TRUE;\n      case BOOL_FALSE:\n        return Boolean.FALSE;\n      case FLOAT:\n        return dis.readFloat();\n      case DOUBLE:\n        return dis.readDouble();\n      case LONG:\n        return dis.readLong();\n      case BYTE:\n        return dis.readByte();\n      case SHORT:\n        return dis.readShort();\n      case MAP:\n        return readMap(dis);\n      case SOLRDOC:\n        return readSolrDocument(dis);\n      case SOLRDOCLST:\n        return readSolrDocumentList(dis);\n      case BYTEARR:\n        return readByteArray(dis);\n      case ITERATOR:\n        return readIterator(dis);\n      case END:\n        return END_OBJ;\n      case SOLRINPUTDOC:\n        return readSolrInputDocument(dis);\n      case ENUM_FIELD_VALUE:\n        return readEnumFieldValue(dis);\n      case MAP_ENTRY:\n        return readMapEntry(dis);\n      case MAP_ENTRY_ITER:\n        return readMapIter(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2fcfd8b392582391d5804daa94c05f917c7fbdc7","19275ba31e621f6da1b83bf13af75233876fd3d4"],"727bb765ff2542275f6d31f67be18d7104bae148":["199dfa410f1fdbfd3294106b04096cce5ed34b21","da8b6cfd1b67b932db9907356935046c4d40d033"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da8b6cfd1b67b932db9907356935046c4d40d033"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["727bb765ff2542275f6d31f67be18d7104bae148"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["da8b6cfd1b67b932db9907356935046c4d40d033","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}