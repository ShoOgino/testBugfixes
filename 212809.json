{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final List thrown = new ArrayList();\n\n    final IndexWriter writer = new IndexWriter(new MockRAMDirectory(), new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED) {\n        @Override\n        public void message(final String message) {\n          if (message.startsWith(\"now flush at close\") && 0 == thrown.size()) {\n            thrown.add(null);\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n      };\n\n    // need to set an info stream so message is called\n    writer.setInfoStream(new PrintStream(new ByteArrayOutputStream()));\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}