{"path":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","commits":[{"id":"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9","date":1395396517,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation secondPassExplanation = searcher.explain(query, docID);\n\n    Float secondPassScore = secondPassExplanation.isMatch() ? secondPassExplanation.getValue() : null;\n\n    float score;\n    if (secondPassScore == null) {\n      score = combine(firstPassExplanation.getValue(), false, 0.0f);\n    } else {\n      score = combine(firstPassExplanation.getValue(), true,  secondPassScore.floatValue());\n    }\n\n    Explanation result = new Explanation(score, \"combined first and second pass score using \" + getClass());\n\n    Explanation first = new Explanation(firstPassExplanation.getValue(), \"first pass score\");\n    first.addDetail(firstPassExplanation);\n    result.addDetail(first);\n\n    Explanation second;\n    if (secondPassScore == null) {\n      second = new Explanation(0.0f, \"no second pass score\");\n    } else {\n      second = new Explanation(secondPassScore, \"second pass score\");\n    }\n    second.addDetail(secondPassExplanation);\n    result.addDetail(second);\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation secondPassExplanation = searcher.explain(query, docID);\n\n    Float secondPassScore = secondPassExplanation.isMatch() ? secondPassExplanation.getValue() : null;\n\n    float score;\n    if (secondPassScore == null) {\n      score = combine(firstPassExplanation.getValue(), false, 0.0f);\n    } else {\n      score = combine(firstPassExplanation.getValue(), true,  secondPassScore.floatValue());\n    }\n\n    Explanation first = Explanation.match(firstPassExplanation.getValue(), \"first pass score\", firstPassExplanation);\n\n    Explanation second;\n    if (secondPassScore == null) {\n      second = Explanation.noMatch(\"no second pass score\");\n    } else {\n      second = Explanation.match(secondPassScore, \"second pass score\", secondPassExplanation);\n    }\n\n    return Explanation.match(score, \"combined first and second pass score using \" + getClass(), first, second);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation secondPassExplanation = searcher.explain(query, docID);\n\n    Float secondPassScore = secondPassExplanation.isMatch() ? secondPassExplanation.getValue() : null;\n\n    float score;\n    if (secondPassScore == null) {\n      score = combine(firstPassExplanation.getValue(), false, 0.0f);\n    } else {\n      score = combine(firstPassExplanation.getValue(), true,  secondPassScore.floatValue());\n    }\n\n    Explanation result = new Explanation(score, \"combined first and second pass score using \" + getClass());\n\n    Explanation first = new Explanation(firstPassExplanation.getValue(), \"first pass score\");\n    first.addDetail(firstPassExplanation);\n    result.addDetail(first);\n\n    Explanation second;\n    if (secondPassScore == null) {\n      second = new Explanation(0.0f, \"no second pass score\");\n    } else {\n      second = new Explanation(secondPassScore, \"second pass score\");\n    }\n    second.addDetail(secondPassExplanation);\n    result.addDetail(second);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation secondPassExplanation = searcher.explain(query, docID);\n\n    Number secondPassScore = secondPassExplanation.isMatch() ? secondPassExplanation.getValue() : null;\n\n    float score;\n    if (secondPassScore == null) {\n      score = combine(firstPassExplanation.getValue().floatValue(), false, 0.0f);\n    } else {\n      score = combine(firstPassExplanation.getValue().floatValue(), true,  secondPassScore.floatValue());\n    }\n\n    Explanation first = Explanation.match(firstPassExplanation.getValue(), \"first pass score\", firstPassExplanation);\n\n    Explanation second;\n    if (secondPassScore == null) {\n      second = Explanation.noMatch(\"no second pass score\");\n    } else {\n      second = Explanation.match(secondPassScore, \"second pass score\", secondPassExplanation);\n    }\n\n    return Explanation.match(score, \"combined first and second pass score using \" + getClass(), first, second);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation secondPassExplanation = searcher.explain(query, docID);\n\n    Float secondPassScore = secondPassExplanation.isMatch() ? secondPassExplanation.getValue() : null;\n\n    float score;\n    if (secondPassScore == null) {\n      score = combine(firstPassExplanation.getValue(), false, 0.0f);\n    } else {\n      score = combine(firstPassExplanation.getValue(), true,  secondPassScore.floatValue());\n    }\n\n    Explanation first = Explanation.match(firstPassExplanation.getValue(), \"first pass score\", firstPassExplanation);\n\n    Explanation second;\n    if (secondPassScore == null) {\n      second = Explanation.noMatch(\"no second pass score\");\n    } else {\n      second = Explanation.match(secondPassScore, \"second pass score\", secondPassExplanation);\n    }\n\n    return Explanation.match(score, \"combined first and second pass score using \" + getClass(), first, second);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}