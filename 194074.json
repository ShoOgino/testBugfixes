{"path":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testWildcardCaseAccentFolding().mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testWildcardCaseAccentFolding().mjava","pathOld":"/dev/null","sourceNew":"  // test the wildcard queries find only one doc  where the query is uppercased and/or accented.\n  @Test\n  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"Á*C*\", \"ÁB*1\", \"ABÇ*g1\", \"Á*FG1\"},      // these should find only doc 0\n        {\"H*k*\", \"HÏ*l?*\", \"HìJ*n*\", \"HìJ*m*\"},   // these should find only doc 1\n        {\"O*ř*\", \"ÖP*ş???\", \"OPQ*S?Ů*\", \"ÖP*1\"},  // these should find only doc 2\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testWildcardCaseAccentFolding().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testWildcardCaseAccentFolding().mjava","sourceNew":"  // test the wildcard queries find only one doc  where the query is uppercased and/or accented.\n  @Test\n  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"Á*C*\", \"ÁB*1\", \"ABÇ*g1\", \"Á*FG1\"},      // these should find only doc 0\n        {\"H*k*\", \"HÏ*l?*\", \"HìJ*n*\", \"HìJ*m*\"},   // these should find only doc 1\n        {\"O*ř*\", \"ÖP*ş???\", \"OPQ*S?Ů*\", \"ÖP*1\"},  // these should find only doc 2\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_oldstyle:\" + me),\n            \"//result[@numFound='0']\");\n      }\n    }\n  }\n\n","sourceOld":"  // test the wildcard queries find only one doc  where the query is uppercased and/or accented.\n  @Test\n  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"Á*C*\", \"ÁB*1\", \"ABÇ*g1\", \"Á*FG1\"},      // these should find only doc 0\n        {\"H*k*\", \"HÏ*l?*\", \"HìJ*n*\", \"HìJ*m*\"},   // these should find only doc 1\n        {\"O*ř*\", \"ÖP*ş???\", \"OPQ*S?Ů*\", \"ÖP*1\"},  // these should find only doc 2\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}