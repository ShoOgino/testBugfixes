{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#createFeatureLogger(String,String).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#createFeatureLogger(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features in output, using the format\n   * specified in the 'stringFormat' param: 'csv' will log the features as a unique\n   * string in csv format 'json' will log the features in a map in a Map of\n   * featureName keys to featureValue values if format is null or empty, csv\n   * format will be selected.\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  public static FeatureLogger<?> createFeatureLogger(String stringFormat, String featureFormat) {\n    final FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {} | {}\", stringFormat, featureFormat);\n    }\n    if ((stringFormat == null) || stringFormat.isEmpty()) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"csv\")) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"json\")) {\n      return new MapFeatureLogger(f);\n    }\n    log.warn(\"unknown feature logger string format {} | {}\", stringFormat, featureFormat);\n    return null;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#createFeatureLogger(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns a FeatureLogger that logs the features in output, using the format\n   * specified in the 'stringFormat' param: 'csv' will log the features as a unique\n   * string in csv format 'json' will log the features in a map in a Map of\n   * featureName keys to featureValue values if format is null or empty, csv\n   * format will be selected.\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  public static FeatureLogger<?> createFeatureLogger(String stringFormat, String featureFormat) {\n    final FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {} | {}\", stringFormat, featureFormat);\n    }\n    if ((stringFormat == null) || stringFormat.isEmpty()) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"csv\")) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"json\")) {\n      return new MapFeatureLogger(f);\n    }\n    log.warn(\"unknown feature logger string format {} | {}\", stringFormat, featureFormat);\n    return null;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#createFeatureLogger(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * returns a FeatureLogger that logs the features in output, using the format\n   * specified in the 'stringFormat' param: 'csv' will log the features as a unique\n   * string in csv format 'json' will log the features in a map in a Map of\n   * featureName keys to featureValue values if format is null or empty, csv\n   * format will be selected.\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  public static FeatureLogger<?> createFeatureLogger(String stringFormat, String featureFormat) {\n    final FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {} | {}\", stringFormat, featureFormat);\n    }\n    if ((stringFormat == null) || stringFormat.isEmpty()) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"csv\")) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"json\")) {\n      return new MapFeatureLogger(f);\n    }\n    log.warn(\"unknown feature logger string format {} | {}\", stringFormat, featureFormat);\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/FeatureLogger#createFeatureLogger(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * returns a FeatureLogger that logs the features in output, using the format\n   * specified in the 'stringFormat' param: 'csv' will log the features as a unique\n   * string in csv format 'json' will log the features in a map in a Map of\n   * featureName keys to featureValue values if format is null or empty, csv\n   * format will be selected.\n   * 'featureFormat' param: 'dense' will write features in dense format,\n   * 'sparse' will write the features in sparse format, null or empty will\n   * default to 'sparse'\n   *\n   *\n   * @return a feature logger for the format specified.\n   */\n  public static FeatureLogger<?> createFeatureLogger(String stringFormat, String featureFormat) {\n    final FeatureFormat f;\n    if (featureFormat == null || featureFormat.isEmpty() ||\n        featureFormat.equals(\"sparse\")) {\n      f = FeatureFormat.SPARSE;\n    }\n    else if (featureFormat.equals(\"dense\")) {\n      f = FeatureFormat.DENSE;\n    }\n    else {\n      f = FeatureFormat.SPARSE;\n      log.warn(\"unknown feature logger feature format {} | {}\", stringFormat, featureFormat);\n    }\n    if ((stringFormat == null) || stringFormat.isEmpty()) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"csv\")) {\n      return new CSVFeatureLogger(f);\n    }\n    if (stringFormat.equals(\"json\")) {\n      return new MapFeatureLogger(f);\n    }\n    log.warn(\"unknown feature logger string format {} | {}\", stringFormat, featureFormat);\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"]},"commit2Childs":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}