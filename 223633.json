{"path":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","commits":[{"id":"55688cada84e99928d155229fc2768df65a45bdb","date":1306274128,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec(1));\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","pathOld":"solr/src/test/org/apache/solr/core/MockCodecProviderFactory#create().mjava","sourceNew":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","sourceOld":"  @Override\n  public CodecProvider create() {\n    CodecProvider cp = new CodecProvider();\n    cp.register(new StandardCodec());\n    cp.register(new PulsingCodec());\n    if (codecs != null) {\n      for (Object codec : codecs.getAll(\"name\")) {\n        if (!cp.isCodecRegistered((String)codec)) {\n          try {\n            Class<? extends Codec> clazz = Class.forName((String)codec).asSubclass(Codec.class);\n            cp.register(clazz.newInstance());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    if (defaultCodec != null) {\n      cp.setDefaultFieldCodec(defaultCodec);\n    }\n    return cp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["55688cada84e99928d155229fc2768df65a45bdb","bc0b8069918917b33f361011899a1af0cdd2d462"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55688cada84e99928d155229fc2768df65a45bdb"],"c26f00b574427b55127e869b935845554afde1fa":["bc0b8069918917b33f361011899a1af0cdd2d462","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["55688cada84e99928d155229fc2768df65a45bdb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bc0b8069918917b33f361011899a1af0cdd2d462"],"55688cada84e99928d155229fc2768df65a45bdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55688cada84e99928d155229fc2768df65a45bdb"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","55688cada84e99928d155229fc2768df65a45bdb","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"55688cada84e99928d155229fc2768df65a45bdb":["1291e4568eb7d9463d751627596ef14baf4c1603","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bc0b8069918917b33f361011899a1af0cdd2d462","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}