{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert !fieldInfo.storePayloads;\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      assert limit > 0;\n\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      // if (DEBUG) System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert !fieldInfo.storePayloads;\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      assert limit > 0;\n\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      // if (DEBUG) System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    public SegmentDocsAndPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert !fieldInfo.storePayloads;\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      assert limit > 0;\n\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      // if (DEBUG) System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsAndPositionsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      assert fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      assert !fieldInfo.storePayloads;\n\n      this.liveDocs = liveDocs;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      lazyProxPointer = termState.proxOffset;\n\n      limit = termState.docFreq;\n      assert limit > 0;\n\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      position = 0;\n\n      skipped = false;\n      posPendingCount = 0;\n\n      freqOffset = termState.freqOffset;\n      proxOffset = termState.proxOffset;\n      skipOffset = termState.skipOffset;\n      // if (DEBUG) System.out.println(\"StandardR.D&PE reset seg=\" + segment + \" limit=\" + limit + \" freqFP=\" + freqOffset + \" proxFP=\" + proxOffset);\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}