{"path":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      state.docWriter.removeOpenFile(fieldsName);\n      state.docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e08f47dcb33d666ccf68ebdff366c053409d64b1","date":1271429947,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      lastDocID = 0;\n      assert state.docStoreSegmentName != null;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":"  public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#closeDocStore(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  synchronized public void closeDocStore(SegmentWriteState state) throws IOException {\n    final int inc = state.numDocsInStore - lastDocID;\n    if (inc > 0) {\n      initFieldsWriter();\n      fill(state.numDocsInStore - docWriter.getDocStoreOffset());\n    }\n\n    if (fieldsWriter != null) {\n      fieldsWriter.close();\n      fieldsWriter = null;\n      assert docStoreSegment != null;\n      assert state.docStoreSegmentName != null;\n      assert docStoreSegment.equals(state.docStoreSegmentName): \"fieldsWriter wrote to segment=\" + docStoreSegment + \" vs SegmentWriteState segment=\" + state.docStoreSegmentName;\n      lastDocID = 0;\n      String fieldsName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_EXTENSION);\n      String fieldsIdxName = IndexFileNames.segmentFileName(state.docStoreSegmentName, \"\", IndexFileNames.FIELDS_INDEX_EXTENSION);\n      state.flushedFiles.add(fieldsName);\n      state.flushedFiles.add(fieldsIdxName);\n\n      docWriter.removeOpenFile(fieldsName);\n      docWriter.removeOpenFile(fieldsIdxName);\n\n      if (4+((long) state.numDocsInStore)*8 != state.directory.fileLength(fieldsIdxName))\n        throw new RuntimeException(\"after flush: fdx size mismatch: \" + state.numDocsInStore + \" docs vs \" + state.directory.fileLength(fieldsIdxName) + \" length in bytes of \" + fieldsIdxName + \" file exists?=\" + state.directory.fileExists(fieldsIdxName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"e08f47dcb33d666ccf68ebdff366c053409d64b1":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["e08f47dcb33d666ccf68ebdff366c053409d64b1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e08f47dcb33d666ccf68ebdff366c053409d64b1"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"e08f47dcb33d666ccf68ebdff366c053409d64b1":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"833a7987bc1c94455fde83e3311f72bddedcfb93":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817","833a7987bc1c94455fde83e3311f72bddedcfb93"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}