{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfo> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel)\n          maxLevel = level;\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor)\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor)\n          levelBottom = levelFloor;\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfo info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfo> mergeInfos = new ArrayList<SegmentInfo>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfo> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel)\n          maxLevel = level;\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor)\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor)\n          levelBottom = levelFloor;\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfo info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfo> mergeInfos = new ArrayList<SegmentInfo>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfo> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel)\n          maxLevel = level;\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor)\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor)\n          levelBottom = levelFloor;\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfo info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfo> mergeInfos = new ArrayList<SegmentInfo>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfo> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel)\n          maxLevel = level;\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor)\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor)\n          levelBottom = levelFloor;\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfo info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfo> mergeInfos = new ArrayList<SegmentInfo>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(\"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /** Checks if any merges are now necessary and returns a\n   *  {@link MergePolicy.MergeSpecification} if so.  A merge\n   *  is necessary when there are more than {@link\n   *  #setMergeFactor} segments at a given level.  When\n   *  multiple levels have too many segments, this method\n   *  will return multiple merges, allowing the {@link\n   *  MergeScheduler} to use concurrency. */\n  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n\n    final int numSegments = infos.size();\n    if (verbose()) {\n      message(\"findMerges: \" + numSegments + \" segments\");\n    }\n\n    // Compute levels, which is just log (base mergeFactor)\n    // of the size of each segment\n    final List<SegmentInfoAndLevel> levels = new ArrayList<SegmentInfoAndLevel>();\n    final float norm = (float) Math.log(mergeFactor);\n\n    final Collection<SegmentInfoPerCommit> mergingSegments = writer.get().getMergingSegments();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = infos.info(i);\n      long size = size(info);\n\n      // Floor tiny segments\n      if (size < 1) {\n        size = 1;\n      }\n\n      final SegmentInfoAndLevel infoLevel = new SegmentInfoAndLevel(info, (float) Math.log(size)/norm, i);\n      levels.add(infoLevel);\n\n      if (verbose()) {\n        final long segBytes = sizeBytes(info);\n        String extra = mergingSegments.contains(info) ? \" [merging]\" : \"\";\n        if (size >= maxMergeSize) {\n          extra += \" [skip: too large]\";\n        }\n        message(\"seg=\" + writer.get().segString(info) + \" level=\" + infoLevel.level + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", segBytes/1024/1024.) + extra);\n      }\n    }\n\n    final float levelFloor;\n    if (minMergeSize <= 0)\n      levelFloor = (float) 0.0;\n    else\n      levelFloor = (float) (Math.log(minMergeSize)/norm);\n\n    // Now, we quantize the log values into levels.  The\n    // first level is any segment whose log size is within\n    // LEVEL_LOG_SPAN of the max size, or, who has such as\n    // segment \"to the right\".  Then, we find the max of all\n    // other segments and use that to define the next level\n    // segment, etc.\n\n    MergeSpecification spec = null;\n\n    final int numMergeableSegments = levels.size();\n\n    int start = 0;\n    while(start < numMergeableSegments) {\n\n      // Find max level of all segments not already\n      // quantized.\n      float maxLevel = levels.get(start).level;\n      for(int i=1+start;i<numMergeableSegments;i++) {\n        final float level = levels.get(i).level;\n        if (level > maxLevel) {\n          maxLevel = level;\n        }\n      }\n\n      // Now search backwards for the rightmost segment that\n      // falls into this level:\n      float levelBottom;\n      if (maxLevel <= levelFloor) {\n        // All remaining segments fall into the min level\n        levelBottom = -1.0F;\n      } else {\n        levelBottom = (float) (maxLevel - LEVEL_LOG_SPAN);\n\n        // Force a boundary at the level floor\n        if (levelBottom < levelFloor && maxLevel >= levelFloor) {\n          levelBottom = levelFloor;\n        }\n      }\n\n      int upto = numMergeableSegments-1;\n      while(upto >= start) {\n        if (levels.get(upto).level >= levelBottom) {\n          break;\n        }\n        upto--;\n      }\n      if (verbose()) {\n        message(\"  level \" + levelBottom + \" to \" + maxLevel + \": \" + (1+upto-start) + \" segments\");\n      }\n\n      // Finally, record all merges that are viable at this level:\n      int end = start + mergeFactor;\n      while(end <= 1+upto) {\n        boolean anyTooLarge = false;\n        boolean anyMerging = false;\n        for(int i=start;i<end;i++) {\n          final SegmentInfoPerCommit info = levels.get(i).info;\n          anyTooLarge |= (size(info) >= maxMergeSize || sizeDocs(info) >= maxMergeDocs);\n          if (mergingSegments.contains(info)) {\n            anyMerging = true;\n            break;\n          }\n        }\n\n        if (anyMerging) {\n          // skip\n        } else if (!anyTooLarge) {\n          if (spec == null)\n            spec = new MergeSpecification();\n          final List<SegmentInfoPerCommit> mergeInfos = new ArrayList<SegmentInfoPerCommit>();\n          for(int i=start;i<end;i++) {\n            mergeInfos.add(levels.get(i).info);\n            assert infos.contains(levels.get(i).info);\n          }\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(mergeInfos) + \" start=\" + start + \" end=\" + end);\n          }\n          spec.add(new OneMerge(mergeInfos));\n        } else if (verbose()) {\n          message(\"    \" + start + \" to \" + end + \": contains segment over maxMergeSize or maxMergeDocs; skipping\");\n        }\n\n        start = end;\n        end = start + mergeFactor;\n      }\n\n      start = 1+upto;\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"62e52115b56781006682fd92c6938efaf174304d":["2acf500f78aa12b92e371fd89c719291986b6b90","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"46d8ada1fff8d18cb197c38c7983225162599948":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"62e52115b56781006682fd92c6938efaf174304d":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","181b1aa5a99534972fbfd5595cdbb38bba5f39ee","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}