{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .withProperty(\"name\", \"bogus2\")\n        .process(cluster.getSolrClient());\n\n    // equivalent to maxShardsPerNode=1\n    String commands =  \"{ set-cluster-policy: [ {replica: '<2', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    // this should fail because the policy prevents it\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .setNode(nodeName)\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(e.toString(), e.toString().contains(\"No node can satisfy\"));\n\n    // this should succeed because it places the replica on a different node\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct node\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 2 replicas\n    assertEquals(\"There should be 3 replicas for shard 1\", 3, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  @Ignore // Since maxShardsPerNode was removed in SOLR-12847 and autoscaling framework was removed in SOLR-14656, this test is broken\n  public void testAddTooManyReplicas() throws Exception {\n\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .withProperty(\"name\", \"bogus2\")\n        .process(cluster.getSolrClient());\n\n    // equivalent to maxShardsPerNode=1\n    // String commands =  \"{ set-cluster-policy: [ {replica: '<2', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    // cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    // this should fail because the policy prevents it\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .setNode(nodeName)\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(e.toString(), e.toString().contains(\"No node can satisfy\"));\n\n    // this should succeed because it places the replica on a different node\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct node\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 2 replicas\n    assertEquals(\"There should be 3 replicas for shard 1\", 3, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .withProperty(\"name\", \"bogus2\")\n        .process(cluster.getSolrClient());\n\n    // equivalent to maxShardsPerNode=1\n    String commands =  \"{ set-cluster-policy: [ {replica: '<2', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    // this should fail because the policy prevents it\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .setNode(nodeName)\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(e.toString(), e.toString().contains(\"No node can satisfy\"));\n\n    // this should succeed because it places the replica on a different node\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct node\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 2 replicas\n    assertEquals(\"There should be 3 replicas for shard 1\", 3, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}