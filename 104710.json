{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken(Token).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken(Token).mjava","sourceNew":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken(final Token reusableToken) throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token nextToken = input.next(reusableToken);\n      if (nextToken != null) {\n        for (int i = 1; i < nextToken.getPositionIncrement(); i++) {\n          Token fillerToken = (Token) nextToken.clone();\n          // A filler token occupies no space\n          fillerToken.setEndOffset(fillerToken.startOffset());\n          fillerToken.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);\n          tokenBuf.add(fillerToken);\n        }\n        tokenBuf.add(nextToken.clone());\n        return getNextToken(nextToken);\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken(final Token reusableToken) throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token nextToken = input.next(reusableToken);\n      if (nextToken != null) {\n        for (int i = 1; i < nextToken.getPositionIncrement(); i++) {\n          Token fillerToken = (Token) nextToken.clone();\n          // A filler token occupies no space\n          fillerToken.setEndOffset(fillerToken.startOffset());\n          fillerToken.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);\n          tokenBuf.add(fillerToken);\n        }\n        tokenBuf.add(nextToken.clone());\n        return getNextToken(nextToken);\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#getNextToken(Token).mjava","sourceNew":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private boolean getNextToken() throws IOException {\n    \n    while (true) {\n  \t  if (numFillerTokensToInsert > 0) {\n  \t    if (currentToken == null) {\n  \t      currentToken = captureState();\n  \t    } else {\n  \t      restoreState(currentToken);\n  \t    }\n  \t    numFillerTokensToInsert--;\n        // A filler token occupies no space\n  \t    offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset());\n  \t    termAtt.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);\n        return true;\n  \t  } \n  \t  \n  \t  if (hasCurrentToken) {\n  \t    if (currentToken != null) {\n  \t      restoreState(currentToken);\n  \t      currentToken = null;\n  \t    }\n  \t    hasCurrentToken = false;\n  \t    return true;\n  \t  }\n  \t  \n  \t  if (!input.incrementToken()) return false;\n  \t  hasCurrentToken = true;\n  \t  \n  \t  if (posIncrAtt.getPositionIncrement() > 1) {\n  \t    numFillerTokensToInsert = posIncrAtt.getPositionIncrement() - 1;\n  \t  }\n    }\n\t}\n\n","sourceOld":"  /**\n   * Get the next token from the input stream and push it on the token buffer.\n   * If we encounter a token with position increment > 1, we put filler tokens\n   * on the token buffer.\n   * <p/>\n   * Returns null when the end of the input stream is reached.\n   * @return the next token, or null if at end of input stream\n   * @throws IOException if the input stream has a problem\n   */\n  private Token getNextToken(final Token reusableToken) throws IOException {\n    if (tokenBuf.isEmpty()) {\n      Token nextToken = input.next(reusableToken);\n      if (nextToken != null) {\n        for (int i = 1; i < nextToken.getPositionIncrement(); i++) {\n          Token fillerToken = (Token) nextToken.clone();\n          // A filler token occupies no space\n          fillerToken.setEndOffset(fillerToken.startOffset());\n          fillerToken.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);\n          tokenBuf.add(fillerToken);\n        }\n        tokenBuf.add(nextToken.clone());\n        return getNextToken(nextToken);\n      } else {\n        return null;\n      }\n    } else {\n      return (Token)tokenBuf.remove(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dda87e5ad7246b25d0da56a16ead95360499d86"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}