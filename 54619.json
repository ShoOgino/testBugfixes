{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return Float.floatToIntBits(getBoost()) ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return Float.floatToIntBits(getBoost()) ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return super.hashCode() ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return Float.floatToIntBits(getBoost()) ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return super.hashCode() ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return Float.floatToIntBits(getBoost()) ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    return 31 * super.hashCode() + Objects.hash(disableCoord, minimumNumberShouldMatch, clauses);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.*/\n  @Override\n  public int hashCode() {\n    return super.hashCode() ^ clauses.hashCode()\n      + getMinimumNumberShouldMatch() + (disableCoord ? 17:0);\n  }\n\n","bugFix":null,"bugIntro":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","date":1444679002,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    if (hashCode == 0) {\n      // no need for synchronization, in the worst case we would just compute the hash several times\n      hashCode = computeHashCode();\n      assert hashCode != 0;\n    }\n    assert hashCode == computeHashCode();\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    return 31 * super.hashCode() + Objects.hash(disableCoord, minimumNumberShouldMatch, clauses);\n  }\n\n","bugFix":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    // no need for synchronization, in the worst case we would just compute the hash several times.\n    if (hashCode == 0) {\n      hashCode = computeHashCode();\n      assert hashCode != 0;\n    }\n    assert hashCode == computeHashCode();\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    if (hashCode == 0) {\n      // no need for synchronization, in the worst case we would just compute the hash several times\n      hashCode = computeHashCode();\n      assert hashCode != 0;\n    }\n    assert hashCode == computeHashCode();\n    return hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    // no need for synchronization, in the worst case we would just compute the hash several times.\n    if (hashCode == 0) {\n      hashCode = computeHashCode();\n      assert hashCode != 0;\n    }\n    assert hashCode == computeHashCode();\n    return hashCode;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    if (hashCode == 0) {\n      // no need for synchronization, in the worst case we would just compute the hash several times\n      hashCode = computeHashCode();\n      assert hashCode != 0;\n    }\n    assert hashCode == computeHashCode();\n    return hashCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}