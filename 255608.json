{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeDisjoint(Rectangle).mjava","commits":[{"id":"6bc1e76fdb8a9952244528f098da956d2f52acec","date":1348348531,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/TwoDoublesStrategy#makeDisjoint(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   */\n  private Query makeDisjoint(Rectangle bbox) {\n    if (bbox.getCrossesDateLine())\n      throw new UnsupportedOperationException(\"makeDisjoint doesn't handle dateline cross\");\n    Query qX = rangeQuery(fieldNameX, bbox.getMinX(), bbox.getMaxX());\n    Query qY = rangeQuery(fieldNameY, bbox.getMinY(), bbox.getMaxY());\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qX,BooleanClause.Occur.MUST_NOT);\n    bq.add(qY,BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   */\n  private Query makeDisjoint(Rectangle bbox) {\n    if (bbox.getCrossesDateLine())\n      throw new UnsupportedOperationException(\"makeDisjoint doesn't handle dateline cross\");\n    Query qX = rangeQuery(fieldNameX, bbox.getMinX(), bbox.getMaxX());\n    Query qY = rangeQuery(fieldNameY, bbox.getMinY(), bbox.getMaxY());\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qX,BooleanClause.Occur.MUST_NOT);\n    bq.add(qY,BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeDisjoint(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   */\n  private Query makeDisjoint(Rectangle bbox) {\n    if (bbox.getCrossesDateLine())\n      throw new UnsupportedOperationException(\"makeDisjoint doesn't handle dateline cross\");\n    Query qX = rangeQuery(fieldNameX, bbox.getMinX(), bbox.getMaxX());\n    Query qY = rangeQuery(fieldNameY, bbox.getMinY(), bbox.getMaxY());\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(qX,BooleanClause.Occur.MUST_NOT);\n    bq.add(qY,BooleanClause.Occur.MUST_NOT);\n    return bq.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   */\n  private Query makeDisjoint(Rectangle bbox) {\n    if (bbox.getCrossesDateLine())\n      throw new UnsupportedOperationException(\"makeDisjoint doesn't handle dateline cross\");\n    Query qX = rangeQuery(fieldNameX, bbox.getMinX(), bbox.getMaxX());\n    Query qY = rangeQuery(fieldNameY, bbox.getMinY(), bbox.getMaxY());\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(qX,BooleanClause.Occur.MUST_NOT);\n    bq.add(qY,BooleanClause.Occur.MUST_NOT);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/vector/PointVectorStrategy#makeDisjoint(Rectangle).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   */\n  private Query makeDisjoint(Rectangle bbox) {\n    if (bbox.getCrossesDateLine())\n      throw new UnsupportedOperationException(\"makeDisjoint doesn't handle dateline cross\");\n    Query qX = rangeQuery(fieldNameX, bbox.getMinX(), bbox.getMaxX());\n    Query qY = rangeQuery(fieldNameY, bbox.getMinY(), bbox.getMaxY());\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(qX,BooleanClause.Occur.MUST_NOT);\n    bq.add(qY,BooleanClause.Occur.MUST_NOT);\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5639d0d5bffb5076883b28d9b3329fbd52812137"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}