{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","commits":[{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * (bytesPerDim+1);\n    int splitDim = splitPackedValues[address] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address+1, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd630fded84c5695bd4e07bda0a20634517a4224","date":1476795950,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim = numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * (bytesPerDim+1);\n    int splitDim = splitPackedValues[address] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address+1, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","date":1476800106,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim = numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * (bytesPerDim+1);\n    int splitDim = splitPackedValues[address] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address+1, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim = numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * (bytesPerDim+1);\n    int splitDim = splitPackedValues[address] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address+1, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313b9c84057c3a31294cbcd794ea84c4e81646d9","date":1478080099,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim = numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim = numDims == 1 ? 0 : splitPackedValues[address++] & 0xff;\n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["313b9c84057c3a31294cbcd794ea84c4e81646d9"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd630fded84c5695bd4e07bda0a20634517a4224":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b01431682e11036a1a7d757a3fa7c1f903fb2c45","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["b01431682e11036a1a7d757a3fa7c1f903fb2c45","dd630fded84c5695bd4e07bda0a20634517a4224"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["dd630fded84c5695bd4e07bda0a20634517a4224","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"dd630fded84c5695bd4e07bda0a20634517a4224":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["313b9c84057c3a31294cbcd794ea84c4e81646d9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}