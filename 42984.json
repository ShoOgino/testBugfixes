{"path":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"64dd09b29d9d8046920d09defbc90ae1791c725d","date":1240554655,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return persistence flag as necessary.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["477907bd8f3136042f56718399bbb45af95621d5","477907bd8f3136042f56718399bbb45af95621d5","477907bd8f3136042f56718399bbb45af95621d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4f440d6df36cd50b5b8dc310d385e8ba43bd143","date":1242800363,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return persistence flag as necessary.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return persistence flag as necessary.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38c1e32df11d451c5548a0b1fb4f5609088ef0cf","date":1255111670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return persistence flag as necessary.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleCreateAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle 'CREATE' action.\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   *\n   * @throws SolrException in case of a configuration error.\n   */\n  protected boolean handleCreateAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    try {\n      SolrParams params = req.getParams();\n      String name = params.get(CoreAdminParams.NAME);\n      CoreDescriptor dcore = new CoreDescriptor(coreContainer, name, params.get(CoreAdminParams.INSTANCE_DIR));\n\n      //  fillup optional parameters\n      String opts = params.get(CoreAdminParams.CONFIG);\n      if (opts != null)\n        dcore.setConfigName(opts);\n\n      opts = params.get(CoreAdminParams.SCHEMA);\n      if (opts != null)\n        dcore.setSchemaName(opts);\n\n      opts = params.get(CoreAdminParams.DATA_DIR);\n      if (opts != null)\n        dcore.setDataDir(opts);\n\n      dcore.setCoreProperties(null);\n      SolrCore core = coreContainer.create(dcore);\n      coreContainer.register(name, core, false);\n      rsp.add(\"core\", core.getName());\n      return coreContainer.isPersistent();\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Error executing default implementation of CREATE\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b4f440d6df36cd50b5b8dc310d385e8ba43bd143":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["b4f440d6df36cd50b5b8dc310d385e8ba43bd143"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"64dd09b29d9d8046920d09defbc90ae1791c725d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b4f440d6df36cd50b5b8dc310d385e8ba43bd143":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"64dd09b29d9d8046920d09defbc90ae1791c725d":["b4f440d6df36cd50b5b8dc310d385e8ba43bd143"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}