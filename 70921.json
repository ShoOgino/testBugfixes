{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toLightAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toLightAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eafa8c5eabc3dacd34680054e6a33bda024080ac"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}