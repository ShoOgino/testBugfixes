{"path":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","commits":[{"id":"c7410a1292a8bc3af75faed6b753d861a192e6a5","date":1027003198,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Describe <code>next</code> method here.\n     *\n     * @return a <code>boolean</code> value\n     * @exception IOException if an error occurs\n     * @see TermDocs#next()\n     */\n    public final boolean next()\n\tthrows IOException\n    {\n\tif (_termPositionsQueue.size() == 0)\n\t    return false;\n\n\t_posList.clear();\n\t_doc = _termPositionsQueue.peek().doc();\n\n\tTermPositions tp;\n\tdo\n\t{\n\t    tp = _termPositionsQueue.peek();\n\n\t    for (int i=0; i<tp.freq(); i++)\n\t\t_posList.add(tp.nextPosition());\n\n\t    if (tp.next())\n\t\t_termPositionsQueue.adjustTop();\n\t    else\n\t    {\n\t\t_termPositionsQueue.pop();\n\t\ttp.close();\n\t    }\n\t}\n\twhile (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n\t_posList.sort();\n\t_freq = _posList.size();\n\n\treturn true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6bc708c2b0a1b091d6e60a06e4598fc6c1b86e","date":1097434728,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","sourceNew":"    public final boolean next()\n\tthrows IOException\n    {\n\tif (_termPositionsQueue.size() == 0)\n\t    return false;\n\n\t_posList.clear();\n\t_doc = _termPositionsQueue.peek().doc();\n\n\tTermPositions tp;\n\tdo\n\t{\n\t    tp = _termPositionsQueue.peek();\n\n\t    for (int i=0; i<tp.freq(); i++)\n\t\t_posList.add(tp.nextPosition());\n\n\t    if (tp.next())\n\t\t_termPositionsQueue.adjustTop();\n\t    else\n\t    {\n\t\t_termPositionsQueue.pop();\n\t\ttp.close();\n\t    }\n\t}\n\twhile (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n\t_posList.sort();\n\t_freq = _posList.size();\n\n\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Describe <code>next</code> method here.\n     *\n     * @return a <code>boolean</code> value\n     * @exception IOException if an error occurs\n     * @see TermDocs#next()\n     */\n    public final boolean next()\n\tthrows IOException\n    {\n\tif (_termPositionsQueue.size() == 0)\n\t    return false;\n\n\t_posList.clear();\n\t_doc = _termPositionsQueue.peek().doc();\n\n\tTermPositions tp;\n\tdo\n\t{\n\t    tp = _termPositionsQueue.peek();\n\n\t    for (int i=0; i<tp.freq(); i++)\n\t\t_posList.add(tp.nextPosition());\n\n\t    if (tp.next())\n\t\t_termPositionsQueue.adjustTop();\n\t    else\n\t    {\n\t\t_termPositionsQueue.pop();\n\t\ttp.close();\n\t    }\n\t}\n\twhile (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n\t_posList.sort();\n\t_freq = _posList.size();\n\n\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f021657fa14e418fd91a7ba0ee78979ad71271","date":1122054106,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","sourceNew":"  public final boolean next() throws IOException {\n    if (_termPositionsQueue.size() == 0)\n      return false;\n\n    _posList.clear();\n    _doc = _termPositionsQueue.peek().doc();\n\n    TermPositions tp;\n    do {\n      tp = _termPositionsQueue.peek();\n\n      for (int i = 0; i < tp.freq(); i++)\n        _posList.add(tp.nextPosition());\n\n      if (tp.next())\n        _termPositionsQueue.adjustTop();\n      else {\n        _termPositionsQueue.pop();\n        tp.close();\n      }\n    } while (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return true;\n  }\n\n","sourceOld":"    public final boolean next()\n\tthrows IOException\n    {\n\tif (_termPositionsQueue.size() == 0)\n\t    return false;\n\n\t_posList.clear();\n\t_doc = _termPositionsQueue.peek().doc();\n\n\tTermPositions tp;\n\tdo\n\t{\n\t    tp = _termPositionsQueue.peek();\n\n\t    for (int i=0; i<tp.freq(); i++)\n\t\t_posList.add(tp.nextPosition());\n\n\t    if (tp.next())\n\t\t_termPositionsQueue.adjustTop();\n\t    else\n\t    {\n\t\t_termPositionsQueue.pop();\n\t\ttp.close();\n\t    }\n\t}\n\twhile (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n\t_posList.sort();\n\t_freq = _posList.size();\n\n\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","sourceNew":"  public final boolean next() throws IOException {\n    if (_termPositionsQueue.size() == 0)\n      return false;\n\n    _posList.clear();\n    _doc = _termPositionsQueue.peek().doc();\n\n    TermPositions tp;\n    do {\n      tp = _termPositionsQueue.peek();\n\n      for (int i = 0; i < tp.freq(); i++)\n        _posList.add(tp.nextPosition());\n\n      if (tp.next())\n        _termPositionsQueue.updateTop();\n      else {\n        _termPositionsQueue.pop();\n        tp.close();\n      }\n    } while (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return true;\n  }\n\n","sourceOld":"  public final boolean next() throws IOException {\n    if (_termPositionsQueue.size() == 0)\n      return false;\n\n    _posList.clear();\n    _doc = _termPositionsQueue.peek().doc();\n\n    TermPositions tp;\n    do {\n      tp = _termPositionsQueue.peek();\n\n      for (int i = 0; i < tp.freq(); i++)\n        _posList.add(tp.nextPosition());\n\n      if (tp.next())\n        _termPositionsQueue.adjustTop();\n      else {\n        _termPositionsQueue.pop();\n        tp.close();\n      }\n    } while (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#next().mjava","sourceNew":"  public final boolean next() throws IOException {\n    if (_termPositionsQueue.size() == 0)\n      return false;\n\n    _posList.clear();\n    _doc = _termPositionsQueue.peek().doc();\n\n    TermPositions tp;\n    do {\n      tp = _termPositionsQueue.peek();\n\n      for (int i = 0; i < tp.freq(); i++)\n        _posList.add(tp.nextPosition());\n\n      if (tp.next())\n        _termPositionsQueue.updateTop();\n      else {\n        _termPositionsQueue.pop();\n        tp.close();\n      }\n    } while (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return true;\n  }\n\n","sourceOld":"  public final boolean next() throws IOException {\n    if (_termPositionsQueue.size() == 0)\n      return false;\n\n    _posList.clear();\n    _doc = _termPositionsQueue.peek().doc();\n\n    TermPositions tp;\n    do {\n      tp = _termPositionsQueue.peek();\n\n      for (int i = 0; i < tp.freq(); i++)\n        _posList.add(tp.nextPosition());\n\n      if (tp.next())\n        _termPositionsQueue.updateTop();\n      else {\n        _termPositionsQueue.pop();\n        tp.close();\n      }\n    } while (_termPositionsQueue.size() > 0 && _termPositionsQueue.peek().doc() == _doc);\n\n    _posList.sort();\n    _freq = _posList.size();\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba6bc708c2b0a1b091d6e60a06e4598fc6c1b86e":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["13f021657fa14e418fd91a7ba0ee78979ad71271"],"13f021657fa14e418fd91a7ba0ee78979ad71271":["ba6bc708c2b0a1b091d6e60a06e4598fc6c1b86e"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"]},"commit2Childs":{"ba6bc708c2b0a1b091d6e60a06e4598fc6c1b86e":["13f021657fa14e418fd91a7ba0ee78979ad71271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"13f021657fa14e418fd91a7ba0ee78979ad71271":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["ba6bc708c2b0a1b091d6e60a06e4598fc6c1b86e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}