{"path":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#isCurrent().mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"893d07555f01912f57b453a320e4d46363a31b50":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["893d07555f01912f57b453a320e4d46363a31b50","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}