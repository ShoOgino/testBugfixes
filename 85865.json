{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo]).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    boolean success = false;\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(SegmentState segState : segStates) {\n            try {\n              segState.finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n        }\n      }\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  private SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos) throws IOException {\n    int numReaders = infos.size();\n    SegmentState[] segStates = new SegmentState[numReaders];\n    boolean success = false;\n    try {\n      for(int i=0;i<numReaders;i++) {\n        segStates[i] = new SegmentState(pool, infos.get(i));\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(int j=0;j<numReaders;j++) {\n          if (segStates[j] != null) {\n            try {\n              segStates[j].finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n          }\n        }\n      }\n    }\n\n    return segStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo]).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    boolean success = false;\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(SegmentState segState : segStates) {\n            try {\n              segState.finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n        }\n      }\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  private SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos) throws IOException {\n    int numReaders = infos.size();\n    SegmentState[] segStates = new SegmentState[numReaders];\n    boolean success = false;\n    try {\n      for(int i=0;i<numReaders;i++) {\n        segStates[i] = new SegmentState(pool, infos.get(i));\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(int j=0;j<numReaders;j++) {\n          if (segStates[j] != null) {\n            try {\n              segStates[j].finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n          }\n        }\n      }\n    }\n\n    return segStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"/dev/null","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    boolean success = false;\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(SegmentState segState : segStates) {\n            try {\n              segState.finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n        }\n      }\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      for(SegmentState segState : segStates) {\n        try {\n          segState.finish(pool);\n        } catch (Throwable th) {\n          t.addSuppressed(th);\n        }\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    boolean success = false;\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(SegmentState segState : segStates) {\n            try {\n              segState.finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n        }\n      }\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      for(SegmentState segState : segStates) {\n        try {\n          segState.finish(pool);\n        } catch (Throwable th) {\n          t.addSuppressed(th);\n        }\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    boolean success = false;\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        for(SegmentState segState : segStates) {\n            try {\n              segState.finish(pool);\n            } catch (Throwable th) {\n              // suppress so we keep throwing original exc\n            }\n        }\n      }\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      for(SegmentState segState : segStates) {\n        try {\n          segState.finish(pool);\n        } catch (Throwable th) {\n          t.addSuppressed(th);\n        }\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    ensureOpen();\n\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      for(SegmentState segState : segStates) {\n        try {\n          segState.finish(pool);\n        } catch (Throwable th) {\n          t.addSuppressed(th);\n        }\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#openSegmentStates(IndexWriter.ReaderPool,List[SegmentCommitInfo],Set[SegmentCommitInfo],long).mjava","sourceNew":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(writer.getPooledInstance(info, true), info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      try {\n        finishSegmentStates(segStates);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","sourceOld":"  /** Opens SegmentReader and inits SegmentState for each segment. */\n  public SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool, List<SegmentCommitInfo> infos,\n                                          Set<SegmentCommitInfo> alreadySeenSegments, long delGen) throws IOException {\n    List<SegmentState> segStates = new ArrayList<>();\n    try {\n      for (SegmentCommitInfo info : infos) {\n        if (info.getBufferedDeletesGen() <= delGen && alreadySeenSegments.contains(info) == false) {\n          segStates.add(new SegmentState(pool, info));\n          alreadySeenSegments.add(info);\n        }\n      }\n    } catch (Throwable t) {\n      for(SegmentState segState : segStates) {\n        try {\n          segState.finish(pool);\n        } catch (Throwable th) {\n          t.addSuppressed(th);\n        }\n      }\n      throw t;\n    }\n    \n    return segStates.toArray(new SegmentState[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["28288370235ed02234a64753cdbf0c6ec096304a","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1926100d9b67becc9701c54266fee3ba7878a5f0":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}