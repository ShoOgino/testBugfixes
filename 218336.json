{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","commits":[{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testCheckpoint().mjava","sourceNew":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","sourceNew":"  @Nightly\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20c6095d6927417de0b4b8161d5b79675ccb906","date":1554136053,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","sourceNew":"  @Nightly\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","sourceNew":"  @Nightly\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(4) == 0) {\n          if (callStackContains(IndexFileDeleter.class, \"checkpoint\")) {\n            throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n          }\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testCheckpoint().mjava","sourceNew":"  @Nightly\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(4) == 0) {\n          if (callStackContains(IndexFileDeleter.class, \"checkpoint\")) {\n            throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n          }\n        }\n      }\n    });\n  }\n\n","sourceOld":"  @Nightly\n  // commented out on: 01-Apr-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testCheckpoint() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n        boolean ok = false;\n        for (int i = 0; i < stack.length; i++) {\n          if (stack[i].getClassName().equals(IndexFileDeleter.class.getName()) && stack[i].getMethodName().equals(\"checkpoint\")) {\n            ok = true;\n          }\n        }\n        if (ok && r.nextInt(4) == 0) {\n          throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["c48871ed951104729f5e17a8ee1091b43fa18980"],"b20c6095d6927417de0b4b8161d5b79675ccb906":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["b20c6095d6927417de0b4b8161d5b79675ccb906"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["b20c6095d6927417de0b4b8161d5b79675ccb906","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"],"c48871ed951104729f5e17a8ee1091b43fa18980":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["b20c6095d6927417de0b4b8161d5b79675ccb906"],"b20c6095d6927417de0b4b8161d5b79675ccb906":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c48871ed951104729f5e17a8ee1091b43fa18980"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"c48871ed951104729f5e17a8ee1091b43fa18980":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}