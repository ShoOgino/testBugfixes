{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#FetchStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#FetchStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public FetchStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onParam = factory.getNamedOperand(expression, \"on\");\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    String on = null;\n    String fl = null;\n    int batchSize = 50;\n\n    if(onParam == null)  {\n      throw new IOException(\"on parameter cannot be null for the fetch expression\");\n    } else {\n      on = ((StreamExpressionValue)onParam.getParameter()).getValue();\n    }\n\n    if(flParam == null)  {\n      throw new IOException(\"fl parameter cannot be null for the fetch expression\");\n    } else {\n      fl = ((StreamExpressionValue)flParam.getParameter()).getValue();\n    }\n\n    if(batchSizeParam != null)  {\n      batchSize = Integer.parseInt(((StreamExpressionValue)batchSizeParam.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    init(zkHost, collectionName, stream, on, fl, batchSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#FetchStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public FetchStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onParam = factory.getNamedOperand(expression, \"on\");\n    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, \"fl\");\n    StreamExpressionNamedParameter batchSizeParam = factory.getNamedOperand(expression, \"batchSize\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    String on = null;\n    String fl = null;\n    int batchSize = 50;\n\n    if(onParam == null)  {\n      throw new IOException(\"on parameter cannot be null for the fetch expression\");\n    } else {\n      on = ((StreamExpressionValue)onParam.getParameter()).getValue();\n    }\n\n    if(flParam == null)  {\n      throw new IOException(\"fl parameter cannot be null for the fetch expression\");\n    } else {\n      fl = ((StreamExpressionValue)flParam.getParameter()).getValue();\n    }\n\n    if(batchSizeParam != null)  {\n      batchSize = Integer.parseInt(((StreamExpressionValue)batchSizeParam.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    init(zkHost, collectionName, stream, on, fl, batchSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f21dc022708e502f89f154bdcf6dc53b9409aec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f21dc022708e502f89f154bdcf6dc53b9409aec"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f21dc022708e502f89f154bdcf6dc53b9409aec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}