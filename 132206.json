{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readSortedSetEntry(IndexInput).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readSortedSetEntry(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readSortedSetEntry(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readSortedSetEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  SortedSetEntry readSortedSetEntry(IndexInput meta) throws IOException {\n    SortedSetEntry entry = new SortedSetEntry();\n    entry.format = meta.readVInt();\n    if (entry.format == SORTED_SET_TABLE) {\n      final int totalTableLength = meta.readInt();\n      if (totalTableLength > 256) {\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more than 256 values in its dictionary, got=\" + totalTableLength, meta);\n      }\n      entry.table = new long[totalTableLength];\n      for (int i = 0; i < totalTableLength; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n      final int tableSize = meta.readInt();\n      if (tableSize > totalTableLength + 1) { // +1 because of the empty set\n        throw new CorruptIndexException(\"SORTED_SET_TABLE cannot have more set ids than ords in its dictionary, got \" + totalTableLength + \" ords and \" + tableSize + \" sets\", meta);\n      }\n      entry.tableOffsets = new int[tableSize + 1];\n      for (int i = 1; i < entry.tableOffsets.length; ++i) {\n        entry.tableOffsets[i] = entry.tableOffsets[i - 1] + meta.readInt();\n      }\n      ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.tableOffsets));\n    } else if (entry.format != SORTED_SINGLE_VALUED && entry.format != SORTED_WITH_ADDRESSES) {\n      throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}