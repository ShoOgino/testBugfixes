{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","commits":[{"id":"65e7bd208a7bb3c14e9df23897618cb6c8d0c211","date":1361372453,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"/dev/null","sourceNew":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      indexSearcher.search(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))),\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      Query q;\n      if (query != null) {\n        BooleanQuery bq = new BooleanQuery();\n        WildcardQuery wq = new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING)));\n        bq.add(wq, BooleanClause.Occur.MUST);\n        bq.add(query, BooleanClause.Occur.MUST);\n        q = bq;\n      } else {\n        q = new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING)));\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      indexSearcher.search(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))),\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec","date":1384175856,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      Query q;\n      if (query != null) {\n        BooleanQuery bq = new BooleanQuery();\n        WildcardQuery wq = new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING)));\n        bq.add(wq, BooleanClause.Occur.MUST);\n        bq.add(query, BooleanClause.Occur.MUST);\n        q = bq;\n      } else {\n        q = new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING)));\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7533828cbcc5f498a44cca5d9bce92692663778","date":1408525002,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be961b1729b3dfa66883980eadaa4ca4732820e1","date":1408694535,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50f877e16e8f57c5e72b1cf7791c798d68899b4e","date":1408795676,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":["8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8","date":1430636069,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n              totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n          totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n              totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery q = new BooleanQuery();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q,\n              totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector totalHitCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n              totalHitCountCollector);\n      docCount = totalHitCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61","date":1464272038,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.leafReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","65e7bd208a7bb3c14e9df23897618cb6c8d0c211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.leafReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.indexReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.leafReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.indexReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#countDocsWithClass().mjava","sourceNew":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiTerms.getTerms(this.indexReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","sourceOld":"  /**\n   * count the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws IOException if accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    Terms terms = MultiFields.getTerms(this.indexReader, this.classFieldName);\n    int docCount;\n    if (terms == null || terms.getDocCount() == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    } else {\n      docCount = terms.getDocCount();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"be961b1729b3dfa66883980eadaa4ca4732820e1":["e7533828cbcc5f498a44cca5d9bce92692663778"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["65e7bd208a7bb3c14e9df23897618cb6c8d0c211"],"83870855d82aba6819217abeff5a40779dbb28b4":["134a24d0cb66520908d88384f1a559875704ed25","8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"50f877e16e8f57c5e72b1cf7791c798d68899b4e":["be961b1729b3dfa66883980eadaa4ca4732820e1"],"134a24d0cb66520908d88384f1a559875704ed25":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["50f877e16e8f57c5e72b1cf7791c798d68899b4e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["134a24d0cb66520908d88384f1a559875704ed25","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"65e7bd208a7bb3c14e9df23897618cb6c8d0c211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"e7533828cbcc5f498a44cca5d9bce92692663778":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61":["134a24d0cb66520908d88384f1a559875704ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","04e775de416dd2d8067b10db1c8af975a1d5017e"],"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"be961b1729b3dfa66883980eadaa4ca4732820e1":["50f877e16e8f57c5e72b1cf7791c798d68899b4e"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"50f877e16e8f57c5e72b1cf7791c798d68899b4e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"134a24d0cb66520908d88384f1a559875704ed25":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["e7533828cbcc5f498a44cca5d9bce92692663778"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"65e7bd208a7bb3c14e9df23897618cb6c8d0c211":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["134a24d0cb66520908d88384f1a559875704ed25"],"e7533828cbcc5f498a44cca5d9bce92692663778":["be961b1729b3dfa66883980eadaa4ca4732820e1"],"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["65e7bd208a7bb3c14e9df23897618cb6c8d0c211"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}