{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"    /**\n     * Suggest similar words\n     * @param word String the word you want a spell check done on\n     * @param num_sug int the number of suggest words\n     * @throws IOException\n     * @return String[]\n     */\n    public String[] suggestSimilar (String word, int num_sug) throws IOException {\n        return this.suggestSimilar(word, num_sug, null, null, false);\n    }\n\n","sourceOld":"    /**\n     * Suggest similar words\n     * @param word String the word you want a spell check done on\n     * @param num_sug int the number of suggest words\n     * @throws IOException\n     * @return String[]\n     */\n    public String[] suggestSimilar (String word, int num_sug) throws IOException {\n        return this.suggestSimilar(word, num_sug, null, null, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param num_sug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int num_sug) throws IOException {\n    return this.suggestSimilar(word, num_sug, null, null, false);\n  }\n\n","sourceOld":"    /**\n     * Suggest similar words\n     * @param word String the word you want a spell check done on\n     * @param num_sug int the number of suggest words\n     * @throws IOException\n     * @return String[]\n     */\n    public String[] suggestSimilar (String word, int num_sug) throws IOException {\n        return this.suggestSimilar(word, num_sug, null, null, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66021102b0be85b9577e1882bf9835c9c3aad214","date":1153473052,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param numSug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param num_sug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int num_sug) throws IOException {\n    return this.suggestSimilar(word, num_sug, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c2dacb7de68407adf10cda93ee1edf49502cc14","date":1172860135,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param numSug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param numSug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","sourceOld":"  /**\n   * As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * Suggest similar words\n   * @param word String the word you want a spell check done on\n   * @param numSug int the number of suggest words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96308b901685e8ec12a3856f788a7d9d98c22e50":["2c2dacb7de68407adf10cda93ee1edf49502cc14"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"2c2dacb7de68407adf10cda93ee1edf49502cc14":["66021102b0be85b9577e1882bf9835c9c3aad214"],"66021102b0be85b9577e1882bf9835c9c3aad214":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["66021102b0be85b9577e1882bf9835c9c3aad214"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2c2dacb7de68407adf10cda93ee1edf49502cc14":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"66021102b0be85b9577e1882bf9835c9c3aad214":["2c2dacb7de68407adf10cda93ee1edf49502cc14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}