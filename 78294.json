{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"/dev/null","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"/dev/null","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"/dev/null","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, IOContext.DEFAULT);\n      IndexOutput out = dir.createOutput(fileNameOut, IOContext.DEFAULT);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, IOContext.DEFAULT);\n      IndexOutput out = dir.createOutput(fileNameOut, IOContext.DEFAULT);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn);\n      IndexOutput out = dir.createOutput(fileNameOut);\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir, true);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["85a883878c0af761245ab048babc63d099f835f3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f2c5f0cb44df114db4228c8f77861714b5cabaea","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}