{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","commits":[{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"af2638813028b254a88b418ebeafb541afb49653":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","112d77ac8d3e10a362516ad834c9a11d35c94234"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}