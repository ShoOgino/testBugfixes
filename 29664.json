{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSelectWithSequentialEvaluators().mjava","commits":[{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSelectWithSequentialEvaluators().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSelectWithSequentialEvaluators() throws Exception {\n    String cexpr = \"select(list(tuple(a=add(1,2)), tuple(a=add(2,2))), \" +\n        \"                  add(1, a) as blah, \" +\n        \"                  add(1, blah) as blah1)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 2);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getLong(\"blah\").longValue(), 4L);\n    assertEquals(tuple0.getLong(\"blah1\").longValue(), 5L);\n\n    Tuple tuple1 = tuples.get(1);\n    assertEquals(tuple1.getLong(\"blah\").longValue(), 5L);\n    assertEquals(tuple1.getLong(\"blah1\").longValue(), 6L);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e12302269b6a9277765fa0841e8c8252e17f9cc","date":1560621277,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSelectWithSequentialEvaluators().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testSelectWithSequentialEvaluators().mjava","sourceNew":"  @Test\n  public void testSelectWithSequentialEvaluators() throws Exception {\n    String cexpr = \"select(list(tuple(a=add(1,2)), tuple(a=add(2,2))), \" +\n        \"                  add(1, a) as blah, \" +\n        \"                  add(1, blah) as blah1,\" +\n        \"                  recNum() as recNum)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 2);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getLong(\"blah\").longValue(), 4L);\n    assertEquals(tuple0.getLong(\"blah1\").longValue(), 5L);\n    assertEquals(tuple0.getLong(\"recNum\").longValue(), 0);\n\n    Tuple tuple1 = tuples.get(1);\n    assertEquals(tuple1.getLong(\"blah\").longValue(), 5L);\n    assertEquals(tuple1.getLong(\"blah1\").longValue(), 6L);\n    assertEquals(tuple1.getLong(\"recNum\").longValue(), 1);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSelectWithSequentialEvaluators() throws Exception {\n    String cexpr = \"select(list(tuple(a=add(1,2)), tuple(a=add(2,2))), \" +\n        \"                  add(1, a) as blah, \" +\n        \"                  add(1, blah) as blah1)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 2);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getLong(\"blah\").longValue(), 4L);\n    assertEquals(tuple0.getLong(\"blah1\").longValue(), 5L);\n\n    Tuple tuple1 = tuples.get(1);\n    assertEquals(tuple1.getLong(\"blah\").longValue(), 5L);\n    assertEquals(tuple1.getLong(\"blah1\").longValue(), 6L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e12302269b6a9277765fa0841e8c8252e17f9cc":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e12302269b6a9277765fa0841e8c8252e17f9cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"7e12302269b6a9277765fa0841e8c8252e17f9cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["7e12302269b6a9277765fa0841e8c8252e17f9cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}