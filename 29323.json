{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":null,"sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d4a44214b48253e7b31007bdbb13a3b9c4e05bf","date":1287500396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        //Most of the JDBC drivers have getBinaryStream defined as public\n        // so let us just check it\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\n        if (Modifier.isPublic(m.getModifiers())) {\n          return getReader(m, blob);\n        } else {\n          // force invoke\n          m.setAccessible(true);\n          return getReader(m, blob);\n        }\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldReaderDataSource#getData(String).mjava","sourceNew":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public Reader getData(String query) {\n    Object o = entityProcessor.getVariableResolver().resolve(dataField);\n    if (o == null) {\n       throw new DataImportHandlerException (SEVERE, \"No field available for name : \" +dataField);\n    }\n    if (o instanceof String) {\n      return new StringReader((String) o);\n    } else if (o instanceof Clob) {\n      Clob clob = (Clob) o;\n      try {\n        //Most of the JDBC drivers have getCharacterStream defined as public\n        // so let us just check it\n        return readCharStream(clob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from CLOB\");\n        return null;\n\n      }\n\n    } else if (o instanceof Blob) {\n      Blob blob = (Blob) o;\n      try {\n        return getReader(blob);\n      } catch (Exception e) {\n        LOG.info(\"Unable to get data from BLOB\");\n        return null;\n\n      }\n    } else {\n      return new StringReader(o.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["7d4a44214b48253e7b31007bdbb13a3b9c4e05bf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d4a44214b48253e7b31007bdbb13a3b9c4e05bf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","7d4a44214b48253e7b31007bdbb13a3b9c4e05bf"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","7d4a44214b48253e7b31007bdbb13a3b9c4e05bf"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"7d4a44214b48253e7b31007bdbb13a3b9c4e05bf":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["7d4a44214b48253e7b31007bdbb13a3b9c4e05bf","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}