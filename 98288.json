{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#prefixCodedToLong(String).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#prefixCodedToLong(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int len = prefixCoded.length();\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1; i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (long)(ch & 0x7f);\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#prefixCodedToLong(String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#prefixCodedToLong(String).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (long)ch;\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int len = prefixCoded.length();\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1; i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (long)(ch & 0x7f);\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#prefixCodedToLong(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (long)ch;\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}