{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","commits":[{"id":"c426b23367d10fabc39cbb101e58ea73514c64c8","date":1389210853,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that LowercaseFilter handles entire unicode range correctly\n   */\n  public void testUpperCaseFilter() throws IOException {\n    Analyzer a = new UpperCaseWhitespaceAnalyzer();\n    // BMP\n    assertAnalyzesTo(a, \"AbaCaDabA\", new String[] { \"ABACADABA\" });\n    // supplementary\n    assertAnalyzesTo(a, \"\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\",\n          new String[] {\"\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\"});\n    assertAnalyzesTo(a, \"AbaCa\\ud801\\udc3eDabA\", \n         new String[] { \"ABACA\\ud801\\udc16DABA\" });\n    // unpaired lead surrogate\n    assertAnalyzesTo(a, \"AbaC\\uD801AdaBa\", \n        new String [] { \"ABAC\\uD801ADABA\" });\n    // unpaired trail surrogate\n    assertAnalyzesTo(a, \"AbaC\\uDC16AdaBa\", \n        new String [] { \"ABAC\\uDC16ADABA\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles entire unicode range correctly\n   */\n  public void testUpperCaseFilter() throws IOException {\n    Analyzer a = new UpperCaseWhitespaceAnalyzer();\n    // BMP\n    assertAnalyzesTo(a, \"AbaCaDabA\", new String[] { \"ABACADABA\" });\n    // supplementary\n    assertAnalyzesTo(a, \"\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\",\n          new String[] {\"\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\"});\n    assertAnalyzesTo(a, \"AbaCa\\ud801\\udc3eDabA\", \n         new String[] { \"ABACA\\ud801\\udc16DABA\" });\n    // unpaired lead surrogate\n    assertAnalyzesTo(a, \"AbaC\\uD801AdaBa\", \n        new String [] { \"ABAC\\uD801ADABA\" });\n    // unpaired trail surrogate\n    assertAnalyzesTo(a, \"AbaC\\uDC16AdaBa\", \n        new String [] { \"ABAC\\uDC16ADABA\" });\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles entire unicode range correctly\n   */\n  public void testUpperCaseFilter() throws IOException {\n    Analyzer a = new UpperCaseWhitespaceAnalyzer();\n    // BMP\n    assertAnalyzesTo(a, \"AbaCaDabA\", new String[] { \"ABACADABA\" });\n    // supplementary\n    assertAnalyzesTo(a, \"\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\",\n          new String[] {\"\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\"});\n    assertAnalyzesTo(a, \"AbaCa\\ud801\\udc3eDabA\", \n         new String[] { \"ABACA\\ud801\\udc16DABA\" });\n    // unpaired lead surrogate\n    assertAnalyzesTo(a, \"AbaC\\uD801AdaBa\", \n        new String [] { \"ABAC\\uD801ADABA\" });\n    // unpaired trail surrogate\n    assertAnalyzesTo(a, \"AbaC\\uDC16AdaBa\", \n        new String [] { \"ABAC\\uDC16ADABA\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#testUpperCaseFilter().mjava","sourceNew":"  /**\n   * Test that LowercaseFilter handles entire unicode range correctly\n   */\n  public void testUpperCaseFilter() throws IOException {\n    Analyzer a = new UpperCaseWhitespaceAnalyzer();\n    // BMP\n    assertAnalyzesTo(a, \"AbaCaDabA\", new String[] { \"ABACADABA\" });\n    // supplementary\n    assertAnalyzesTo(a, \"\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\",\n          new String[] {\"\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\"});\n    assertAnalyzesTo(a, \"AbaCa\\ud801\\udc3eDabA\", \n         new String[] { \"ABACA\\ud801\\udc16DABA\" });\n    // unpaired lead surrogate\n    assertAnalyzesTo(a, \"AbaC\\uD801AdaBa\", \n        new String [] { \"ABAC\\uD801ADABA\" });\n    // unpaired trail surrogate\n    assertAnalyzesTo(a, \"AbaC\\uDC16AdaBa\", \n        new String [] { \"ABAC\\uDC16ADABA\" });\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test that LowercaseFilter handles entire unicode range correctly\n   */\n  public void testUpperCaseFilter() throws IOException {\n    Analyzer a = new UpperCaseWhitespaceAnalyzer();\n    // BMP\n    assertAnalyzesTo(a, \"AbaCaDabA\", new String[] { \"ABACADABA\" });\n    // supplementary\n    assertAnalyzesTo(a, \"\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\\ud801\\udc3e\",\n          new String[] {\"\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\\ud801\\udc16\"});\n    assertAnalyzesTo(a, \"AbaCa\\ud801\\udc3eDabA\", \n         new String[] { \"ABACA\\ud801\\udc16DABA\" });\n    // unpaired lead surrogate\n    assertAnalyzesTo(a, \"AbaC\\uD801AdaBa\", \n        new String [] { \"ABAC\\uD801ADABA\" });\n    // unpaired trail surrogate\n    assertAnalyzesTo(a, \"AbaC\\uDC16AdaBa\", \n        new String [] { \"ABAC\\uDC16ADABA\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c426b23367d10fabc39cbb101e58ea73514c64c8","a56958d7f71a28824f20031ffbb2e13502a0274e"],"c426b23367d10fabc39cbb101e58ea73514c64c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["c426b23367d10fabc39cbb101e58ea73514c64c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c426b23367d10fabc39cbb101e58ea73514c64c8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c426b23367d10fabc39cbb101e58ea73514c64c8"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}