{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting \n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70052d44b40be0028db94b4cffeb9aaa5468055e","date":1505151510,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":["9001fdb834e467ef899e41c747c42b27b4d45099","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    field.checkSortability();\n    return Sorting.getStringSortField(field.name, reverse, field.sortMissingLast(),field.sortMissingFirst());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   * @see #getSortedSetSortField\n   * @see #getSortField\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    if (field.multiValued()) {\n      MultiValueSelector selector = field.type.getDefaultMultiValueSelectorForSort(field, reverse);\n      if (null != selector) {\n        return getSortedSetSortField(field, selector.getSortedSetSelectorType(),\n                                     reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n      }\n    }\n    \n    // else...\n    // either single valued, or don't support implicit multi selector\n    // (in which case let getSortField() give the error)\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getStringSort(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   * @see #getSortedSetSortField\n   * @see #getSortField\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    if (field.multiValued()) {\n      MultiValueSelector selector = field.type.getDefaultMultiValueSelectorForSort(field, reverse);\n      if (null != selector) {\n        return getSortedSetSortField(field, selector.getSortedSetSelectorType(),\n                                     reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n      }\n    }\n    \n    // else...\n    // either single valued, or don't support implicit multi selector\n    // (in which case let getSortField() give the error)\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","sourceOld":"  /**\n   * Utility usable by subclasses when they want to get basic String sorting\n   * using common checks.\n   * @see SchemaField#checkSortability\n   */\n  protected SortField getStringSort(SchemaField field, boolean reverse) {\n    return getSortField(field, SortField.Type.STRING, reverse, SortField.STRING_FIRST, SortField.STRING_LAST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["ffb85feece8645a035c02443a625f5af15e1106b","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["fa64435b5902ce266c23755a4a00691a3285dab8","ffb85feece8645a035c02443a625f5af15e1106b"],"ffb85feece8645a035c02443a625f5af15e1106b":["fa64435b5902ce266c23755a4a00691a3285dab8","70052d44b40be0028db94b4cffeb9aaa5468055e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["ffb85feece8645a035c02443a625f5af15e1106b"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"ffb85feece8645a035c02443a625f5af15e1106b":["b94236357aaa22b76c10629851fe4e376e0cea82","685bd38810c206c93e9058f3c2cfa9827c086c27","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fa64435b5902ce266c23755a4a00691a3285dab8":["685bd38810c206c93e9058f3c2cfa9827c086c27","ffb85feece8645a035c02443a625f5af15e1106b","70052d44b40be0028db94b4cffeb9aaa5468055e"],"c26f00b574427b55127e869b935845554afde1fa":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["ffb85feece8645a035c02443a625f5af15e1106b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}