{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","commits":[{"id":"265e2d0799e876e7c751a97229b0d8007cd79f0a","date":1461779668,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","date":1461845562,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      // This is tricky because edges are duplicated in the tree (where they got split).\n      // We need to eliminate those duplicate edges as we traverse.  This requires us to keep a set of edges we've seen.\n      // Luckily, the number of edges we're likely to encounter in a real-world situation is small, so we can get away with it.\n      return traverseEdges(rootNode, edgeIterator, minValue, maxValue, new HashSet<>());\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      // This is tricky because edges are duplicated in the tree (where they got split).\n      // We need to eliminate those duplicate edges as we traverse.  This requires us to keep a set of edges we've seen.\n      // Luckily, the number of edges we're likely to encounter in a real-world situation is small, so we can get away with it.\n      return traverseEdges(rootNode, edgeIterator, minValue, maxValue, new HashSet<>());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083674ea80108c4053d9526cdef6f77b2494e551","date":1462313169,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (rootNode == null) {\n        return true;\n      }\n      return rootNode.traverse(edgeIterator, minValue, maxValue);\n    }\n\n","sourceOld":"    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      // This is tricky because edges are duplicated in the tree (where they got split).\n      // We need to eliminate those duplicate edges as we traverse.  This requires us to keep a set of edges we've seen.\n      // Luckily, the number of edges we're likely to encounter in a real-world situation is small, so we can get away with it.\n      return traverseEdges(rootNode, edgeIterator, minValue, maxValue, new HashSet<>());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (rootNode == null) {\n        return true;\n      }\n      return rootNode.traverse(edgeIterator, minValue, maxValue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"083674ea80108c4053d9526cdef6f77b2494e551":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["265e2d0799e876e7c751a97229b0d8007cd79f0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["083674ea80108c4053d9526cdef6f77b2494e551"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","083674ea80108c4053d9526cdef6f77b2494e551"]},"commit2Childs":{"083674ea80108c4053d9526cdef6f77b2494e551":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["265e2d0799e876e7c751a97229b0d8007cd79f0a","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","55b50463286869f584cf849d1587a0fcd54d1dfa"],"265e2d0799e876e7c751a97229b0d8007cd79f0a":["5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["083674ea80108c4053d9526cdef6f77b2494e551"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}