{"path":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJDelete(String,double,String...).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJDelete(String,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a resource and then matches some JSON test expressions against the \n   * response using the specified double delta tolerance.\n   */\n  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJDelete(String,double,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase#assertJDelete(String,double,String...).mjava","sourceNew":"  /**\n   * Deletes a resource and then matches some JSON test expressions against the \n   * response using the specified double delta tolerance.\n   */\n  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: {}\", request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error={}\\n expected ={}\"\n              + \"\\n response = {}\\n request = {}\"\n              , err, testJSON, response, request);\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\\n expected ={}\\n\"\n              + \"\\n response = {}\\n request = {}\"\n              , testJSON, response, request\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes a resource and then matches some JSON test expressions against the \n   * response using the specified double delta tolerance.\n   */\n  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}