{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/ConcurrentMatcherTestBase#testMatchesAreDisambiguated().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/ConcurrentMatcherTestBase#testMatchesAreDisambiguated().mjava","pathOld":"/dev/null","sourceNew":"  public void testMatchesAreDisambiguated() throws Exception {\n\n    ExecutorService executor = Executors.newFixedThreadPool(4, new NamedThreadFactory(\"matchers\"));\n\n    try (Monitor monitor = new Monitor(ANALYZER)) {\n      List<MonitorQuery> queries = new ArrayList<>();\n      for (int i = 0; i < 10; i++) {\n        queries.add(new MonitorQuery(Integer.toString(i), MonitorTestBase.parse(\"test^10 doc \" + i)));\n      }\n      monitor.register(queries);\n      assertEquals(30, monitor.getDisjunctCount());\n\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"test doc doc\", Field.Store.NO));\n\n      MatchingQueries<ScoringMatch> matches\n          = monitor.match(doc, matcherFactory(executor, ScoringMatch.DEFAULT_MATCHER, 10));\n\n      assertEquals(20, matches.getQueriesRun());\n      assertEquals(10, matches.getMatchCount());\n      assertTrue(matches.getErrors().isEmpty());\n      for (ScoringMatch match : matches.getMatches()) {\n        // The queries are all split into three by the QueryDecomposer, and the\n        // 'test' and 'doc' parts will match.  'test' will have a higher score,\n        // because of it's lower termfreq.  We need to check that each query ends\n        // up with the sum of the scores for the 'test' and 'doc' parts\n        assertEquals(1.4874471f, match.getScore(), 0);\n      }\n    }\n    finally {\n      executor.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}