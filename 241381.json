{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, IndexableField value) throws IOException {\n      BytesRef bytes = value.binaryValue();\n      assert bytes != null;\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":5,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, IndexableField value) throws IOException {\n      BytesRef bytes = value.binaryValue();\n      assert bytes != null;\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      fillDefault(docID);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      } else {\n        maxBytes += bytes.length;\n      }\n      \n      \n      docToEntry[docID] = ord;\n      lastDocId = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de5bbadeb3abac0f650298bff584bd4317bd75aa"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}