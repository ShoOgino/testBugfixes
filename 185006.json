{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#fileLength(String).mjava","commits":[{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#fileLength(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLength(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#fileLength(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f936b67ab4a872d22231aae4f63608e7f411071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f936b67ab4a872d22231aae4f63608e7f411071":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","7f936b67ab4a872d22231aae4f63608e7f411071"],"7f936b67ab4a872d22231aae4f63608e7f411071":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}