{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a9119f665d52b16e936bb48c5b836609aadbc5","date":1351605383,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    numMatches = 0;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      numMatches++;\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"757496f10c991c553a874f78fb06c3f0dc110dff","date":1351616733,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    numMatches = 0;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      numMatches++;\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    numMatches = 0;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      numMatches++;\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    numMatches = 0;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      numMatches++;\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4409879b1445c56c3834b823720d47c08c409c5","date":1428086307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc","date":1434656225,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      int matchLength = endPos - startPos;\n      freq += docScorer.computeSlopFactor(matchLength);\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8525cf39738b3113cc2ef20025af7208403718","date":1438616965,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, spans=\"+spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, spans=\"+spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, spans=\"+spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, spans=\"+spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    doStartCurrentDoc();\n\n    assert startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(width());\n      doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b","date":1468893866,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + this.toString();\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + this.toString();\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + this.toString();\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + this.toString();\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + this.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136d4e97e5588b3f560e4d157962baa796f6c259","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += (1.0 / (1.0 + spans.width()));\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"297201ceb6f93f54f44df6d02cdc988591428b75","date":1510304523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += (1.0 / (1.0 + spans.width()));\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b82182bcb9110d24f7de32032113dbf31606c2","date":1510306998,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += (1.0 / (1.0 + spans.width()));\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","sourceOld":"  /**\n   * Sets {@link #freq} and {@link #numMatches} for the current document.\n   * <p>\n   * This will be called at most once per document.\n   */\n  protected final void setFreqCurrentDoc() throws IOException {\n    freq = 0.0f;\n    numMatches = 0;\n\n    spans.doStartCurrentDoc();\n\n    assert spans.startPosition() == -1 : \"incorrect initial start position, \" + spans;\n    assert spans.endPosition() == -1 : \"incorrect initial end position, \" + spans;\n    int prevStartPos = -1;\n    int prevEndPos = -1;\n\n    int startPos = spans.nextStartPosition();\n    assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, \" + spans;\n    do {\n      assert startPos >= prevStartPos;\n      int endPos = spans.endPosition();\n      assert endPos != Spans.NO_MORE_POSITIONS;\n      // This assertion can fail for Or spans on the same term:\n      // assert (startPos != prevStartPos) || (endPos > prevEndPos) : \"non increased endPos=\"+endPos;\n      assert (startPos != prevStartPos) || (endPos >= prevEndPos) : \"decreased endPos=\"+endPos;\n      numMatches++;\n      if (docScorer == null) {  // scores not required, break out here\n        freq = 1;\n        return;\n      }\n      freq += docScorer.computeSlopFactor(spans.width());\n      spans.doCurrentSpans();\n      prevStartPos = startPos;\n      prevEndPos = endPos;\n      startPos = spans.nextStartPosition();\n    } while (startPos != Spans.NO_MORE_POSITIONS);\n\n    assert spans.startPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final start position, \" + spans;\n    assert spans.endPosition() == Spans.NO_MORE_POSITIONS : \"incorrect final end position, \" + spans;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"757496f10c991c553a874f78fb06c3f0dc110dff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","05a9119f665d52b16e936bb48c5b836609aadbc5"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["2e8525cf39738b3113cc2ef20025af7208403718"],"f4409879b1445c56c3834b823720d47c08c409c5":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["f4409879b1445c56c3834b823720d47c08c409c5"],"05a9119f665d52b16e936bb48c5b836609aadbc5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b"],"2e8525cf39738b3113cc2ef20025af7208403718":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","f4409879b1445c56c3834b823720d47c08c409c5"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["297201ceb6f93f54f44df6d02cdc988591428b75"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["757496f10c991c553a874f78fb06c3f0dc110dff"],"fab172655716b96f7e42376116235017a922de3a":["757496f10c991c553a874f78fb06c3f0dc110dff","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"297201ceb6f93f54f44df6d02cdc988591428b75":["136d4e97e5588b3f560e4d157962baa796f6c259"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b"]},"commit2Childs":{"d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","136d4e97e5588b3f560e4d157962baa796f6c259"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["757496f10c991c553a874f78fb06c3f0dc110dff","05a9119f665d52b16e936bb48c5b836609aadbc5"],"757496f10c991c553a874f78fb06c3f0dc110dff":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"f4409879b1445c56c3834b823720d47c08c409c5":["c257cd8ddb1ed5632a36c7488614a2ee21705d24","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["2e8525cf39738b3113cc2ef20025af7208403718"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"05a9119f665d52b16e936bb48c5b836609aadbc5":["757496f10c991c553a874f78fb06c3f0dc110dff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2e8525cf39738b3113cc2ef20025af7208403718":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d2d19b3bfbed76e482aec3d2b24ea7d1b9ca777b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["f4409879b1445c56c3834b823720d47c08c409c5","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"297201ceb6f93f54f44df6d02cdc988591428b75":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["297201ceb6f93f54f44df6d02cdc988591428b75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}