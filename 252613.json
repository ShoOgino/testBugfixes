{"path":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testValues().mjava","commits":[{"id":"c76cf50e9120d497075f7635c7a7d828f33c9750","date":1450187451,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testValues() throws Exception {\n    final SolrQueryResponse response = new SolrQueryResponse();\n    assertEquals(\"values initially not empty\", 0, response.getValues().size());\n    // initially empty, then add something\n    final NamedList<Object> newValue = new SimpleOrderedMap<>();\n    newValue.add(\"key1\", \"value1\");\n    response.setAllValues(newValue);\n    assertEquals(\"values new value\", newValue, response.getValues());\n    response.add(\"key2\", \"value2\");\n    {\n      final Iterator<Map.Entry<String,Object>> it = response.getValues().iterator();\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry1 = it.next();\n      assertEquals(\"key1\", entry1.getKey());\n      assertEquals(\"value1\", entry1.getValue());\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry2 = it.next();\n      assertEquals(\"key2\", entry2.getKey());\n      assertEquals(\"value2\", entry2.getValue());\n      assertFalse(it.hasNext());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testValues().mjava","sourceNew":"  @Test\n  public void testValues() throws Exception {\n    final SolrQueryResponse response = new SolrQueryResponse();\n    assertEquals(\"values initially not empty\", 0, response.getValues().size());\n    // initially empty, then add something\n    final NamedList<Object> newValue = new SimpleOrderedMap<>();\n    newValue.add(\"key1\", \"value1\");\n    response.setAllValues(newValue);\n    assertEquals(\"values new value\", newValue, response.getValues());\n    response.add(\"key2\", \"value2\");\n    {\n      @SuppressWarnings({\"unchecked\"})\n      final Iterator<Map.Entry<String,Object>> it = response.getValues().iterator();\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry1 = it.next();\n      assertEquals(\"key1\", entry1.getKey());\n      assertEquals(\"value1\", entry1.getValue());\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry2 = it.next();\n      assertEquals(\"key2\", entry2.getKey());\n      assertEquals(\"value2\", entry2.getValue());\n      assertFalse(it.hasNext());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValues() throws Exception {\n    final SolrQueryResponse response = new SolrQueryResponse();\n    assertEquals(\"values initially not empty\", 0, response.getValues().size());\n    // initially empty, then add something\n    final NamedList<Object> newValue = new SimpleOrderedMap<>();\n    newValue.add(\"key1\", \"value1\");\n    response.setAllValues(newValue);\n    assertEquals(\"values new value\", newValue, response.getValues());\n    response.add(\"key2\", \"value2\");\n    {\n      final Iterator<Map.Entry<String,Object>> it = response.getValues().iterator();\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry1 = it.next();\n      assertEquals(\"key1\", entry1.getKey());\n      assertEquals(\"value1\", entry1.getValue());\n      assertTrue(it.hasNext());\n      final Map.Entry<String,Object> entry2 = it.next();\n      assertEquals(\"key2\", entry2.getKey());\n      assertEquals(\"value2\", entry2.getValue());\n      assertFalse(it.hasNext());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c76cf50e9120d497075f7635c7a7d828f33c9750":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c76cf50e9120d497075f7635c7a7d828f33c9750"]},"commit2Childs":{"c76cf50e9120d497075f7635c7a7d828f33c9750":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c76cf50e9120d497075f7635c7a7d828f33c9750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}