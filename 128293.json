{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getTopGroups(AbstractSecondPassGroupingCollector,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private TopGroups<BytesRef> getTopGroups(AbstractSecondPassGroupingCollector c, int withinGroupOffset) {\n    if (c.getClass().isAssignableFrom(TermSecondPassGroupingCollector.class)) {\n      return ((TermSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n    } else if (c.getClass().isAssignableFrom(FunctionSecondPassGroupingCollector.class)) {\n      TopGroups<MutableValue> mvalTopGroups = ((FunctionSecondPassGroupingCollector) c).getTopGroups(withinGroupOffset);\n      List<GroupDocs<BytesRef>> groups = new ArrayList<GroupDocs<BytesRef>>(mvalTopGroups.groups.length);\n      for (GroupDocs<MutableValue> mvalGd : mvalTopGroups.groups) {\n        BytesRef groupValue = mvalGd.groupValue.exists() ? ((MutableValueStr) mvalGd.groupValue).value : null;\n        groups.add(new GroupDocs<BytesRef>(mvalGd.maxScore, mvalGd.totalHits, mvalGd.scoreDocs, groupValue, mvalGd.groupSortValues));\n      }\n      return new TopGroups<BytesRef>(mvalTopGroups.groupSort, mvalTopGroups.withinGroupSort, mvalTopGroups.totalHitCount, mvalTopGroups.totalGroupedHitCount, groups.toArray(new GroupDocs[groups.size()]));\n    } else if (DVSecondPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((DVSecondPassGroupingCollector<BytesRef>) c).getTopGroups(withinGroupOffset);\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["4739c84c362b9673ab5ed3e038ff760c718c30c8","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}