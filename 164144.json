{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","commits":[{"id":"f89574d69843793efb77e8611441f8aee3aad1e8","date":1300294286,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f89574d69843793efb77e8611441f8aee3aad1e8","0762b640e0d0d12b6edb96db68986e13145c3484"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"0762b640e0d0d12b6edb96db68986e13145c3484":["f89574d69843793efb77e8611441f8aee3aad1e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f89574d69843793efb77e8611441f8aee3aad1e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["d619839baa8ce5503e496b94a9e42ad6f079293f","0762b640e0d0d12b6edb96db68986e13145c3484"],"f89574d69843793efb77e8611441f8aee3aad1e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","f89574d69843793efb77e8611441f8aee3aad1e8"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"f89574d69843793efb77e8611441f8aee3aad1e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","0762b640e0d0d12b6edb96db68986e13145c3484","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}