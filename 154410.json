{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","commits":[{"id":"250dfa260b94f1754ee1b5819280aaaff8416405","date":1454769706,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","pathOld":"/dev/null","sourceNew":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        String name = TestUtil.randomSimpleString(random());\n        if (name.length() == 0) {\n          continue;\n        }\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3f557f73029650c60841c264f9848c11dadd4744"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","pathOld":"/dev/null","sourceNew":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        String name = TestUtil.randomSimpleString(random());\n        if (name.length() == 0) {\n          continue;\n        }\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","pathOld":"/dev/null","sourceNew":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        String name = TestUtil.randomSimpleString(random());\n        if (name.length() == 0) {\n          continue;\n        }\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f557f73029650c60841c264f9848c11dadd4744","date":1518167642,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","sourceNew":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String name = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        String name = TestUtil.randomSimpleString(random());\n        if (name.length() == 0) {\n          continue;\n        }\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":["250dfa260b94f1754ee1b5819280aaaff8416405"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testListAllIsSorted().mjava","sourceNew":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while (names.size() < count) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String name = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertArrayEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testListAllIsSorted() throws IOException {\n    try (Directory dir = getDirectory(createTempDir())) {\n      int count = atLeast(20);\n      Set<String> names = new HashSet<>();\n      while(names.size() < count) {\n        // create a random filename (segment file name style), so it cannot hit windows problem with special filenames (\"con\", \"com1\",...):\n        String name = IndexFileNames.segmentFileName(TestUtil.randomSimpleString(random(), 1, 6), TestUtil.randomSimpleString(random()), \"test\");\n        if (random().nextInt(5) == 1) {\n          IndexOutput out = dir.createTempOutput(name, \"foo\", IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        } else if (names.contains(name) == false) {\n          IndexOutput out = dir.createOutput(name, IOContext.DEFAULT);\n          names.add(out.getName());\n          out.close();\n        }\n      }\n      String[] actual = dir.listAll();\n      String[] expected = actual.clone();\n      Arrays.sort(expected);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"250dfa260b94f1754ee1b5819280aaaff8416405":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a207d19eac354d649c3f0e2cce070017c78125e"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","250dfa260b94f1754ee1b5819280aaaff8416405"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f557f73029650c60841c264f9848c11dadd4744":["5a207d19eac354d649c3f0e2cce070017c78125e"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["3f557f73029650c60841c264f9848c11dadd4744"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"250dfa260b94f1754ee1b5819280aaaff8416405":["5a207d19eac354d649c3f0e2cce070017c78125e"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"5a207d19eac354d649c3f0e2cce070017c78125e":["dd75f58072bba84066e89d61bd7028de1bd5b632","3f557f73029650c60841c264f9848c11dadd4744"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["250dfa260b94f1754ee1b5819280aaaff8416405","dd75f58072bba84066e89d61bd7028de1bd5b632","5a207d19eac354d649c3f0e2cce070017c78125e"],"3f557f73029650c60841c264f9848c11dadd4744":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}