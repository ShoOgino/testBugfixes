{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c0f50a240cf02105b13b11e49095779864d37f","date":1311151772,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":"    private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#verifyWithSchema(Map[String,DataConfig.Field]).mjava","sourceNew":null,"sourceOld":"    private void verifyWithSchema(Map<String, DataConfig.Field> fields) {\n    Map<String, SchemaField> schemaFields = schema.getFields();\n    for (Map.Entry<String, SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n                  .info(sf.getName()\n                          + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String, DataConfig.Field> entry : fields.entrySet()) {\n      DataConfig.Field fld = entry.getValue();\n      SchemaField field = schema.getFieldOrNull(fld.getName());\n      if (field == null) {\n        field = config.lowerNameVsSchemaField.get(fld.getName().toLowerCase(Locale.ENGLISH));\n        if (field == null) {\n          LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82c0f50a240cf02105b13b11e49095779864d37f":["c26f00b574427b55127e869b935845554afde1fa"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["82c0f50a240cf02105b13b11e49095779864d37f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"82c0f50a240cf02105b13b11e49095779864d37f":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["82c0f50a240cf02105b13b11e49095779864d37f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}