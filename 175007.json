{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.docWriter.infoStream != null)\n            state.docWriter.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.docWriter.infoStream != null)\n            state.docWriter.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.docWriter.infoStream != null)\n            state.docWriter.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#trimFields(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#trimFields(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  /** If there are fields we've seen but did not see again\n   *  in the last run, then free them up. */\n\n  void trimFields(SegmentWriteState state) {\n\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField perField = fieldHash[i];\n      DocFieldProcessorPerField lastPerField = null;\n\n      while (perField != null) {\n\n        if (perField.lastGen == -1) {\n\n          // This field was not seen since the previous\n          // flush, so, free up its resources now\n\n          // Unhash\n          if (lastPerField == null)\n            fieldHash[i] = perField.next;\n          else\n            lastPerField.next = perField.next;\n\n          if (state.infoStream != null) {\n            state.infoStream.println(\"  purge field=\" + perField.fieldInfo.name);\n          }\n\n          totalFieldCount--;\n\n        } else {\n          // Reset\n          perField.lastGen = -1;\n          lastPerField = perField;\n        }\n\n        perField = perField.next;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1224a4027481acce15495b03bce9b48b93b42722"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6c18273ea5b3974d2f30117f46f1ae416c28f727","d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c18273ea5b3974d2f30117f46f1ae416c28f727","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}