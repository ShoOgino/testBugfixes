{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName\n            + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName\n            + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7e4f853b998a03d72d5b82562f9aa71ce33c44","date":1393462308,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName\n            + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName\n            + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":["77a0b04ddf690033aa642a3caf096a2ebfe1812f","77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44","29f5eaf296600e1665151e7929d42a3cbe22e481"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["849494cf2f3a96af5c8c84995108ddd8456fcd04","2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29f5eaf296600e1665151e7929d42a3cbe22e481"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44","37a0f60745e53927c4c876cfe5b5a58170f0646c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}