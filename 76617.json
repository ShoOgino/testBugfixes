{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","commits":[{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d54fb06e5d5ca00e6b0db75b52de2013d09ce4","date":1392661838,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<String, Object>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand createShard(ClusterState clusterState, ZkNodeProps message) {\n      return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState createShard(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shardId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      Slice slice = clusterState.getSlice(collection, shardId);\n      if (slice == null)  {\n        Map<String, Replica> replicas = Collections.EMPTY_MAP;\n        Map<String, Object> sliceProps = new HashMap<>();\n        String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);\n        String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);\n        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);\n        sliceProps.put(Slice.RANGE, shardRange);\n        sliceProps.put(Slice.STATE, shardState);\n        if (shardParent != null)  {\n          sliceProps.put(Slice.PARENT, shardParent);\n        }\n        slice = new Slice(shardId, replicas, sliceProps);\n        clusterState = updateSlice(clusterState, collection, slice);\n      } else  {\n        log.error(\"Unable to create Shard: \" + shardId + \" because it already exists in collection: \" + collection);\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createShard(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand createShard(ClusterState clusterState, ZkNodeProps message) {\n      return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["87d54fb06e5d5ca00e6b0db75b52de2013d09ce4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["87d54fb06e5d5ca00e6b0db75b52de2013d09ce4","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"87d54fb06e5d5ca00e6b0db75b52de2013d09ce4":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"87d54fb06e5d5ca00e6b0db75b52de2013d09ce4":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["87d54fb06e5d5ca00e6b0db75b52de2013d09ce4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}