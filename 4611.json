{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Row#uniformCmd(boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Row#uniformCmd(boolean).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Row#uniformCmd(boolean).mjava","sourceNew":"  /**\n   * Return the number of identical Cells (containing patch commands) in this\n   * Row.\n   * \n   * @param eqSkip when set to <tt>false</tt> the removed patch commands are\n   *          considered\n   * @return the number of identical Cells, or -1 if there are (at least) two\n   *         different cells\n   */\n  public int uniformCmd(boolean eqSkip) {\n    Iterator<Cell> i = cells.values().iterator();\n    int ret = -1;\n    uniformCnt = 1;\n    uniformSkip = 0;\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        return -1;\n      }\n      if (c.cmd >= 0) {\n        if (ret < 0) {\n          ret = c.cmd;\n          uniformSkip = c.skip;\n        } else if (ret == c.cmd) {\n          if (eqSkip) {\n            if (uniformSkip == c.skip) {\n              uniformCnt++;\n            } else {\n              return -1;\n            }\n          } else {\n            uniformCnt++;\n          }\n        } else {\n          return -1;\n        }\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Return the number of identical Cells (containing patch commands) in this\n   * Row.\n   * \n   * @param eqSkip when set to <tt>false</tt> the removed patch commands are\n   *          considered\n   * @return the number of identical Cells, or -1 if there are (at least) two\n   *         different cells\n   */\n  public int uniformCmd(boolean eqSkip) {\n    Iterator<Cell> i = cells.values().iterator();\n    int ret = -1;\n    uniformCnt = 1;\n    uniformSkip = 0;\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        return -1;\n      }\n      if (c.cmd >= 0) {\n        if (ret < 0) {\n          ret = c.cmd;\n          uniformSkip = c.skip;\n        } else if (ret == c.cmd) {\n          if (eqSkip) {\n            if (uniformSkip == c.skip) {\n              uniformCnt++;\n            } else {\n              return -1;\n            }\n          } else {\n            uniformCnt++;\n          }\n        } else {\n          return -1;\n        }\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Row#uniformCmd(boolean).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Row#uniformCmd(boolean).mjava","sourceNew":"  /**\n   * Return the number of identical Cells (containing patch commands) in this\n   * Row.\n   * \n   * @param eqSkip when set to <code>false</code> the removed patch commands are\n   *          considered\n   * @return the number of identical Cells, or -1 if there are (at least) two\n   *         different cells\n   */\n  public int uniformCmd(boolean eqSkip) {\n    Iterator<Cell> i = cells.values().iterator();\n    int ret = -1;\n    uniformCnt = 1;\n    uniformSkip = 0;\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        return -1;\n      }\n      if (c.cmd >= 0) {\n        if (ret < 0) {\n          ret = c.cmd;\n          uniformSkip = c.skip;\n        } else if (ret == c.cmd) {\n          if (eqSkip) {\n            if (uniformSkip == c.skip) {\n              uniformCnt++;\n            } else {\n              return -1;\n            }\n          } else {\n            uniformCnt++;\n          }\n        } else {\n          return -1;\n        }\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Return the number of identical Cells (containing patch commands) in this\n   * Row.\n   * \n   * @param eqSkip when set to <tt>false</tt> the removed patch commands are\n   *          considered\n   * @return the number of identical Cells, or -1 if there are (at least) two\n   *         different cells\n   */\n  public int uniformCmd(boolean eqSkip) {\n    Iterator<Cell> i = cells.values().iterator();\n    int ret = -1;\n    uniformCnt = 1;\n    uniformSkip = 0;\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        return -1;\n      }\n      if (c.cmd >= 0) {\n        if (ret < 0) {\n          ret = c.cmd;\n          uniformSkip = c.skip;\n        } else if (ret == c.cmd) {\n          if (eqSkip) {\n            if (uniformSkip == c.skip) {\n              uniformCnt++;\n            } else {\n              return -1;\n            }\n          } else {\n            uniformCnt++;\n          }\n        } else {\n          return -1;\n        }\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}