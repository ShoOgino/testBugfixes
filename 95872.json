{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestRandomBinary(int).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numDocs = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        // TODO: sometimes test on a \"small\" volume too, so we test the high density cases, higher chance of boundary, etc. cases:\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    verify(docValues, null, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","25b2820b242e28867a2f4edae536382216c511dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d15e34266d75e4e8b95da046cd0afc812367b38"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}