{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a009b1ead486cdd766fc886dccd36621d4f9827","date":1341697311,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4a009b1ead486cdd766fc886dccd36621d4f9827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4a009b1ead486cdd766fc886dccd36621d4f9827","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}