{"path":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, 0);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, 0);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, 0);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, 0);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, 0);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":null,"sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["322360ac5185a8446d3e0b530b2068bef67cd3d5","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}