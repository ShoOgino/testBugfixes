{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(\"cores\", 0);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> values.put(\"cores\", 0));\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(\"cores\", 0);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":["7cf5ebf4183939c15e55353b64c57a5182671639"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cf5ebf4183939c15e55353b64c57a5182671639","date":1516815713,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> values.put(\"cores\", 0));\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":["a4422b331d00607258b0ed3e43934306e67764aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> values.put(\"cores\", 0));\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lock();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    collectionsStatesRef.set(null);\n    try {\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, 1000);\n      });\n      collectionsStatesRef.set(null);\n      saveClusterState.set(true);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    collectionsStatesRef.set(null);\n    try {\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    collectionsStatesRef.set(null);\n    try {\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    collectionsStatesRef.set(null);\n    try {\n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteAllCollections().mjava","sourceNew":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all collections.\n   */\n  public void simDeleteAllCollections() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      \n      collProperties.clear();\n      sliceProperties.clear();\n      leaderThrottles.clear();\n      nodeReplicaMap.clear();\n      colShardReplicaMap.clear();\n      cloudManager.getSimNodeStateProvider().simGetAllNodeValues().forEach((n, values) -> {\n        values.put(ImplicitSnitch.CORES, 0);\n        values.put(ImplicitSnitch.DISK, SimCloudManager.DEFAULT_FREE_DISK);\n        values.put(Variable.Type.TOTALDISK.tagName, SimCloudManager.DEFAULT_TOTAL_DISK);\n        values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n        values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n      });\n      cloudManager.getDistribStateManager().removeRecursively(ZkStateReader.COLLECTIONS_ZKNODE, true, false);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"7cf5ebf4183939c15e55353b64c57a5182671639":["a4422b331d00607258b0ed3e43934306e67764aa"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a4422b331d00607258b0ed3e43934306e67764aa","7cf5ebf4183939c15e55353b64c57a5182671639"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f592209545c71895260367152601e9200399776d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"7cf5ebf4183939c15e55353b64c57a5182671639":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["7cf5ebf4183939c15e55353b64c57a5182671639","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}