{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/RankStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = tupleStream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          Tuple peek = top.peek();\n          if(top.size() >= size) {\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = tupleStream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          Tuple peek = top.peek();\n          if(top.size() >= size) {\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          Tuple peek = top.peek();\n          if(top.size() >= size) {\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = tupleStream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          Tuple peek = top.peek();\n          if(top.size() >= size) {\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          if(top.size() >= size) {\n            Tuple peek = top.peek();\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(!finished) {\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          finished = true;\n          int s = top.size();\n          for(int i=0; i<s; i++) {\n            Tuple t = top.poll();\n            topList.addFirst(t);\n          }\n          topList.addLast(tuple);\n          break;\n        } else {\n          Tuple peek = top.peek();\n          if(top.size() >= size) {\n            if(comp.compare(tuple, peek) < 0) {\n              top.poll();\n              top.add(tuple);\n            }\n          } else {\n            top.add(tuple);\n          }\n        }\n      }\n    }\n\n    return topList.pollFirst();\n  }\n\n","bugFix":["91814ce09be68efd0626969632e79ae47d8876d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}