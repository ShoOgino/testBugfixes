{"path":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","commits":[{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b377fd91b7578d0c02b259b5112d667e4d5f8e6","date":1499349411,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","sourceNew":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertEquals(0, schema.getCopyFieldProperties(true, Collections.singleton(fieldName), null).size());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","sourceOld":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testSingleFieldDefaultFieldTypeRoundTrip().mjava","sourceNew":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertEquals(0, schema.getCopyFieldProperties(true, Collections.singleton(fieldName), null).size());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","sourceOld":"  public void testSingleFieldDefaultFieldTypeRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName = \"newfield4\";\n    assertNull(schema.getFieldOrNull(fieldName));\n    Float fieldValue1 = -13258.0f;\n    Double fieldValue2 = 8.4828800808E10;\n    String fieldValue3 = \"blah blah\";\n    SolrInputDocument d = processAdd\n        (\"add-fields\", doc(f(\"id\", \"4\"), f(fieldName, fieldValue1, fieldValue2, fieldValue3)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName));\n    assertEquals(\"text\", schema.getFieldType(fieldName).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:4\")\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName + \"']/str[.='\" + fieldValue3.toString() + \"']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["fe3edda347939cc6859dbf4287e84f3e8e4bb939","4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6"]},"commit2Childs":{"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6","37a0f60745e53927c4c876cfe5b5a58170f0646c","e73d8d559120669b47658108d818b637df5456ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"e73d8d559120669b47658108d818b637df5456ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}