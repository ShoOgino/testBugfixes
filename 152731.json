{"path":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"/dev/null","sourceNew":"  /** Merges all RAM-resident segments. */\n  private final void flushRamSegments() throws IOException {\n    int minSegment = segmentInfos.size()-1;\n    int docCount = 0;\n    while (minSegment >= 0 &&\n\t   (segmentInfos.info(minSegment)).dir == ramDirectory) {\n      docCount += segmentInfos.info(minSegment).docCount;\n      minSegment--;\n    }\n    if (minSegment < 0 ||\t\t\t  // add one FS segment?\n\t(docCount + segmentInfos.info(minSegment).docCount) > mergeFactor ||\n\t!(segmentInfos.info(segmentInfos.size()-1).dir == ramDirectory))\n      minSegment++;\n    if (minSegment >= segmentInfos.size())\n      return;\t\t\t\t\t  // none to merge\n    mergeSegments(minSegment);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Merges all RAM-resident segments. */\n  private final void flushRamSegments() throws IOException {\n    int minSegment = segmentInfos.size()-1;\n    int docCount = 0;\n    while (minSegment >= 0 &&\n           (segmentInfos.info(minSegment)).dir == ramDirectory) {\n      docCount += segmentInfos.info(minSegment).docCount;\n      minSegment--;\n    }\n    if (minSegment < 0 ||\t\t\t  // add one FS segment?\n        (docCount + segmentInfos.info(minSegment).docCount) > mergeFactor ||\n        !(segmentInfos.info(segmentInfos.size()-1).dir == ramDirectory))\n      minSegment++;\n    if (minSegment >= segmentInfos.size())\n      return;\t\t\t\t\t  // none to merge\n    mergeSegments(minSegment);\n  }\n\n","sourceOld":"  /** Merges all RAM-resident segments. */\n  private final void flushRamSegments() throws IOException {\n    int minSegment = segmentInfos.size()-1;\n    int docCount = 0;\n    while (minSegment >= 0 &&\n\t   (segmentInfos.info(minSegment)).dir == ramDirectory) {\n      docCount += segmentInfos.info(minSegment).docCount;\n      minSegment--;\n    }\n    if (minSegment < 0 ||\t\t\t  // add one FS segment?\n\t(docCount + segmentInfos.info(minSegment).docCount) > mergeFactor ||\n\t!(segmentInfos.info(segmentInfos.size()-1).dir == ramDirectory))\n      minSegment++;\n    if (minSegment >= segmentInfos.size())\n      return;\t\t\t\t\t  // none to merge\n    mergeSegments(minSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      if (mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size()) > 0) {\n        maybeMergeSegments();\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges all RAM-resident segments. */\n  private final void flushRamSegments() throws IOException {\n    int minSegment = segmentInfos.size()-1;\n    int docCount = 0;\n    while (minSegment >= 0 &&\n           (segmentInfos.info(minSegment)).dir == ramDirectory) {\n      docCount += segmentInfos.info(minSegment).docCount;\n      minSegment--;\n    }\n    if (minSegment < 0 ||\t\t\t  // add one FS segment?\n        (docCount + segmentInfos.info(minSegment).docCount) > mergeFactor ||\n        !(segmentInfos.info(segmentInfos.size()-1).dir == ramDirectory))\n      minSegment++;\n    if (minSegment >= segmentInfos.size())\n      return;\t\t\t\t\t  // none to merge\n    mergeSegments(minSegment);\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c","date":1158614762,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments();\n    }\n  }\n\n","sourceOld":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      if (mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size()) > 0) {\n        maybeMergeSegments();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"938d1493cf2f269d3b9e66e932c07ee784e00022","date":1161902835,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","sourceOld":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  public final synchronized void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","sourceOld":"  /** Merges all RAM-resident segments, then may merge segments. */\n  private final void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws IOException {\n    if (anythingToFlushRam()) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","sourceOld":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  public final synchronized void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","bugFix":["d7052f725a053aa55424f966831826f61b798bf1","5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0 || bufferedDeleteTerms.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","sourceOld":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws IOException {\n    if (anythingToFlushRam()) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws CorruptIndexException, IOException {\n    if (ramSegmentInfos.size() > 0 || bufferedDeleteTerms.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","sourceOld":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() > 0 || bufferedDeleteTerms.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","bugFix":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c54737b0f24f1bf8f539c3b7badee921d71035c","date":1180596014,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws CorruptIndexException, IOException {\n    flushRamSegments(true);\n  }\n\n","sourceOld":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws CorruptIndexException, IOException {\n    if (ramSegmentInfos.size() > 0 || bufferedDeleteTerms.size() > 0) {\n      mergeSegments(ramSegmentInfos, 0, ramSegmentInfos.size());\n      maybeMergeSegments(minMergeDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushRamSegments().mjava","sourceNew":null,"sourceOld":"  /** Expert:  Flushes all RAM-resident segments (buffered documents), then may merge segments. */\n  private final synchronized void flushRamSegments() throws CorruptIndexException, IOException {\n    flushRamSegments(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7052f725a053aa55424f966831826f61b798bf1":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c":["d7052f725a053aa55424f966831826f61b798bf1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["6c54737b0f24f1bf8f539c3b7badee921d71035c"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"6c54737b0f24f1bf8f539c3b7badee921d71035c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"938d1493cf2f269d3b9e66e932c07ee784e00022":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["938d1493cf2f269d3b9e66e932c07ee784e00022"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"]},"commit2Childs":{"d7052f725a053aa55424f966831826f61b798bf1":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1b54a9bc667895a2095a886184bf69a3179e63df":["6c54737b0f24f1bf8f539c3b7badee921d71035c"],"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c":["938d1493cf2f269d3b9e66e932c07ee784e00022"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["d7052f725a053aa55424f966831826f61b798bf1"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"6c54737b0f24f1bf8f539c3b7badee921d71035c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["1b54a9bc667895a2095a886184bf69a3179e63df"],"938d1493cf2f269d3b9e66e932c07ee784e00022":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}