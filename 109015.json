{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels.FacetLabelReader#nextFacetLabel(int,String).mjava","commits":[{"id":"2b0ae449d456c3d95466275e466ca402ce36f52b","date":1601304937,"type":0,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels.FacetLabelReader#nextFacetLabel(int,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieves the next {@link FacetLabel} for the specified {@code docId} under the requested {@code facetDimension},\n     * or {@code null} if there are no more. This method has state: if the provided {@code docId} is the same as the\n     * previous invocation, it returns the next {@link FacetLabel} for that document.  Otherwise, it advances to\n     * the new {@code docId} and provides the first {@link FacetLabel} for that document, or {@code null} if that document\n     * has no indexed facets.  Each new {@code docId} must be in strictly monotonic (increasing) order.\n     *\n     * <p><b>NOTE</b>: This method loads the {@code int[] parents} array from the taxonomy index.\n     * The returned FacetLabels may not be in the same order in which they were indexed.</p>\n     *\n     * @param docId input docId provided in non-decreasing order\n     * @return the first or next {@link FacetLabel}, or {@code null} if there are no more\n     * @throws IOException if {@link TaxonomyReader} has problems getting path for an ordinal\n     * @throws IllegalArgumentException if docId provided is less than docId supplied in an earlier invocation\n     * @throws IllegalArgumentException if facetDimension is null\n     */\n    public FacetLabel nextFacetLabel(int docId, String facetDimension) throws IOException {\n      if (facetDimension == null) {\n        throw new IllegalArgumentException(\"Input facet dimension cannot be null\");\n      }\n      final int parentOrd = taxoReader.getOrdinal(new FacetLabel(facetDimension));\n      if (parentOrd == INVALID_ORDINAL) {\n        throw new IllegalArgumentException(\"Category ordinal not found for facet dimension: \" + facetDimension);\n      }\n\n      if (currentDocId != docId) {\n        if (docId < currentDocId) {\n          throw new IllegalArgumentException(\"docs out of order: previous docId=\" + currentDocId\n              + \" current docId=\" + docId);\n        }\n        ordinalsSegmentReader.get(docId, decodedOrds);\n        currentPos = decodedOrds.offset;\n        currentDocId = docId;\n      }\n\n      if (parents == null) {\n        parents = taxoReader.getParallelTaxonomyArrays().parents();\n      }\n\n      int endPos = decodedOrds.offset + decodedOrds.length;\n      assert currentPos <= endPos;\n\n      for (; currentPos < endPos; ) {\n        int ord = decodedOrds.ints[currentPos++];\n        if (isDescendant(ord, parentOrd) == true) {\n          return taxoReader.getPath(ord);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b0ae449d456c3d95466275e466ca402ce36f52b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b0ae449d456c3d95466275e466ca402ce36f52b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}