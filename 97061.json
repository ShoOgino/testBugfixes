{"path":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","commits":[{"id":"95ddefb56022771b5d4a53dc1baa806d2a14cfa9","date":1277381661,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","pathOld":"/dev/null","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n = channel.read(buffer, filePos);\n      if (n < 0) {\n        throw new IOException(\"eof\");\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","pathOld":"/dev/null","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n = channel.read(buffer, filePos);\n      if (n < 0) {\n        throw new IOException(\"eof\");\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new IOException(\"eof: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n = channel.read(buffer, filePos);\n      if (n < 0) {\n        throw new IOException(\"eof\");\n      }\n      buffer.rewind();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5090f41e198d9dd9374e99981f940b111973af2","date":1325969785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new IOException(\"eof: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5243f2425292adfa2c094097311654ae59588bc","date":1327855765,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#refill().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#refill().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#refill().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#refill().mjava","sourceNew":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","sourceOld":"    private void refill() throws IOException {\n      buffer.clear();\n      filePos += bufferSize;\n      bufferPos = 0;\n      assert (filePos & ALIGN_NOT_MASK) == filePos : \"filePos=\" + filePos + \" anded=\" + (filePos & ALIGN_NOT_MASK);\n      //System.out.println(\"X refill filePos=\" + filePos);\n      int n;\n      try {\n        n = channel.read(buffer, filePos);\n      } catch (IOException ioe) {\n        throw new IOException(ioe.getMessage() + \": \" + this, ioe);\n      }\n      if (n < 0) {\n        throw new EOFException(\"read past EOF: \" + this);\n      }\n      buffer.rewind();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"817882884229bace7dc5d1b75f6b0e4aa1e47122":["e5090f41e198d9dd9374e99981f940b111973af2","d5243f2425292adfa2c094097311654ae59588bc"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["e5090f41e198d9dd9374e99981f940b111973af2","d5243f2425292adfa2c094097311654ae59588bc"],"d5243f2425292adfa2c094097311654ae59588bc":["e5090f41e198d9dd9374e99981f940b111973af2"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"95ddefb56022771b5d4a53dc1baa806d2a14cfa9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5090f41e198d9dd9374e99981f940b111973af2":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5243f2425292adfa2c094097311654ae59588bc"]},"commit2Childs":{"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"f1efe3edca215dd9891cb42af283fed96f792ca0":["e5090f41e198d9dd9374e99981f940b111973af2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"d5243f2425292adfa2c094097311654ae59588bc":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"95ddefb56022771b5d4a53dc1baa806d2a14cfa9":["f1efe3edca215dd9891cb42af283fed96f792ca0","5f4e87790277826a2aea119328600dfb07761f32"],"e5090f41e198d9dd9374e99981f940b111973af2":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","d5243f2425292adfa2c094097311654ae59588bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}