{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","commits":[{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#handleDomainChanges().mjava","sourceNew":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","sourceOld":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","sourceOld":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","sourceOld":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","sourceOld":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","sourceOld":"  protected void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5","date":1477788234,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private boolean handleDomainChanges() throws IOException {\n    if (freq.domain == null) return false;\n    handleFilterExclusions();\n    boolean appliedFilters = handleBlockJoin();\n    return appliedFilters;\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private boolean handleDomainChanges() throws IOException {\n    if (freq.domain == null) return false;\n    handleFilterExclusions();\n    boolean appliedFilters = handleBlockJoin();\n    return appliedFilters;\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n    handleBlockJoin();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12e7f5233d4a77959b66fda90df286dace8a9a0","date":1478016064,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private boolean handleDomainChanges() throws IOException {\n    if (freq.domain == null) return false;\n    handleFilterExclusions();\n    boolean appliedFilters = handleBlockJoin();\n    return appliedFilters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private boolean handleDomainChanges() throws IOException {\n    if (freq.domain == null) return false;\n    handleFilterExclusions();\n    boolean appliedFilters = handleBlockJoin();\n    return appliedFilters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    \n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    \n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n\n    if (null != freq.domain.explicitQueries) {\n      try {\n        final List<Query> domainQs = evalJSONFilterQueryStruct(fcontext, freq.domain.explicitQueries);\n        if (domainQs.isEmpty()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"'query' domain must not evaluate to an empty list of queries\");\n        }\n        fcontext.base = fcontext.searcher.getDocSet(domainQs);\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Unable to parse domain 'query': \" + freq.domain.explicitQueries +\n                                \" -- reason: \" + e.getMessage(),\n                                e);\n      }\n    } else {\n      // mutualy exclusive to freq.domain.explicitQueries\n      handleFilterExclusions();\n    }\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    \n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n    handleFilterExclusions();\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    \n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcd6a2cefce164763af175ff1accaf232439e8e","date":1527469335,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#handleDomainChanges().mjava","sourceNew":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n\n    if (null != freq.domain.explicitQueries) {\n      try {\n        final List<Query> domainQs = evalJSONFilterQueryStruct(fcontext, freq.domain.explicitQueries);\n        if (domainQs.isEmpty()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"'query' domain must not evaluate to an empty list of queries\");\n        }\n        fcontext.base = fcontext.searcher.getDocSet(domainQs);\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Unable to parse domain 'query': \" + freq.domain.explicitQueries +\n                                \" -- reason: \" + e.getMessage(),\n                                e);\n      }\n    } else {\n      // mutualy exclusive to freq.domain.explicitQueries\n      handleFilterExclusions();\n    }\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    handleGraphField();\n\n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  private void handleDomainChanges() throws IOException {\n    if (freq.domain == null) return;\n\n    if (null != freq.domain.explicitQueries) {\n      try {\n        final List<Query> domainQs = evalJSONFilterQueryStruct(fcontext, freq.domain.explicitQueries);\n        if (domainQs.isEmpty()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"'query' domain must not evaluate to an empty list of queries\");\n        }\n        fcontext.base = fcontext.searcher.getDocSet(domainQs);\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Unable to parse domain 'query': \" + freq.domain.explicitQueries +\n                                \" -- reason: \" + e.getMessage(),\n                                e);\n      }\n    } else {\n      // mutualy exclusive to freq.domain.explicitQueries\n      handleFilterExclusions();\n    }\n\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n\n    handleJoinField();\n    \n    boolean appliedFilters = handleBlockJoin();\n\n    if (this.filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["d12e7f5233d4a77959b66fda90df286dace8a9a0"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["320888923ec13b91f53082558f01f4c9960dd226","d12e7f5233d4a77959b66fda90df286dace8a9a0"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","79759974460bc59933cd169acc94f5c6b16368d5"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d12e7f5233d4a77959b66fda90df286dace8a9a0","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bcd6a2cefce164763af175ff1accaf232439e8e"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["2c705a0d590cf911e7c942df49563ca2ea176e22","e9017cf144952056066919f1ebc7897ff9bd71b1"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","9720b151fde2073f4e401450f4574e5f31c2d0ff","e9017cf144952056066919f1ebc7897ff9bd71b1"],"320888923ec13b91f53082558f01f4c9960dd226":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","79759974460bc59933cd169acc94f5c6b16368d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["d12e7f5233d4a77959b66fda90df286dace8a9a0","320888923ec13b91f53082558f01f4c9960dd226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}