{"path":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","commits":[{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc61a492eb4d507139c1e134e26eb7b1b005d586","date":1323049530,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      // TODO: this relies upon filenames\n      assertFalse(files[i].endsWith(\".nrm\") || files[i].endsWith(\".len\"));\n    }\n  }\n\n","sourceOld":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      // TODO: this relies upon filenames\n      assertFalse(files[i].endsWith(\".nrm\") || files[i].endsWith(\".len\"));\n    }\n  }\n\n","sourceOld":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      // TODO: this relies upon filenames\n      assertFalse(files[i].endsWith(\".nrm\") || files[i].endsWith(\".len\"));\n    }\n  }\n\n","sourceOld":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      assertFalse(files[i].endsWith(\".nrm\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#assertNoNrm(Directory).mjava","sourceNew":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      // TODO: this relies upon filenames\n      assertFalse(files[i].endsWith(\".nrm\") || files[i].endsWith(\".len\"));\n    }\n  }\n\n","sourceOld":"  private void assertNoNrm(Directory dir) throws Throwable {\n    final String[] files = dir.listAll();\n    for (int i = 0; i < files.length; i++) {\n      // TODO: this relies upon filenames\n      assertFalse(files[i].endsWith(\".nrm\") || files[i].endsWith(\".len\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","bc61a492eb4d507139c1e134e26eb7b1b005d586"],"bc61a492eb4d507139c1e134e26eb7b1b005d586":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","3615ce4a1f785ae1b779244de52c6a7d99227e60","bc61a492eb4d507139c1e134e26eb7b1b005d586","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bc61a492eb4d507139c1e134e26eb7b1b005d586":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}