{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec();\n    synchronized (this) {\n      try {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        if (pos == 0) {\n          writeLogHeader(codec);\n          pos = fos.size();\n        }\n        codec.init(fos);\n        codec.writeTag(JavaBinCodec.ARR, 3);\n        codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n        codec.writeLong(cmd.getVersion());\n        BytesRef br = cmd.getIndexedId();\n        codec.writeByteArray(br.bytes, br.offset, br.length);\n\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n\n        return pos;\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 3);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","e99829242bceda4cf974ec0eb5d82d713615b3da"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f592209545c71895260367152601e9200399776d":["e99829242bceda4cf974ec0eb5d82d713615b3da","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["e99829242bceda4cf974ec0eb5d82d713615b3da"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e99829242bceda4cf974ec0eb5d82d713615b3da"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}