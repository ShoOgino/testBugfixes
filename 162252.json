{"path":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits deletedDocs = MultiFields.getDeletedDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, deletedDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits deletedDocs = MultiFields.getDeletedDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, deletedDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs, drillDownTerm.field(), drillDownTerm.bytes()),\n        docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}