{"path":"src/java/org/apache/solr/util/OpenBitSet#clear(long,long).mjava","commits":[{"id":"5457c786a7fcff3391851b0aeecba1f7ddff6c3b","date":1182535200,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#clear(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b8911f378d79494dd9d132f71af61b8eb59e4d","date":1182544048,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#clear(long,long).mjava","pathOld":"src/java/org/apache/solr/util/OpenBitSet#clear(long,long).mjava","sourceNew":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","sourceOld":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/OpenBitSet#clear(long,long).mjava","sourceNew":null,"sourceOld":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["f2b8911f378d79494dd9d132f71af61b8eb59e4d"],"f2b8911f378d79494dd9d132f71af61b8eb59e4d":["5457c786a7fcff3391851b0aeecba1f7ddff6c3b"],"5457c786a7fcff3391851b0aeecba1f7ddff6c3b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5457c786a7fcff3391851b0aeecba1f7ddff6c3b"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"f2b8911f378d79494dd9d132f71af61b8eb59e4d":["5108097d840f85a1779a41d0e412efb8130546e6"],"5457c786a7fcff3391851b0aeecba1f7ddff6c3b":["f2b8911f378d79494dd9d132f71af61b8eb59e4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}