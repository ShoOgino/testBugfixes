{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    scorerDocQueue  = initScorerDocQueue();\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    scorerDocQueue  = initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight, subScorers.toArray(new Scorer[subScorers.size()]), subScorers.size());\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    scorerDocQueue  = initScorerDocQueue();\n  }\n\n","bugFix":["7be534ca83a593a45a836cbffd544f2671d9ca60","e5e679b9c5f68f1f331de920ae8366af75b44060","29d6eadc26bef1d3f5d3804b90cb7ba77162d007","b2863f0982cb65443a7ee5c42e13a24213f2736d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight, subScorers.toArray(new Scorer[subScorers.size()]), subScorers.size());\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    scorerDocQueue  = initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","sourceNew":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight, subScorers.toArray(new Scorer[subScorers.size()]), subScorers.size());\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n  }\n\n","sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight);\n    \n    nrScorers = subScorers.size();\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (nrScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n    this.subScorers = subScorers;\n\n    scorerDocQueue  = initScorerDocQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","date":1365610867,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#DisjunctionSumScorer(Weight,List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  /** Construct a <code>DisjunctionScorer</code>.\n   * @param weight The weight to be used.\n   * @param subScorers A collection of at least two subscorers.\n   * @param minimumNrMatchers The positive minimum number of subscorers that should\n   * match to match this query.\n   * <br>When <code>minimumNrMatchers</code> is bigger than\n   * the number of <code>subScorers</code>,\n   * no matches will be produced.\n   * <br>When minimumNrMatchers equals the number of subScorers,\n   * it more efficient to use <code>ConjunctionScorer</code>.\n   */\n  public DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, int minimumNrMatchers) throws IOException {\n    super(weight, subScorers.toArray(new Scorer[subScorers.size()]), subScorers.size());\n\n    if (minimumNrMatchers <= 0) {\n      throw new IllegalArgumentException(\"Minimum nr of matchers must be positive\");\n    }\n    if (numScorers <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n\n    this.minimumNrMatchers = minimumNrMatchers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}