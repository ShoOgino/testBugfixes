{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","commits":[{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSimpleDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  // nocommit\n  public static void checkSimpleDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    // nocommit: just for debugging\n    Map<String,String> atts = fi.attributes();\n    if (atts != null) {\n      msg(infoStream, \"  field: \" + fi.name + \": \" + atts);\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea3c18d8f37008425940502c58fd80ba4b5397c1","date":1361154566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f351d299ea258483e82449dc6e79878d4b21185","date":1374759612,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea3c18d8f37008425940502c58fd80ba4b5397c1":["f366ce28775e2b8ea4e06355009471328711666d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea3c18d8f37008425940502c58fd80ba4b5397c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f351d299ea258483e82449dc6e79878d4b21185"],"7f351d299ea258483e82449dc6e79878d4b21185":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"ea3c18d8f37008425940502c58fd80ba4b5397c1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f366ce28775e2b8ea4e06355009471328711666d":["ea3c18d8f37008425940502c58fd80ba4b5397c1"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7f351d299ea258483e82449dc6e79878d4b21185"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7f351d299ea258483e82449dc6e79878d4b21185":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}