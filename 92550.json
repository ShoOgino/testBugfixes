{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=20) {\n        floatTestStart.get(0).add(f);\n      }\n      if (l>=30) {\n        floatTestStart.get(1).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=20) {\n        floatTestStart.get(0).add(f);\n      }\n      if (l>=30) {\n        floatTestStart.get(1).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=20) {\n        floatTestStart.get(0).add(f);\n      }\n      if (l>=30) {\n        floatTestStart.get(1).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=20) {\n        floatTestStart.get(0).add(f);\n      }\n      if (l>=30) {\n        floatTestStart.get(1).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=20) {\n        floatTestStart.get(0).add(f);\n      }\n      if (l>=30) {\n        floatTestStart.get(1).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/QueryFacetTest#queryTest().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryTest() throws Exception { \n    h.update(\"<delete><query>*:*</query></delete>\");\n    //INT\n    ArrayList<ArrayList<Integer>> int1TestStart = new ArrayList<>();\n    int1TestStart.add(new ArrayList<Integer>());\n    ArrayList<ArrayList<Integer>> int2TestStart = new ArrayList<>();\n    int2TestStart.add(new ArrayList<Integer>());\n    \n    //LONG\n    ArrayList<ArrayList<Long>> longTestStart = new ArrayList<>();\n    longTestStart.add(new ArrayList<Long>());\n    longTestStart.add(new ArrayList<Long>());\n    \n    //FLOAT\n    ArrayList<ArrayList<Float>> floatTestStart = new ArrayList<>();\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    floatTestStart.add(new ArrayList<Float>());\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int s = j%STRING;\n      assertU(adoc(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n          \"double_dd\", \"\" + d,  \"date_dtd\", (1800+dt) + \"-12-31T23:59:59.999Z\", \"string_sd\", \"abc\" + new Integer(s).toString().charAt(0)));\n\n      if (f<=50) {\n        int1TestStart.get(0).add(i);\n      }\n      if (f<=30) {\n        int2TestStart.get(0).add(i);\n      }\n      if (new Integer(s).toString().charAt(0)=='1') {\n        longTestStart.get(0).add(l);\n      }\n      if (new Integer(s).toString().charAt(0)=='2') {\n        longTestStart.get(1).add(l);\n      }\n      if (l>=30) {\n        floatTestStart.get(0).add(f);\n      }\n      if (d<=50) {\n        floatTestStart.get(1).add(f);\n      }\n      if (l>=20) {\n        floatTestStart.get(2).add(f);\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    //Query ascending tests\n    setResponse(h.query(request(fileToStringArr(QueryFacetTest.class, fileName))));\n    \n    //Int One\n    ArrayList<Double> int1 = getDoubleList(\"ir\", \"queryFacets\", \"float1\", \"double\", \"sum\");\n    ArrayList<Double> int1Test = calculateNumberStat(int1TestStart, \"sum\");\n    assertEquals(getRawResponse(), int1, int1Test);\n    //Int Two\n    ArrayList<Integer> int2 = getIntegerList(\"ir\", \"queryFacets\", \"float2\", \"int\", \"percentile_8\");\n    ArrayList<Integer> int2Test = (ArrayList<Integer>)calculateStat(int2TestStart, \"perc_8\");\n    assertEquals(getRawResponse(), int2, int2Test);\n\n    //Long\n    ArrayList<Double> long1 = getDoubleList(\"lr\", \"queryFacets\", \"string\", \"double\", \"median\");\n    ArrayList<Double> long1Test = calculateNumberStat(longTestStart, \"median\");\n    assertEquals(getRawResponse(),long1,long1Test);\n\n    //Float\n    ArrayList<Double> float1 = getDoubleList(\"fr\", \"queryFacets\", \"lad\", \"double\", \"mean\");\n    ArrayList<Double> float1Test = calculateNumberStat(floatTestStart, \"mean\");\n    assertEquals(getRawResponse(), float1, float1Test);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}