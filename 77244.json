{"path":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordDeserializerTest#runRandomTest(int,int,int).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordDeserializerTest#runRandomTest(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Runs a test which serializes and deserializes random word values.\n     *\n     * @param wordLength the length of words to test\n     * @param bytePadding the number of bytes padding the byte array\n     * @param wordCount the number of word values to test\n     */\n    private static void runRandomTest(final int wordLength, final int bytePadding, final int wordCount) {\n        final long seed = randomLong();\n        final Random random = new Random(seed);\n        final Random verificationRandom = new Random(seed);\n\n        final long wordMask;\n        if(wordLength == 64) {\n            wordMask = ~0L;\n        } else {\n            wordMask = (1L << wordLength) - 1L;\n        }\n\n        final BigEndianAscendingWordSerializer serializer =\n            new BigEndianAscendingWordSerializer(wordLength/*wordLength, arbitrary*/,\n                                                 wordCount,\n                                                 bytePadding/*bytePadding, arbitrary*/);\n\n        for(int i=0; i<wordCount; i++) {\n            final long value = random.nextLong() & wordMask;\n            serializer.writeWord(value);\n        }\n\n        final byte[] bytes = serializer.getBytes();\n\n        final BigEndianAscendingWordDeserializer deserializer =\n            new BigEndianAscendingWordDeserializer(wordLength, bytePadding, bytes);\n\n        assertEquals(deserializer.totalWordCount(), wordCount);\n        for(int i=0; i<wordCount; i++) {\n            assertEquals(deserializer.readWord(), (verificationRandom.nextLong() & wordMask));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordDeserializerTest#runRandomTest(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Runs a test which serializes and deserializes random word values.\n     *\n     * @param wordLength the length of words to test\n     * @param bytePadding the number of bytes padding the byte array\n     * @param wordCount the number of word values to test\n     */\n    private static void runRandomTest(final int wordLength, final int bytePadding, final int wordCount) {\n        final long seed = randomLong();\n        final Random random = new Random(seed);\n        final Random verificationRandom = new Random(seed);\n\n        final long wordMask;\n        if(wordLength == 64) {\n            wordMask = ~0L;\n        } else {\n            wordMask = (1L << wordLength) - 1L;\n        }\n\n        final BigEndianAscendingWordSerializer serializer =\n            new BigEndianAscendingWordSerializer(wordLength/*wordLength, arbitrary*/,\n                                                 wordCount,\n                                                 bytePadding/*bytePadding, arbitrary*/);\n\n        for(int i=0; i<wordCount; i++) {\n            final long value = random.nextLong() & wordMask;\n            serializer.writeWord(value);\n        }\n\n        final byte[] bytes = serializer.getBytes();\n\n        final BigEndianAscendingWordDeserializer deserializer =\n            new BigEndianAscendingWordDeserializer(wordLength, bytePadding, bytes);\n\n        assertEquals(deserializer.totalWordCount(), wordCount);\n        for(int i=0; i<wordCount; i++) {\n            assertEquals(deserializer.readWord(), (verificationRandom.nextLong() & wordMask));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}